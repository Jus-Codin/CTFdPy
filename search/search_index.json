{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CTFdPy","text":"<p>CTFdPy is an API wrapper for CTFd, a Capture The Flag platform.</p> <p>It is designed to make it easier to interact with the CTFd API in Python to streamline the setup process for CTFs.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>TODO</p>"},{"location":"#example-usage","title":"Example Usage","text":"<p>TODO</p>"},{"location":"#documentation","title":"Documentation","text":"<p>These pages go into detail about what you can do with the API</p> <ul> <li>API Reference</li> <li>Unofficial CTFd API Documentation</li> </ul>"},{"location":"#api-coverage","title":"API Coverage","text":"<p>To see what parts of the API are covered, check out the API Coverage page.</p>"},{"location":"coverage/","title":"API Coverage","text":"<ul> <li> Awards<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Brackets<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Challenges<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Comments<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Configs<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Files<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Flags<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Hints<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Notifications<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Pages<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Scoreboard<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Shares<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Statistics<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Submissions<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Tags<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Teams<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Tokens<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Topics<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Unlocks<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> <li> Users<ul> <li> Endpoint Documentation</li> <li> API Implementation</li> </ul> </li> </ul>"},{"location":"ctfdpy/client/","title":"Client","text":""},{"location":"ctfdpy/client/#ctfdpy.client.APIClient","title":"APIClient","text":"<p>             Bases: <code>Generic[A]</code>, <code>APIMixin</code></p> <p>The main class for interacting with the CTFd API</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str | URL</code> <p>The base URL of the CTFd instance</p> required <code>auth</code> <code>BaseAuthStrategy | str | None</code> <p>The authentication strategy to use. If a string is provided, it is assumed to be a token. If <code>None</code> is provided, no authentication is used.</p> <code>None</code> <code>user_agent</code> <code>str</code> <p>The user agent to use for requests, by default \"CTFdPy/0.1.0\"</p> <code>'CTFdPy/0.1.0'</code> <code>follow_redirects</code> <code>bool</code> <p>Whether to follow redirects, by default False</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>url</code> <code>URL</code> <p>The base URL of the CTFd instance</p> <code>auth</code> <code>BaseAuthStrategy</code> <p>The authentication strategy to use</p> <code>challenges</code> <code>ChallengesAPI</code> <p>Interface for interacting with the <code>/api/v1/challenges</code> CTFd API endpoint.</p> <code>files</code> <code>FilesAPI</code> <p>Interface for interacting with the <code>/api/v1/files</code> CTFd API endpoint.</p> <code>flags</code> <code>FlagsAPI</code> <p>Interface for interacting with the <code>/api/v1/flags</code> CTFd API endpoint.</p> <code>hints</code> <code>HintsAPI</code> <p>Interface for interacting with the <code>/api/v1/hints</code> CTFd API endpoint.</p> <code>tags</code> <code>TagsAPI</code> <p>Interface for interacting with the <code>/api/v1/tags</code> CTFd API endpoint.</p> <code>topics</code> <code>TopicsAPI</code> <p>Interface for interacting with the <code>/api/v1/topics</code> CTFd API endpoint.</p> <code>users</code> <code>UsersAPI</code> <p>Interface for interacting with the <code>/api/v1/users</code> CTFd API endpoint.</p> Source code in <code>ctfdpy\\client.py</code> <pre><code>class APIClient(Generic[A], APIMixin):\n    \"\"\"\n    The main class for interacting with the CTFd API\n\n    Parameters\n    ----------\n    url : str | httpx.URL\n        The base URL of the CTFd instance\n    auth : BaseAuthStrategy | str | None\n        The authentication strategy to use. If a string is provided, it is assumed to be a token.\n        If `None` is provided, no authentication is used.\n    user_agent : str, optional\n        The user agent to use for requests, by default \"CTFdPy/0.1.0\"\n    follow_redirects : bool, optional\n        Whether to follow redirects, by default False\n\n    Attributes\n    ----------\n    url : httpx.URL\n        The base URL of the CTFd instance\n    auth : BaseAuthStrategy\n        The authentication strategy to use\n    challenges : ChallengesAPI\n        Interface for interacting with the `/api/v1/challenges` CTFd API endpoint.\n    files : FilesAPI\n        Interface for interacting with the `/api/v1/files` CTFd API endpoint.\n    flags : FlagsAPI\n        Interface for interacting with the `/api/v1/flags` CTFd API endpoint.\n    hints : HintsAPI\n        Interface for interacting with the `/api/v1/hints` CTFd API endpoint.\n    tags : TagsAPI\n        Interface for interacting with the `/api/v1/tags` CTFd API endpoint.\n    topics : TopicsAPI\n        Interface for interacting with the `/api/v1/topics` CTFd API endpoint.\n    users : UsersAPI\n        Interface for interacting with the `/api/v1/users` CTFd API endpoint.\n    \"\"\"\n\n    @overload\n    def __init__(\n        self: APIClient[UnauthAuthStrategy],\n        url: str | httpx.URL,\n        auth: None = None,\n        *,\n        user_agent: str = \"CTFdPy/0.1.0\",\n        follow_redirects: bool = False,\n    ): ...\n\n    @overload\n    def __init__(\n        self: APIClient[TokenAuthStrategy],\n        url: str | httpx.URL,\n        auth: str,\n        *,\n        user_agent: str = \"CTFdPy/0.1.0\",\n        follow_redirects: bool = False,\n    ): ...\n\n    @overload\n    def __init__(\n        self: APIClient[AS],\n        url: str | httpx.URL,\n        auth: AS,\n        *,\n        user_agent: str = \"CTFdPy/0.1.0\",\n        follow_redirects: bool = False,\n    ): ...\n\n    def __init__(\n        self,\n        url: str | httpx.URL,\n        auth: A | str | None = None,\n        *,\n        user_agent: str = \"CTFdPy/0.1.0\",\n        follow_redirects: bool = False,\n    ):\n        if isinstance(auth, str):\n            auth = TokenAuthStrategy(auth)\n        elif auth is None:\n            auth = UnauthAuthStrategy()\n\n        self.auth: A = auth\n\n        self.url = httpx.URL(url)\n        self._user_agent = user_agent\n        self._follow_redirects = follow_redirects\n\n        self.__sync_client: ContextVar[httpx.Client | None] = ContextVar(\n            \"sync_client\", default=None\n        )\n        self.__async_client: ContextVar[httpx.AsyncClient | None] = ContextVar(\n            \"async_client\", default=None\n        )\n\n        super().__init__(self)\n\n    def _get_client_defaults(self) -&gt; dict[str, str]:\n        auth_flow = None\n        if self.auth is not None:\n            auth_flow = self.auth.get_auth_flow(self)\n\n        headers = {\"User-Agent\": self._user_agent, \"Content-Type\": \"application/json\"}\n\n        return {\n            \"auth\": auth_flow,\n            \"base_url\": self.url,\n            \"headers\": headers,\n            \"follow_redirects\": self._follow_redirects,\n        }\n\n    def _create_sync_client(self) -&gt; httpx.Client:\n        return httpx.Client(**self._get_client_defaults())\n\n    def get_sync_client(self) -&gt; httpx.Client:\n        client = self.__sync_client.get()\n        if client is not None:\n            return client\n        else:\n            client = self._create_sync_client()\n            self.__sync_client.set(client)\n            return client\n\n    def close(self) -&gt; None:\n        client = self.__sync_client.get()\n        if client is not None:\n            client.close()\n            self.__sync_client.set(None)\n\n    def __enter__(self) -&gt; APIClient:\n        if self.__sync_client.get() is not None:\n            raise RuntimeError(\"Sync HTTP client already exists\")\n        self.__sync_client.set(self._create_sync_client())\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Type[BaseException] | None = None,\n        exc_value: BaseException | None = None,\n        traceback: TracebackType | None = None,\n    ) -&gt; None:\n        cast(httpx.Client, self.__sync_client.get()).close()\n        self.__sync_client.set(None)\n\n    def _create_async_client(self) -&gt; httpx.AsyncClient:\n        return httpx.AsyncClient(**self._get_client_defaults())\n\n    def get_async_client(self) -&gt; httpx.AsyncClient:\n        client = self.__async_client.get()\n        if client is not None:\n            return client\n        else:\n            client = self._create_async_client()\n            self.__async_client.set(client)\n            return client\n\n    async def aclose(self) -&gt; None:\n        client = self.__async_client.get()\n        if client is not None:\n            await client.aclose()\n            self.__async_client.set(None)\n\n    async def __aenter__(self) -&gt; APIClient:\n        if self.__async_client.get() is not None:\n            raise RuntimeError(\"Async HTTP client already exists\")\n        self.__async_client.set(self._create_async_client())\n        return self\n\n    async def __aexit__(\n        self,\n        exc_type: Type[BaseException] | None = None,\n        exc_value: BaseException | None = None,\n        traceback: TracebackType | None = None,\n    ) -&gt; None:\n        await cast(httpx.AsyncClient, self.__async_client.get()).aclose()\n        self.__async_client.set(None)\n\n    def _request(\n        self,\n        method: str,\n        url: str | httpx.URL,\n        *,\n        params: QueryParamTypes | None = None,\n        content: RequestContent | None = None,\n        data: RequestData | None = None,\n        files: RequestFiles | None = None,\n        json: Any | None = None,\n        headers: HeaderTypes | None = None,\n        cookies: CookieTypes | None = None,\n    ) -&gt; httpx.Response:\n        client = self.get_sync_client()\n        try:\n            return client.request(\n                method,\n                url,\n                params=params,\n                content=content,\n                data=data,\n                files=files,\n                json=json,\n                headers=headers,\n                cookies=cookies,\n            )\n        except httpx.TimeoutException as e:\n            raise RequestTimeout(request=e.request) from e\n        except Exception as e:\n            raise CTFdpyException(repr(e)) from e\n\n    async def _arequest(\n        self,\n        method: str,\n        url: str | httpx.URL,\n        *,\n        params: QueryParamTypes | None = None,\n        content: RequestContent | None = None,\n        data: RequestData | None = None,\n        files: RequestFiles | None = None,\n        json: Any | None = None,\n        headers: HeaderTypes | None = None,\n        cookies: CookieTypes | None = None,\n    ) -&gt; httpx.Response:\n        client = self.get_async_client()\n        try:\n            return await client.request(\n                method,\n                url,\n                params=params,\n                content=content,\n                data=data,\n                files=files,\n                json=json,\n                headers=headers,\n                cookies=cookies,\n            )\n        except httpx.TimeoutException as e:\n            raise RequestTimeout(request=e.request) from e\n        except Exception as e:\n            raise CTFdpyException(repr(e)) from e\n\n    @overload\n    def _handle_response(\n        self,\n        response: httpx.Response,\n        error_models: dict[str, APIResponseException] | None = None,\n    ) -&gt; bool | APIResponse: ...\n\n    @overload\n    def _handle_response(\n        self,\n        response: httpx.Response,\n        response_model: Type[T] | TypeAdapter[T] | Callable[[APIResponse], T],\n        error_models: dict[str, APIResponseException] | None = None,\n    ) -&gt; T: ...\n\n    def _handle_response(\n        self,\n        response: httpx.Response,\n        response_model: (\n            Type[T] | TypeAdapter[T] | Callable[[APIResponse], T] | None\n        ) = None,\n        error_models: dict[str, APIResponseException] | None = None,\n    ) -&gt; T | bool | APIResponse:\n        if not response.is_success:\n            error_models = error_models or {}\n            status_code = response.status_code\n\n            # This is uh... not great\n            error_model = error_models.get(\n                status_code,\n                error_models.get(\n                    f\"{str(status_code)[0]}XX\",\n                    error_models.get(\"default\", APIResponseException),\n                ),\n            )\n\n            raise error_model(response=response)\n\n        response_data: APIResponse = response.json()\n\n        if response_model is None:\n            try:\n                return response_data[\"success\"]\n            except KeyError:\n                return response_data\n        elif response_data.get(\"data\") is None:\n            raise ValueError(\"Response data expected to have 'data' key\")\n\n        if issubclass(response_model, BaseModel):\n            response_data = response_model.model_validate(response_data[\"data\"])\n        elif isinstance(response_model, TypeAdapter):\n            response_data = response_model.validate_python(response_data[\"data\"])\n        elif callable(response_model):\n            response_data = response_model(response_data)\n        else:\n            # This should never happen\n            raise ValueError(\"Invalid response model\")\n\n        return response_data\n\n    @overload\n    def request(\n        self,\n        method: str,\n        url: str | httpx.URL,\n        *,\n        params: QueryParamTypes | None = None,\n        content: RequestContent | None = None,\n        data: RequestData | None = None,\n        files: RequestFiles | None = None,\n        json: Any | None = None,\n        headers: HeaderTypes | None = None,\n        cookies: CookieTypes | None = None,\n        error_models: dict[str, APIResponseException] | None = None,\n    ) -&gt; bool | APIResponse: ...\n\n    @overload\n    def request(\n        self,\n        method: str,\n        url: str | httpx.URL,\n        *,\n        response_model: Type[T] | TypeAdapter[T] | Callable[[APIResponse], T],\n        params: QueryParamTypes | None = None,\n        content: RequestContent | None = None,\n        data: RequestData | None = None,\n        files: RequestFiles | None = None,\n        json: Any | None = None,\n        headers: HeaderTypes | None = None,\n        cookies: CookieTypes | None = None,\n        error_models: dict[str, APIResponseException] | None = None,\n    ) -&gt; T: ...\n\n    def request(\n        self,\n        method: str,\n        url: str | httpx.URL,\n        *,\n        params: QueryParamTypes | None = None,\n        content: RequestContent | None = None,\n        data: RequestData | None = None,\n        files: RequestFiles | None = None,\n        json: Any | None = None,\n        headers: HeaderTypes | None = None,\n        cookies: CookieTypes | None = None,\n        response_model: (\n            Type[T] | TypeAdapter[T] | Callable[[APIResponse], T] | None\n        ) = None,\n        error_models: dict[str, APIResponseException] | None = None,\n    ) -&gt; T | bool | APIResponse:\n        response = self._request(\n            method,\n            url,\n            params=params,\n            content=content,\n            data=data,\n            files=files,\n            json=json,\n            headers=headers,\n            cookies=cookies,\n        )\n        return self._handle_response(\n            response, response_model=response_model, error_models=error_models\n        )\n\n    @overload\n    async def arequest(\n        self,\n        method: str,\n        url: str | httpx.URL,\n        *,\n        params: QueryParamTypes | None = None,\n        content: RequestContent | None = None,\n        data: RequestData | None = None,\n        files: RequestFiles | None = None,\n        json: Any | None = None,\n        headers: HeaderTypes | None = None,\n        cookies: CookieTypes | None = None,\n        error_models: dict[str, APIResponseException] | None = None,\n    ) -&gt; bool | APIResponse: ...\n\n    @overload\n    async def arequest(\n        self,\n        method: str,\n        url: str | httpx.URL,\n        *,\n        response_model: Type[T] | TypeAdapter[T] | Callable[[APIResponse], T],\n        params: QueryParamTypes | None = None,\n        content: RequestContent | None = None,\n        data: RequestData | None = None,\n        files: RequestFiles | None = None,\n        json: Any | None = None,\n        headers: HeaderTypes | None = None,\n        cookies: CookieTypes | None = None,\n        error_models: dict[str, APIResponseException] | None = None,\n    ) -&gt; T: ...\n\n    async def arequest(\n        self,\n        method: str,\n        url: str | httpx.URL,\n        *,\n        params: QueryParamTypes | None = None,\n        content: RequestContent | None = None,\n        data: RequestData | None = None,\n        files: RequestFiles | None = None,\n        json: Any | None = None,\n        headers: HeaderTypes | None = None,\n        cookies: CookieTypes | None = None,\n        response_model: (\n            Type[T] | TypeAdapter[T] | Callable[[APIResponse], T] | None\n        ) = None,\n        error_models: dict[str, APIResponseException] | None = None,\n    ) -&gt; T | bool | APIResponse:\n        response = await self._arequest(\n            method,\n            url,\n            params=params,\n            content=content,\n            data=data,\n            files=files,\n            json=json,\n            headers=headers,\n            cookies=cookies,\n        )\n        return self._handle_response(\n            response, response_model=response_model, error_models=error_models\n        )\n\n    @overload\n    def from_env(\n        cls: Type[APIClient[AS]],\n        *,\n        user_agent: str = \"CTFdPy/0.1.0\",\n        follow_redirects: bool = False,\n    ) -&gt; APIClient[AS]: ...\n\n    @classmethod\n    def from_env(cls: Type[APIClient[AS]], **kwargs) -&gt; APIClient[AS]:\n        \"\"\"\n        Create an APIClient from environment variables\n\n        The following environment variables are used:\n\n        - `CTFD_URL`: The base URL of the CTFd instance\n        - `CTFD_TOKEN`: The token to use for authentication\n        - `CTFD_USERNAME`: The username to use for authentication\n        - `CTFD_PASSWORD`: The password to use for authentication\n        \"\"\"\n        url = os.getenv(\"CTFD_URL\")\n        if url is None:\n            raise ValueError(\"CTFD_URL environment variable must be set\")\n\n        auth = None\n\n        token = os.getenv(\"CTFD_TOKEN\")\n        if token is not None:\n            auth = TokenAuthStrategy(token)\n\n        username = os.getenv(\"CTFD_USERNAME\")\n        password = os.getenv(\"CTFD_PASSWORD\")\n        if username is not None and password is not None and auth is None:\n            auth = CredentialAuthStrategy(username, password)\n\n        return cls(url, auth, **kwargs)\n</code></pre>"},{"location":"ctfdpy/client/#ctfdpy.client.APIClient.from_env","title":"from_env  <code>classmethod</code>","text":"<pre><code>from_env(**kwargs) -&gt; APIClient[AS]\n</code></pre> <p>Create an APIClient from environment variables</p> <p>The following environment variables are used:</p> <ul> <li><code>CTFD_URL</code>: The base URL of the CTFd instance</li> <li><code>CTFD_TOKEN</code>: The token to use for authentication</li> <li><code>CTFD_USERNAME</code>: The username to use for authentication</li> <li><code>CTFD_PASSWORD</code>: The password to use for authentication</li> </ul> Source code in <code>ctfdpy\\client.py</code> <pre><code>@classmethod\ndef from_env(cls: Type[APIClient[AS]], **kwargs) -&gt; APIClient[AS]:\n    \"\"\"\n    Create an APIClient from environment variables\n\n    The following environment variables are used:\n\n    - `CTFD_URL`: The base URL of the CTFd instance\n    - `CTFD_TOKEN`: The token to use for authentication\n    - `CTFD_USERNAME`: The username to use for authentication\n    - `CTFD_PASSWORD`: The password to use for authentication\n    \"\"\"\n    url = os.getenv(\"CTFD_URL\")\n    if url is None:\n        raise ValueError(\"CTFD_URL environment variable must be set\")\n\n    auth = None\n\n    token = os.getenv(\"CTFD_TOKEN\")\n    if token is not None:\n        auth = TokenAuthStrategy(token)\n\n    username = os.getenv(\"CTFD_USERNAME\")\n    password = os.getenv(\"CTFD_PASSWORD\")\n    if username is not None and password is not None and auth is None:\n        auth = CredentialAuthStrategy(username, password)\n\n    return cls(url, auth, **kwargs)\n</code></pre>"},{"location":"ctfdpy/exceptions/","title":"Exceptions","text":""},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions--exception-hierachy","title":"Exception Hierachy","text":"<ul> <li><code>CTFdpyException</code><ul> <li><code>RequestTimeout</code></li> <li><code>AuthenticationError</code></li> <li><code>APIResponseException</code><ul> <li><code>BadRequest</code></li> <li><code>Unauthorized</code></li> <li><code>Forbidden</code></li> <li><code>NotFound</code></li> <li><code>AdminOnly</code></li> <li><code>UnsuccessfulResponse</code></li> <li><code>BadChallengeAttempt</code></li> </ul> </li> <li><code>ModelValidationError</code></li> </ul> </li> </ul>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.CTFdpyException","title":"CTFdpyException","text":"<p>             Bases: <code>Exception</code></p> <p>Base exception for CTFdpy</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class CTFdpyException(Exception):\n    \"\"\"\n    Base exception for CTFdpy\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.RequestTimeout","title":"RequestTimeout","text":"<p>             Bases: <code>CTFdpyException</code></p> <p>Exception raised when a request times out</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class RequestTimeout(CTFdpyException):\n    \"\"\"\n    Exception raised when a request times out\n    \"\"\"\n\n    def __init__(self, *args, request: dict[str, Request] | None = None):\n        self.request = request\n        super().__init__(*args)\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.AuthenticationError","title":"AuthenticationError","text":"<p>             Bases: <code>CTFdpyException</code></p> <p>Exception raised when a user is not authenticated</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class AuthenticationError(CTFdpyException):\n    \"\"\"\n    Exception raised when a user is not authenticated\n    \"\"\"\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.APIResponseException","title":"APIResponseException","text":"<p>             Bases: <code>CTFdpyException</code></p> <p>Exception raised when a request to the CTFd API fails</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class APIResponseException(CTFdpyException):\n    \"\"\"\n    Exception raised when a request to the CTFd API fails\n    \"\"\"\n\n    def __init__(self, *args, response: Response | None = None):\n        self.response = response\n        super().__init__(*args)\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.BadRequest","title":"BadRequest","text":"<p>             Bases: <code>APIResponseException</code></p> <p>Exception raised when a request returns a 400</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class BadRequest(APIResponseException):\n    \"\"\"\n    Exception raised when a request returns a 400\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.Unauthorized","title":"Unauthorized","text":"<p>             Bases: <code>APIResponseException</code></p> <p>Exception raised when a request returns a 401</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class Unauthorized(APIResponseException):\n    \"\"\"\n    Exception raised when a request returns a 401\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.Forbidden","title":"Forbidden","text":"<p>             Bases: <code>APIResponseException</code></p> <p>Exception raised when a request returns a 403</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class Forbidden(APIResponseException):\n    \"\"\"\n    Exception raised when a request returns a 403\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.NotFound","title":"NotFound","text":"<p>             Bases: <code>APIResponseException</code></p> <p>Exception raised when a request returns a 404</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class NotFound(APIResponseException):\n    \"\"\"\n    Exception raised when a request returns a 404\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.AdminOnly","title":"AdminOnly","text":"<p>             Bases: <code>APIResponseException</code></p> <p>Exception raised when a request requires the user to be an admin</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class AdminOnly(APIResponseException):\n    \"\"\"\n    Exception raised when a request requires the user to be an admin\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.UnsuccessfulResponse","title":"UnsuccessfulResponse","text":"<p>             Bases: <code>APIResponseException</code></p> <p>Exception raised when the response is not successful</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class UnsuccessfulResponse(APIResponseException):\n    \"\"\"\n    Exception raised when the response is not successful\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.BadChallengeAttempt","title":"BadChallengeAttempt","text":"<p>             Bases: <code>APIResponseException</code></p> <p>Exception raised when a challenge attempt returns a non200 response</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class BadChallengeAttempt(APIResponseException):\n    \"\"\"\n    Exception raised when a challenge attempt returns a non200 response\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"ctfdpy/exceptions/#ctfdpy.exceptions.ModelValidationError","title":"ModelValidationError","text":"<p>             Bases: <code>CTFdpyException</code></p> <p>Exception raised when a model fails validation</p> Source code in <code>ctfdpy\\exceptions.py</code> <pre><code>class ModelValidationError(CTFdpyException):\n    \"\"\"\n    Exception raised when a model fails validation\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"ctfdpy/api/challenges/","title":"Challenges","text":""},{"location":"ctfdpy/api/challenges/#ctfdpy.api.challenges.ChallengesAPI","title":"ChallengesAPI","text":"<p>Interface for interacting with the <code>/api/v1/challenges</code> CTFd API endpoint.</p> Source code in <code>ctfdpy\\api\\challenges.py</code> <pre><code>class ChallengesAPI:\n    \"\"\"\n    Interface for interacting with the `/api/v1/challenges` CTFd API endpoint.\n    \"\"\"\n    def __init__(self, client: APIClient):\n        self._client = client\n\n    def list(\n        self,\n        *,\n        name: str | None = None,\n        max_attempts: int | None = None,\n        value: str | None = None,\n        category: str | None = None,\n        type: ChallengeType | None = None,\n        state: ChallengeState | None = None,\n        q: str | None = None,\n        field: (\n            Literal[\"name\", \"description\", \"category\", \"type\", \"state\"] | None\n        ) = None,\n        view: Literal[\"admin\"] | None = None,\n        page: int | None = None,\n    ) -&gt; list[AnonymousChallenge, ChallengeListing]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if name is not None:\n            params[\"name\"] = name\n        if max_attempts is not None:\n            params[\"max_attempts\"] = max_attempts\n        if value is not None:\n            params[\"value\"] = value\n        if category is not None:\n            params[\"category\"] = category\n        if type is not None:\n            params[\"type\"] = type.value\n        if state is not None:\n            params[\"state\"] = state.value\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n        if view is not None:\n            params[\"view\"] = view\n        if page is not None:\n            params[\"page\"] = page\n\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/challenges\",\n            params=params,\n            response_model=challenge_listing_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    async def async_list(\n        self,\n        *,\n        name: str | None = None,\n        max_attempts: int | None = None,\n        value: str | None = None,\n        category: str | None = None,\n        type: ChallengeType | None = None,\n        state: ChallengeState | None = None,\n        q: str | None = None,\n        field: (\n            Literal[\"name\", \"description\", \"category\", \"type\", \"state\"] | None\n        ) = None,\n        view: Literal[\"admin\"] | None = None,\n        page: int | None = None,\n    ) -&gt; list[AnonymousChallenge, ChallengeListing]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if name is not None:\n            params[\"name\"] = name\n        if max_attempts is not None:\n            params[\"max_attempts\"] = max_attempts\n        if value is not None:\n            params[\"value\"] = value\n        if category is not None:\n            params[\"category\"] = category\n        if type is not None:\n            params[\"type\"] = type.value\n        if state is not None:\n            params[\"state\"] = state.value\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n        if view is not None:\n            params[\"view\"] = view\n        if page is not None:\n            params[\"page\"] = page\n\n        return await self._client.arequest(\n            \"GET\",\n            \"/api/v1/challenges\",\n            params=params,\n            response_model=challenge_listing_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    # Create with standard challenge payload and one flag\n    @overload\n    def create(\n        self,\n        *,\n        payload: CreateStandardChallengePayload,\n        flag: str | None = None,\n        flag_type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        payload: CreateStandardChallengePayload,\n        flag: str | None = None,\n        flag_type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    # Create with standard challenge payload and multiple flags\n    @overload\n    def create(\n        self,\n        *,\n        payload: CreateStandardChallengePayload,\n        flags: list[flag_types] | None = None,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        payload: CreateStandardChallengePayload,\n        flags: list[flag_types] | None = None,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    # Create with dynamic challenge payload and one flag\n    @overload\n    def create(\n        self,\n        *,\n        payload: CreateDynamicChallengePayload,\n        flag: str | None = None,\n        flag_type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        payload: CreateDynamicChallengePayload,\n        flag: str | None = None,\n        flag_type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    # Create with dynamic challenge payload and multiple flags\n    @overload\n    def create(\n        self,\n        *,\n        payload: CreateDynamicChallengePayload,\n        flags: list[flag_types] | None = None,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        payload: CreateDynamicChallengePayload,\n        flags: list[flag_types] | None = None,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    # Create standard challenge with individual parameters and one flag\n    @overload\n    def create(\n        self,\n        *,\n        name: str,\n        description: str,\n        category: str,\n        type: Literal[ChallengeType.STANDARD],\n        value: int,\n        state: ChallengeState = ChallengeState.HIDDEN,\n        connection_info: str | None = None,\n        next_id: int | None = None,\n        max_attempts: int | None = None,\n        prerequisites: list[int | _HasChallengeID] | None = None,\n        anonymize: bool | None = None,\n        flag: str,\n        flag_type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        name: str,\n        description: str,\n        category: str,\n        type: Literal[ChallengeType.STANDARD],\n        value: int,\n        state: ChallengeState = ChallengeState.HIDDEN,\n        connection_info: str | None = None,\n        next_id: int | None = None,\n        max_attempts: int | None = None,\n        prerequisites: list[int | _HasChallengeID] | None = None,\n        anonymize: bool | None = None,\n        flag: str,\n        flag_type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    # Create standard challenge with individual parameters and multiple flags\n    @overload\n    def create(\n        self,\n        *,\n        name: str,\n        description: str,\n        category: str,\n        type: Literal[ChallengeType.STANDARD],\n        value: int,\n        state: ChallengeState = ChallengeState.HIDDEN,\n        connection_info: str | None = None,\n        next_id: int | None = None,\n        max_attempts: int | None = None,\n        prerequisites: list[int | _HasChallengeID] | None = None,\n        anonymize: bool | None = None,\n        flags: list[flag_types],\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        name: str,\n        description: str,\n        category: str,\n        type: Literal[ChallengeType.STANDARD],\n        value: int,\n        state: ChallengeState = ChallengeState.HIDDEN,\n        connection_info: str | None = None,\n        next_id: int | None = None,\n        max_attempts: int | None = None,\n        prerequisites: list[int | _HasChallengeID] | None = None,\n        anonymize: bool | None = None,\n        flags: list[flag_types],\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    # Create dynamic challenge with individual parameters and one flag\n    @overload\n    def create(\n        self,\n        *,\n        name: str,\n        description: str,\n        category: str,\n        type: Literal[ChallengeType.DYNAMIC],\n        initial: int,\n        decay: int,\n        minimum: int,\n        function: DecayFunction = DecayFunction.LINEAR,\n        state: ChallengeState = ChallengeState.HIDDEN,\n        connection_info: str | None = None,\n        next_id: int | None = None,\n        max_attempts: int | None = None,\n        prerequisites: list[int | _HasChallengeID] | None = None,\n        anonymize: bool | None = None,\n        flag: str,\n        flag_type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        name: str,\n        description: str,\n        category: str,\n        type: Literal[ChallengeType.DYNAMIC],\n        initial: int,\n        decay: int,\n        minimum: int,\n        function: DecayFunction = DecayFunction.LINEAR,\n        state: ChallengeState = ChallengeState.HIDDEN,\n        connection_info: str | None = None,\n        next_id: int | None = None,\n        max_attempts: int | None = None,\n        prerequisites: list[int | _HasChallengeID] | None = None,\n        anonymize: bool | None = None,\n        flag: str,\n        flag_type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    # Create dynamic challenge with individual parameters and multiple flags\n    @overload\n    def create(\n        self,\n        *,\n        name: str,\n        description: str,\n        category: str,\n        type: Literal[ChallengeType.DYNAMIC],\n        initial: int,\n        decay: int,\n        minimum: int,\n        function: DecayFunction = DecayFunction.LINEAR,\n        state: ChallengeState = ChallengeState.HIDDEN,\n        connection_info: str | None = None,\n        next_id: int | None = None,\n        max_attempts: int | None = None,\n        prerequisites: list[int | _HasChallengeID] | None = None,\n        anonymize: bool | None = None,\n        flags: list[flag_types],\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        name: str,\n        description: str,\n        category: str,\n        type: Literal[ChallengeType.DYNAMIC],\n        initial: int,\n        decay: int,\n        minimum: int,\n        function: DecayFunction = DecayFunction.LINEAR,\n        state: ChallengeState = ChallengeState.HIDDEN,\n        connection_info: str | None = None,\n        next_id: int | None = None,\n        max_attempts: int | None = None,\n        prerequisites: list[int | _HasChallengeID] | None = None,\n        anonymize: bool | None = None,\n        flags: list[flag_types],\n        hints: list[tuple[str, int]] | None = None,\n        tags: list[str] | None = None,\n        topics: list[str] | None = None,\n        files: list[str | os.PathLike] | None = None,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    @admin_only\n    def create(\n        self,\n        *,\n        payload: (\n            CreateStandardChallengePayload | CreateDynamicChallengePayload\n        ) = MISSING,\n        **kwargs,\n    ) -&gt; StandardChallengeWriteResult | DynamicChallengeWriteResult:\n        flags = kwargs.pop(\"flags\", None)\n\n        if flags is None:\n            flag = kwargs.pop(\"flag\", None)\n\n            if flag is not None:\n                flag_type = kwargs.pop(\"flag_type\", FlagType.STATIC)\n                case_insensitive = kwargs.pop(\"case_insensitive\", False)\n                flags = [(flag, flag_type, case_insensitive)]\n        else:\n            _flags = []\n\n            for flag in flags:\n                if isinstance(flag, str):\n                    _flags.append((flag, FlagType.STATIC, False))\n                elif isinstance(flag, tuple):\n                    if len(flag) == 1:\n                        _flags.append((flag[0], FlagType.STATIC, False))\n                    elif len(flag) == 2:\n                        _flags.append((flag[0], flag[1], False))\n                    elif len(flag) == 3:\n                        _flags.append((flag[0], flag[1], flag[2]))\n                    else:\n                        raise ValueError(\"Invalid flag tuple\")\n                else:\n                    raise ValueError(\"Invalid flag type\")\n\n            flags = _flags\n\n        hints = kwargs.pop(\"hints\", None)\n        tags = kwargs.pop(\"tags\", None)\n        topics = kwargs.pop(\"topics\", None)\n        files = kwargs.pop(\"files\", None)\n\n        if payload is MISSING:\n            prerequisites = kwargs.pop(\"prerequisites\", None)\n            anonymize = kwargs.pop(\"anonymize\", None)\n\n            requirements = None\n\n            if prerequisites is not None:\n                for i, prerequisite in enumerate(prerequisites):\n                    if isinstance(prerequisite, int):\n                        continue\n                    elif hasattr(prerequisite, \"id\"):\n                        prerequisites[i] = prerequisite.id\n                    else:\n                        raise ValueError(f\"Invalid prerequisite: {prerequisite}\")\n\n                requirements = ChallengeRequirementsDict(prerequisites=prerequisites)\n\n            if anonymize is not None:\n                if requirements is None:\n                    requirements = ChallengeRequirementsDict(anonymize=anonymize)\n                else:\n                    requirements[\"anonymize\"] = anonymize\n\n            challenge_type = kwargs.get(\"type\")\n\n            try:\n                if challenge_type == ChallengeType.STANDARD:\n                    payload = CreateStandardChallengePayload(\n                        requirements=requirements, **kwargs\n                    )\n                elif challenge_type == ChallengeType.DYNAMIC:\n                    payload = CreateDynamicChallengePayload(\n                        requirements=requirements, **kwargs\n                    )\n                else:\n                    raise ValueError(f\"Invalid challenge type: {challenge_type}\")\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        result = self._client.request(\n            \"POST\",\n            \"/api/v1/challenges\",\n            json=payload.dump_json(),\n            response_model=challenge_write_result_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n        if flags is not None:\n            for flag in flags:\n                self._client.flags.create(\n                    challenge_id=result.id,\n                    content=flag[0],\n                    type=flag[1],\n                    case_insensitive=flag[2],\n                )\n\n        if hints is not None:\n            for hint in hints:\n                self._client.hints.create(\n                    challenge_id=result.id, content=hint[0], cost=hint[1]\n                )\n\n        if tags is not None:\n            for tag in tags:\n                self._client.tags.create(challenge_id=result.id, value=tag)\n\n        if topics is not None:\n            for topic in topics:\n                self._client.topics.create(challenge_id=result.id, value=topic)\n\n        if files is not None:\n            for file in files:\n                self._client.files.create(challenge_id=result.id, file=file)\n\n        return result\n\n    @admin_only\n    async def async_create(\n        self,\n        *,\n        payload: (\n            CreateStandardChallengePayload | CreateDynamicChallengePayload\n        ) = MISSING,\n        **kwargs,\n    ) -&gt; StandardChallengeWriteResult | DynamicChallengeWriteResult:\n        flags = kwargs.pop(\"flags\", None)\n\n        if flags is None:\n            flag = kwargs.pop(\"flag\", None)\n\n            if flag is not None:\n                flag_type = kwargs.pop(\"flag_type\", FlagType.STATIC)\n                case_insensitive = kwargs.pop(\"case_insensitive\", False)\n                flags = [(flag, flag_type, case_insensitive)]\n        else:\n            _flags = []\n\n            for flag in flags:\n                if isinstance(flag, str):\n                    _flags.append((flag, FlagType.STATIC, False))\n                elif isinstance(flag, tuple):\n                    if len(flag) == 1:\n                        _flags.append((flag[0], FlagType.STATIC, False))\n                    elif len(flag) == 2:\n                        _flags.append((flag[0], flag[1], False))\n                    elif len(flag) == 3:\n                        _flags.append((flag[0], flag[1], flag[2]))\n                    else:\n                        raise ValueError(\"Invalid flag tuple\")\n                else:\n                    raise ValueError(\"Invalid flag type\")\n\n            flags = _flags\n\n        hints = kwargs.pop(\"hints\", None)\n        tags = kwargs.pop(\"tags\", None)\n        topics = kwargs.pop(\"topics\", None)\n        files = kwargs.pop(\"files\", None)\n\n        if payload is MISSING:\n            prerequisites = kwargs.pop(\"prerequisites\", None)\n            anonymize = kwargs.pop(\"anonymize\", None)\n\n            requirements = None\n\n            if prerequisites is not None:\n                for i, prerequisite in enumerate(prerequisites):\n                    if isinstance(prerequisite, int):\n                        continue\n                    elif hasattr(prerequisite, \"id\"):\n                        prerequisites[i] = prerequisite.id\n                    else:\n                        raise ValueError(f\"Invalid prerequisite: {prerequisite}\")\n\n                requirements = ChallengeRequirementsDict(prerequisites=prerequisites)\n\n            if anonymize is not None:\n                if requirements is None:\n                    requirements = ChallengeRequirementsDict(anonymize=anonymize)\n                else:\n                    requirements[\"anonymize\"] = anonymize\n\n            challenge_type = kwargs.get(\"type\")\n\n            try:\n                if challenge_type == ChallengeType.STANDARD:\n                    payload = CreateStandardChallengePayload(\n                        requirements=requirements, **kwargs\n                    )\n                elif challenge_type == ChallengeType.DYNAMIC:\n                    payload = CreateDynamicChallengePayload(\n                        requirements=requirements, **kwargs\n                    )\n                else:\n                    raise ValueError(f\"Invalid challenge type: {challenge_type}\")\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        result = await self._client.arequest(\n            \"POST\",\n            \"/api/v1/challenges\",\n            json=payload.dump_json(),\n            response_model=challenge_write_result_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n        if flags is not None:\n            for flag in flags:\n                await self._client.flags.async_create(\n                    challenge_id=result.id,\n                    content=flag[0],\n                    type=flag[1],\n                    case_insensitive=flag[2],\n                )\n\n        if hints is not None:\n            for hint in hints:\n                await self._client.hints.async_create(\n                    challenge_id=result.id, content=hint[0], cost=hint[1]\n                )\n\n        if tags is not None:\n            for tag in tags:\n                await self._client.tags.async_create(challenge_id=result.id, value=tag)\n\n        if topics is not None:\n            for topic in topics:\n                await self._client.topics.async_create(\n                    challenge_id=result.id, value=topic\n                )\n\n        if files is not None:\n            for file in files:\n                await self._client.files.async_create(challenge_id=result.id, file=file)\n\n        return result\n\n    def attempt(self, challenge_id: int, submission: str) -&gt; ChallengeAttemptResult:\n        try:\n            return self._client.request(\n                \"POST\",\n                \"/api/v1/challenges/attempt\",\n                json={\"challenge_id\": challenge_id, \"submission\": submission},\n                response_model=ChallengeAttemptResult,\n                error_models={\n                    400: BadRequest,\n                    401: Unauthorized,\n                    403: BadChallengeAttempt,\n                    404: NotFound,\n                    429: BadChallengeAttempt,\n                },\n            )\n        except BadChallengeAttempt as e:\n            # This is cursed\n            try:\n                data: APIResponse = e.response.json()\n            except Exception:\n                if e.response.status_code == 403:\n                    raise Forbidden(response=e.response) from e\n                else:\n                    raise e from e\n\n            try:\n                return ChallengeAttemptResult.model_validate(data[\"data\"])\n            except Exception as e:\n                raise e from e\n\n    async def async_attempt(\n        self, challenge_id: int, submission: str\n    ) -&gt; ChallengeAttemptResult:\n        try:\n            return await self._client.arequest(\n                \"POST\",\n                \"/api/v1/challenges/attempt\",\n                json={\"challenge_id\": challenge_id, \"submission\": submission},\n                response_model=ChallengeAttemptResult,\n                error_models={\n                    400: BadRequest,\n                    401: Unauthorized,\n                    403: BadChallengeAttempt,\n                    404: NotFound,\n                    429: BadChallengeAttempt,\n                },\n            )\n        except BadChallengeAttempt as e:\n            # This is cursed\n            try:\n                data: APIResponse = e.response.json()\n            except Exception:\n                if e.response.status_code == 403:\n                    raise Forbidden(response=e.response) from e\n                else:\n                    raise e from e\n\n            try:\n                return ChallengeAttemptResult.model_validate(data[\"data\"])\n            except Exception as e:\n                raise e from e\n\n    @admin_only\n    def get_types(self) -&gt; list[ChallengeTypeInfo]:\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/challenges/types\",\n            response_model=challenge_type_info_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_get_types(self) -&gt; list[ChallengeTypeInfo]:\n        return await self._client.arequest(\n            \"GET\",\n            \"/api/v1/challenges/types\",\n            response_model=challenge_type_info_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    def get(self, challenge_id: int) -&gt; StandardChallenge | DynamicChallenge:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}\",\n            response_model=challenge_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    async def async_get(\n        self, challenge_id: int\n    ) -&gt; StandardChallenge | DynamicChallenge:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}\",\n            response_model=challenge_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    # Update with base challenge payload\n    @overload\n    def update(\n        self,\n        challenge_id: int,\n        *,\n        payload: UpdateBaseChallengePayload,\n    ) -&gt; StandardChallengeWriteResult | DynamicChallengeWriteResult: ...\n\n    @overload\n    async def async_update(\n        self,\n        challenge_id: int,\n        *,\n        payload: UpdateBaseChallengePayload,\n    ) -&gt; StandardChallengeWriteResult | DynamicChallengeWriteResult: ...\n\n    # Update with standard challenge payload\n    @overload\n    def update(\n        self,\n        challenge_id: int,\n        *,\n        payload: UpdateStandardChallengePayload,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    @overload\n    async def async_update(\n        self,\n        challenge_id: int,\n        *,\n        payload: UpdateStandardChallengePayload,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    # Update with dynamic challenge payload\n    @overload\n    def update(\n        self,\n        challenge_id: int,\n        *,\n        payload: UpdateDynamicChallengePayload,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    @overload\n    async def async_update(\n        self,\n        challenge_id: int,\n        *,\n        payload: UpdateDynamicChallengePayload,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    # Update standard or dynamic challenge with individual parameters\n    @overload\n    def update(\n        self,\n        challenge_id: int,\n        *,\n        name: str = MISSING,\n        description: str = MISSING,\n        category: str = MISSING,\n        state: ChallengeState = MISSING,\n        connection_info: str | None = MISSING,\n        next_id: int | None = MISSING,\n        max_attempts: int | None = MISSING,\n        prerequisites: list[int | _HasChallengeID] | None = MISSING,\n        anonymize: bool | None = MISSING,\n    ) -&gt; StandardChallengeWriteResult | DynamicChallengeWriteResult: ...\n\n    @overload\n    async def async_update(\n        self,\n        challenge_id: int,\n        *,\n        name: str = MISSING,\n        description: str = MISSING,\n        category: str = MISSING,\n        state: ChallengeState = MISSING,\n        connection_info: str | None = MISSING,\n        next_id: int | None = MISSING,\n        max_attempts: int | None = MISSING,\n        prerequisites: list[int | _HasChallengeID] | None = MISSING,\n        anonymize: bool | None = MISSING,\n    ) -&gt; StandardChallengeWriteResult | DynamicChallengeWriteResult: ...\n\n    # Update standard challenge with individual parameters\n    @overload\n    def update(\n        self,\n        challenge_id: int,\n        *,\n        name: str = MISSING,\n        description: str = MISSING,\n        category: str = MISSING,\n        value: int = MISSING,\n        state: ChallengeState = MISSING,\n        connection_info: str | None = MISSING,\n        next_id: int | None = MISSING,\n        max_attempts: int | None = MISSING,\n        prerequisites: list[int | _HasChallengeID] | None = MISSING,\n        anonymize: bool | None = MISSING,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    @overload\n    async def async_update(\n        self,\n        challenge_id: int,\n        *,\n        name: str = MISSING,\n        description: str = MISSING,\n        category: str = MISSING,\n        value: int = MISSING,\n        state: ChallengeState = MISSING,\n        connection_info: str | None = MISSING,\n        next_id: int | None = MISSING,\n        max_attempts: int | None = MISSING,\n        prerequisites: list[int | _HasChallengeID] | None = MISSING,\n        anonymize: bool | None = MISSING,\n    ) -&gt; StandardChallengeWriteResult: ...\n\n    # Update dynamic challenge with individual parameters\n    @overload\n    def update(\n        self,\n        challenge_id: int,\n        *,\n        name: str = MISSING,\n        description: str = MISSING,\n        category: str = MISSING,\n        initial: int = MISSING,\n        decay: int = MISSING,\n        minimum: int = MISSING,\n        function: DecayFunction = MISSING,\n        state: ChallengeState = MISSING,\n        connection_info: str | None = MISSING,\n        next_id: int | None = MISSING,\n        max_attempts: int | None = MISSING,\n        prerequisites: list[int | _HasChallengeID] | None = MISSING,\n        anonymize: bool | None = MISSING,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    @overload\n    async def async_update(\n        self,\n        challenge_id: int,\n        *,\n        name: str = MISSING,\n        description: str = MISSING,\n        category: str = MISSING,\n        initial: int = MISSING,\n        decay: int = MISSING,\n        minimum: int = MISSING,\n        function: DecayFunction = MISSING,\n        state: ChallengeState = MISSING,\n        connection_info: str | None = MISSING,\n        next_id: int | None = MISSING,\n        max_attempts: int | None = MISSING,\n        prerequisites: list[int | _HasChallengeID] | None = MISSING,\n        anonymize: bool | None = MISSING,\n    ) -&gt; DynamicChallengeWriteResult: ...\n\n    @admin_only\n    def update(\n        self,\n        challenge_id: int,\n        *,\n        payload: (\n            UpdateStandardChallengePayload | UpdateDynamicChallengePayload\n        ) = MISSING,\n        **kwargs,\n    ) -&gt; StandardChallengeWriteResult | DynamicChallengeWriteResult:\n        if payload is MISSING:\n            prerequisites = kwargs.pop(\"prerequisites\", None)\n            anonymize = kwargs.pop(\"anonymize\", None)\n\n            requirements = None\n\n            if prerequisites is not None:\n                for i, prerequisite in enumerate(prerequisites):\n                    if isinstance(prerequisite, int):\n                        continue\n                    elif hasattr(prerequisite, \"id\"):\n                        prerequisites[i] = prerequisite.id\n                    else:\n                        raise ValueError(f\"Invalid prerequisite: {prerequisite}\")\n\n                requirements = ChallengeRequirementsDict(prerequisites=prerequisites)\n\n            if anonymize is not None:\n                if requirements is None:\n                    requirements = ChallengeRequirementsDict(anonymize=anonymize)\n                else:\n                    requirements[\"anonymize\"] = anonymize\n\n            if requirements is not None:\n                kwargs[\"requirements\"] = requirements\n\n            UNIQUE_FIELDS = {\n                \"standard\": (\"value\",),\n                \"dynamic\": (\"initial\", \"decay\", \"minimum\", \"function\"),\n            }\n\n            # check for unique fields, else fallback to base payload\n            payload_type = None\n            for key, value in UNIQUE_FIELDS.items():\n                if any(k in kwargs for k in value):\n                    payload_type = key\n                    break\n\n            try:\n                if payload_type is None:\n                    payload = UpdateBaseChallengePayload(**kwargs)\n                elif payload_type == \"standard\":\n                    payload = UpdateStandardChallengePayload(**kwargs)\n                elif payload_type == \"dynamic\":\n                    payload = UpdateDynamicChallengePayload(**kwargs)\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return self._client.request(\n            \"PATCH\",\n            f\"/api/v1/challenges/{challenge_id}\",\n            json=payload.dump_json(),\n            response_model=challenge_write_result_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_update(\n        self,\n        challenge_id: int,\n        *,\n        payload: (\n            UpdateStandardChallengePayload | UpdateDynamicChallengePayload\n        ) = MISSING,\n        **kwargs,\n    ) -&gt; StandardChallengeWriteResult | DynamicChallengeWriteResult:\n        if payload is MISSING:\n            prerequisites = kwargs.pop(\"prerequisites\", None)\n            anonymize = kwargs.pop(\"anonymize\", None)\n\n            requirements = None\n\n            if prerequisites is not None:\n                for i, prerequisite in enumerate(prerequisites):\n                    if isinstance(prerequisite, int):\n                        continue\n                    elif hasattr(prerequisite, \"id\"):\n                        prerequisites[i] = prerequisite.id\n                    else:\n                        raise ValueError(f\"Invalid prerequisite: {prerequisite}\")\n\n                requirements = ChallengeRequirementsDict(prerequisites=prerequisites)\n\n            if anonymize is not None:\n                if requirements is None:\n                    requirements = ChallengeRequirementsDict(anonymize=anonymize)\n                else:\n                    requirements[\"anonymize\"] = anonymize\n\n            if requirements is not None:\n                kwargs[\"requirements\"] = requirements\n\n            UNIQUE_FIELDS = {\n                \"standard\": (\"value\",),\n                \"dynamic\": (\"initial\", \"decay\", \"minimum\", \"function\"),\n            }\n\n            # check for unique fields, else fallback to base payload\n            payload_type = None\n            for key, value in UNIQUE_FIELDS.items():\n                if any(k in kwargs for k in value):\n                    payload_type = key\n                    break\n\n            try:\n                if payload_type is None:\n                    payload = UpdateBaseChallengePayload(**kwargs)\n                elif payload_type == \"standard\":\n                    payload = UpdateStandardChallengePayload(**kwargs)\n                elif payload_type == \"dynamic\":\n                    payload = UpdateDynamicChallengePayload(**kwargs)\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return await self._client.arequest(\n            \"PATCH\",\n            f\"/api/v1/challenges/{challenge_id}\",\n            json=payload.dump_json(),\n            response_model=challenge_write_result_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def delete(self, challenge_id: int) -&gt; None:\n        self._client.request(\n            \"DELETE\",\n            f\"/api/v1/challenges/{challenge_id}\",\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_delete(self, challenge_id: int) -&gt; None:\n        await self._client.arequest(\n            \"DELETE\",\n            f\"/api/v1/challenges/{challenge_id}\",\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get_files(self, challenge_id: int) -&gt; list[ChallengeFileLocation]:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/files\",\n            response_model=challenge_file_location_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_get_files(self, challenge_id: int) -&gt; list[ChallengeFileLocation]:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/files\",\n            response_model=challenge_file_location_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get_flags(self, challenge_id: int) -&gt; list[Flag]:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/flags\",\n            response_model=flag_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_get_flags(self, challenge_id: int) -&gt; list[Flag]:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/flags\",\n            response_model=flag_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get_hints(self, challenge_id: int) -&gt; list[Hint]:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/hints\",\n            response_model=hint_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_get_hints(self, challenge_id: int) -&gt; list[Hint]:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/hints\",\n            response_model=hint_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get_requirements(self, challenge_id: int) -&gt; ChallengeRequirements:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/requirements\",\n            response_model=ChallengeRequirements,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_get_requirements(self, challenge_id: int) -&gt; ChallengeRequirements:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/requirements\",\n            response_model=ChallengeRequirements,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get_solves(self, challenge_id: int) -&gt; list[ChallengeSolve]:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/solves\",\n            response_model=challenge_solves_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_get_solves(self, challenge_id: int) -&gt; list[ChallengeSolve]:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/solves\",\n            response_model=challenge_solves_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get_tags(self, challenge_id: int) -&gt; list[Tag]:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/tags\",\n            response_model=tag_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_get_tags(self, challenge_id: int) -&gt; list[Tag]:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/tags\",\n            response_model=tag_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get_topics(self, challenge_id: int) -&gt; list[ChallengeTopic]:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/topics\",\n            response_model=challenge_topic_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_get_topics(self, challenge_id: int) -&gt; list[ChallengeTopic]:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/challenges/{challenge_id}/topics\",\n            response_model=challenge_topic_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n</code></pre>"},{"location":"ctfdpy/api/files/","title":"Files","text":""},{"location":"ctfdpy/api/files/#ctfdpy.api.files.FilesAPI","title":"FilesAPI","text":"<p>Interface for interacting with the <code>/api/v1/files</code> CTFd API endpoint.</p> Source code in <code>ctfdpy\\api\\files.py</code> <pre><code>class FilesAPI:\n    \"\"\"\n    Interface for interacting with the `/api/v1/files` CTFd API endpoint.\n    \"\"\"\n\n    def __init__(self, client: APIClient):\n        self._client = client\n\n    @admin_only\n    def list(\n        self,\n        *,\n        type: FileType | None = None,\n        location: str | None = None,\n        q: str | None = None,\n        field: Literal[\"type\", \"location\"] | None = None,\n    ) -&gt; list[StandardFile | ChallengeFile | PageFile]:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        List all files with optional filtering.\n\n        Parameters\n        ----------\n        type: FileType | None\n            The type of file to filter by, defaults to None.\n        location: str | None\n            The location of the file to filter by, defaults to None.\n        q: str | None\n            The query string to search for, defaults to None.\n        field: Literal[\"type\", \"location\"] | None\n            The field to search in, defaults to None.\n\n        Returns\n        -------\n        list[StandardFile | ChallengeFile | PageFile]\n            A list of files that match the query.\n\n        Raises\n        ------\n        ValueError\n            If q and field are not provided together.\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n\n        Examples\n        --------\n        Get all files:\n\n        ```python\n        files = ctfd.files.list()\n        ```\n\n        Get all challenge files:\n\n        ```python\n        files = ctfd.files.list(type=FileType.CHALLENGE)\n        ```\n        \"\"\"\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if type is not None:\n            params[\"type\"] = type.value\n        if location is not None:\n            params[\"location\"] = location\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/files\",\n            params=params,\n            response_model=list_file_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_list(\n        self,\n        *,\n        type: FileType | None = None,\n        location: str | None = None,\n        q: str | None = None,\n        field: Literal[\"type\", \"location\"] | None = None,\n    ) -&gt; list[StandardFile | ChallengeFile | PageFile]:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        List all files with optional filtering.\n\n        Parameters\n        ----------\n        type: FileType | None\n            The type of file to filter by, defaults to None.\n        location: str | None\n            The location of the file to filter by, defaults to None.\n        q: str | None\n            The query string to search for, defaults to None.\n        field: Literal[\"type\", \"location\"] | None\n            The field to search in, defaults to None.\n\n        Returns\n        -------\n        list[StandardFile | ChallengeFile | PageFile]\n            A list of files that match the query.\n\n        Raises\n        ------\n        ValueError\n            If q and field are both provided or both not provided.\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n\n        Examples\n        --------\n        Get all files:\n\n        ```python\n        files = await ctfd.files.async_list()\n        ```\n\n        Get all challenge files:\n\n        ```python\n        files = await ctfd.files.async_list(type=FileType.CHALLENGE)\n        ```\n        \"\"\"\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if type is not None:\n            params[\"type\"] = type.value\n        if location is not None:\n            params[\"location\"] = location\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return await self._client.arequest(\n            \"GET\",\n            \"/api/v1/files\",\n            params=params,\n            response_model=list_file_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @overload\n    def create(\n        self, *, payload: CreateFilePayload\n    ) -&gt; list[StandardFile | ChallengeFile | PageFile]: ...\n\n    @overload\n    async def async_create(\n        self, *, payload: CreateFilePayload\n    ) -&gt; list[StandardFile | ChallengeFile | PageFile]: ...\n\n    @overload\n    def create(\n        self,\n        *,\n        files: list[MultipartFileTypes] | None = None,\n        file_paths: list[str | os.PathLike] | None = None,\n        type: FileType = FileType.STANDARD,\n        challenge_id: int | None = None,\n        challenge: int | None = None,\n        page_id: int | None = None,\n        page: int | None = None,\n        location: str | None = None,\n    ) -&gt; list[StandardFile | ChallengeFile | PageFile]: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        files: list[MultipartFileTypes] | None = None,\n        file_paths: list[str | os.PathLike] | None = None,\n        type: FileType = FileType.STANDARD,\n        challenge_id: int | None = None,\n        challenge: int | None = None,\n        page_id: int | None = None,\n        page: int | None = None,\n        location: str | None = None,\n    ) -&gt; list[StandardFile | ChallengeFile | PageFile]: ...\n\n    @admin_only\n    def create(\n        self,\n        *,\n        payload: CreateFilePayload = MISSING,\n        files: list[MultipartFileTypes] | None = None,\n        file_paths: list[str | os.PathLike] | None = None,\n        type: FileType | None = None,\n        challenge_id: int | None = None,\n        challenge: int | None = None,\n        page_id: int | None = None,\n        page: int | None = None,\n        location: str | None = None,\n    ) -&gt; list[StandardFile | ChallengeFile | PageFile]:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Create a new file.\n\n        Parameters\n        ----------\n        payload: CreateFilePayload\n            The payload to create the file with. If this is provided, no other parameter should be provided.\n        files: list[MultipartFileTypes] | None\n            The files to upload. This can either be a `#!python FileContent` or a tuple of length between 2 and 4\n            in the format `(filename, file, content_type, headers)`. Defaults to None.\n        file_paths: list[str | os.PathLike] | None\n            The paths to the files to upload. Defaults to None.\n        type: FileType | None\n            The type of the file, defaults to None.\n        challenge_id: int | None\n            The ID of the challenge to associate the file with, defaults to None.\n        page_id: int | None\n            The ID of the page to associate the file with, defaults to None.\n        location: str | None\n            The location on the server to upload the files to, defaults to None.\n\n        Returns\n        -------\n        list[StandardFile | ChallengeFile | PageFile]\n            The files that were created.\n\n        Raises\n        ------\n        ValueError\n            If no files are provided.\n        FileNotFoundError\n            If a file path does not exist.\n        ModelValidationError\n            If the payload is invalid.\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n\n        Examples\n        --------\n        Create a file for a challenge:\n\n        ```python\n        files = ctfd.files.create(\n            files=[(\"filename.txt\", open(\"/path/to/file.txt\", \"rb\"))],\n            type=FileType.CHALLENGE,\n            challenge_id=1,\n        )\n        ```\n        \"\"\"\n        if payload is MISSING:\n            files = files or []\n\n            if file_paths is not None:\n                for file_path in file_paths:\n                    file_path = Path(file_path)\n                    if not file_path.exists():\n                        raise FileNotFoundError(f\"File not found: {file_path}\")\n                    files.append((file_path.name, file_path.open(\"rb\")))\n\n            if len(files) == 0:\n                raise ValueError(\"At least one file must be provided\")\n\n            try:\n                payload = CreateFilePayload(\n                    files=files,\n                    type=type,\n                    challenge_id=challenge_id or challenge,\n                    page_id=page_id or page,\n                    location=location,\n                )\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return self._client.request(\n            \"POST\",\n            \"/api/v1/files\",\n            files=payload.dump_json(),\n            response_model=list_file_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_create(\n        self,\n        *,\n        payload: CreateFilePayload = MISSING,\n        files: list[MultipartFileTypes] | None = None,\n        file_paths: list[str | os.PathLike] | None = None,\n        type: FileType | None = None,\n        challenge_id: int | None = None,\n        challenge: int | None = None,\n        page_id: int | None = None,\n        page: int | None = None,\n        location: str | None = None,\n    ) -&gt; list[StandardFile | ChallengeFile | PageFile]:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Create a new file.\n\n        Parameters\n        ----------\n        payload: CreateFilePayload\n            The payload to create the file with. If this is provided, no other parameter should be provided.\n        files: list[MultipartFileTypes] | None\n            The files to upload. This can either be a `#!python FileContent` or a tuple of length between 2 and 4\n            in the format `(filename, file, content_type, headers)`. Defaults to None.\n        file_paths: list[str | os.PathLike] | None\n            The paths to the files to upload. Defaults to None.\n        type: FileType | None\n            The type of the file, defaults to None.\n        challenge_id: int | None\n            The ID of the challenge to associate the file with, defaults to None.\n        page_id: int | None\n            The ID of the page to associate the file with, defaults to None.\n        location: str | None\n            The location on the server to upload the files to, defaults to None.\n\n        Returns\n        -------\n        list[StandardFile | ChallengeFile | PageFile]\n            The files that were created.\n\n        Raises\n        ------\n        ValueError\n            If no files are provided.\n        FileNotFoundError\n            If a file path does not exist.\n        ModelValidationError\n            If the payload is invalid.\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n\n        Examples\n        --------\n        Create a file for a challenge:\n\n        ```python\n        files = await ctfd.files.async_create(\n            files=[(\"filename.txt\", open(\"/path/to/file.txt\", \"rb\"))],\n            type=FileType.CHALLENGE,\n            challenge_id=1,\n        )\n        ```\n        \"\"\"\n        if payload is MISSING:\n            files = files or []\n\n            if file_paths is not None:\n                for file_path in file_paths:\n                    file_path = Path(file_path)\n                    if not file_path.exists():\n                        raise FileNotFoundError(f\"File not found: {file_path}\")\n                    files.append((file_path.name, file_path.open(\"rb\")))\n\n            if len(files) == 0:\n                raise ValueError(\"At least one file must be provided\")\n\n            try:\n                payload = CreateFilePayload(\n                    files=files,\n                    type=type,\n                    challenge_id=challenge_id or challenge,\n                    page_id=page_id or page,\n                    location=location,\n                )\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return await self._client.arequest(\n            \"POST\",\n            \"/api/v1/files\",\n            files=payload.dump_json(),\n            response_model=list_file_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get(self, file_id: int) -&gt; StandardFile | ChallengeFile | PageFile:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Get a file by its ID.\n\n        Parameters\n        ----------\n        file_id: int\n            The ID of the file to get.\n\n        Returns\n        -------\n        StandardFile | ChallengeFile | PageFile\n            The file with the provided ID.\n\n        Raises\n        ------\n        BadRequest\n            An error occurred processing the provided or stored data.\n        NotFound\n            The file with the provided ID does not exist.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n\n        Examples\n        --------\n        Get a file by its ID:\n\n        ```python\n        file = ctfd.files.get(1)\n        ```\n        \"\"\"\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/files/{file_id}\",\n            response_model=file_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_get(self, file_id: int) -&gt; StandardFile | ChallengeFile | PageFile:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Get a file by its ID.\n\n        Parameters\n        ----------\n        file_id: int\n            The ID of the file to get.\n\n        Returns\n        -------\n        StandardFile | ChallengeFile | PageFile\n            The file with the provided ID.\n\n        Raises\n        ------\n        BadRequest\n            An error occurred processing the provided or stored data.\n        NotFound\n            The file with the provided ID does not exist.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n\n        Examples\n        --------\n        Get a file by its ID:\n\n        ```python\n        file = await ctfd.files.async_get(1)\n        ```\n        \"\"\"\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/files/{file_id}\",\n            response_model=file_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    def delete(self, file_id: int) -&gt; bool:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Delete a file by its ID.\n\n        Parameters\n        ----------\n        file_id: int\n            The ID of the file to delete.\n\n        Returns\n        -------\n        bool\n            `#!python True` if the file was successfully deleted.\n\n        Raises\n        ------\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        NotFound\n            The file with the provided ID does not exist.\n\n        Examples\n        --------\n        Delete a file by its ID:\n\n        ```python\n        success = ctfd.files.delete(1)\n        ```\n        \"\"\"\n        return self._client.request(\n            \"DELETE\",\n            f\"/api/v1/files/{file_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_delete(self, file_id: int) -&gt; bool:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Delete a file by its ID.\n\n        Parameters\n        ----------\n        file_id: int\n            The ID of the file to delete.\n\n        Returns\n        -------\n        bool\n            `#!python True` if the file was successfully deleted.\n\n        Raises\n        ------\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        NotFound\n            The file with the provided ID does not exist.\n\n        Examples\n        --------\n        Delete a file by its ID:\n\n        ```python\n        success = await ctfd.files.async_delete(1)\n        ```\n        \"\"\"\n        return await self._client.arequest(\n            \"DELETE\",\n            f\"/api/v1/files/{file_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n</code></pre>"},{"location":"ctfdpy/api/files/#ctfdpy.api.files.FilesAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    type: FileType | None = None,\n    location: str | None = None,\n    q: str | None = None,\n    field: Literal[\"type\", \"location\"] | None = None\n) -&gt; list[StandardFile | ChallengeFile | PageFile]\n</code></pre> <p>This method is only available to admins</p> <p>List all files with optional filtering.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>FileType | None</code> <p>The type of file to filter by, defaults to None.</p> <code>None</code> <code>location</code> <code>str | None</code> <p>The location of the file to filter by, defaults to None.</p> <code>None</code> <code>q</code> <code>str | None</code> <p>The query string to search for, defaults to None.</p> <code>None</code> <code>field</code> <code>Literal['type', 'location'] | None</code> <p>The field to search in, defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StandardFile | ChallengeFile | PageFile]</code> <p>A list of files that match the query.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If q and field are not provided together.</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <p>Examples:</p> <p>Get all files:</p> <pre><code>files = ctfd.files.list()\n</code></pre> <p>Get all challenge files:</p> <pre><code>files = ctfd.files.list(type=FileType.CHALLENGE)\n</code></pre> Source code in <code>ctfdpy\\api\\files.py</code> <pre><code>@admin_only\ndef list(\n    self,\n    *,\n    type: FileType | None = None,\n    location: str | None = None,\n    q: str | None = None,\n    field: Literal[\"type\", \"location\"] | None = None,\n) -&gt; list[StandardFile | ChallengeFile | PageFile]:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    List all files with optional filtering.\n\n    Parameters\n    ----------\n    type: FileType | None\n        The type of file to filter by, defaults to None.\n    location: str | None\n        The location of the file to filter by, defaults to None.\n    q: str | None\n        The query string to search for, defaults to None.\n    field: Literal[\"type\", \"location\"] | None\n        The field to search in, defaults to None.\n\n    Returns\n    -------\n    list[StandardFile | ChallengeFile | PageFile]\n        A list of files that match the query.\n\n    Raises\n    ------\n    ValueError\n        If q and field are not provided together.\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n\n    Examples\n    --------\n    Get all files:\n\n    ```python\n    files = ctfd.files.list()\n    ```\n\n    Get all challenge files:\n\n    ```python\n    files = ctfd.files.list(type=FileType.CHALLENGE)\n    ```\n    \"\"\"\n    # Check if q and field are both provided or both not provided\n    if q is None != field is None:\n        raise ValueError(\"q and field must be provided together\")\n\n    params = {}\n    if type is not None:\n        params[\"type\"] = type.value\n    if location is not None:\n        params[\"location\"] = location\n    if q is not None:\n        params[\"q\"] = q\n        params[\"field\"] = field\n\n    return self._client.request(\n        \"GET\",\n        \"/api/v1/files\",\n        params=params,\n        response_model=list_file_adapter,\n        error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n    )\n</code></pre>"},{"location":"ctfdpy/api/files/#ctfdpy.api.files.FilesAPI.async_list","title":"async_list  <code>async</code>","text":"<pre><code>async_list(\n    *,\n    type: FileType | None = None,\n    location: str | None = None,\n    q: str | None = None,\n    field: Literal[\"type\", \"location\"] | None = None\n) -&gt; list[StandardFile | ChallengeFile | PageFile]\n</code></pre> <p>This method is only available to admins</p> <p>List all files with optional filtering.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>FileType | None</code> <p>The type of file to filter by, defaults to None.</p> <code>None</code> <code>location</code> <code>str | None</code> <p>The location of the file to filter by, defaults to None.</p> <code>None</code> <code>q</code> <code>str | None</code> <p>The query string to search for, defaults to None.</p> <code>None</code> <code>field</code> <code>Literal['type', 'location'] | None</code> <p>The field to search in, defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StandardFile | ChallengeFile | PageFile]</code> <p>A list of files that match the query.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If q and field are both provided or both not provided.</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <p>Examples:</p> <p>Get all files:</p> <pre><code>files = await ctfd.files.async_list()\n</code></pre> <p>Get all challenge files:</p> <pre><code>files = await ctfd.files.async_list(type=FileType.CHALLENGE)\n</code></pre> Source code in <code>ctfdpy\\api\\files.py</code> <pre><code>@admin_only\nasync def async_list(\n    self,\n    *,\n    type: FileType | None = None,\n    location: str | None = None,\n    q: str | None = None,\n    field: Literal[\"type\", \"location\"] | None = None,\n) -&gt; list[StandardFile | ChallengeFile | PageFile]:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    List all files with optional filtering.\n\n    Parameters\n    ----------\n    type: FileType | None\n        The type of file to filter by, defaults to None.\n    location: str | None\n        The location of the file to filter by, defaults to None.\n    q: str | None\n        The query string to search for, defaults to None.\n    field: Literal[\"type\", \"location\"] | None\n        The field to search in, defaults to None.\n\n    Returns\n    -------\n    list[StandardFile | ChallengeFile | PageFile]\n        A list of files that match the query.\n\n    Raises\n    ------\n    ValueError\n        If q and field are both provided or both not provided.\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n\n    Examples\n    --------\n    Get all files:\n\n    ```python\n    files = await ctfd.files.async_list()\n    ```\n\n    Get all challenge files:\n\n    ```python\n    files = await ctfd.files.async_list(type=FileType.CHALLENGE)\n    ```\n    \"\"\"\n    # Check if q and field are both provided or both not provided\n    if q is None != field is None:\n        raise ValueError(\"q and field must be provided together\")\n\n    params = {}\n    if type is not None:\n        params[\"type\"] = type.value\n    if location is not None:\n        params[\"location\"] = location\n    if q is not None:\n        params[\"q\"] = q\n        params[\"field\"] = field\n\n    return await self._client.arequest(\n        \"GET\",\n        \"/api/v1/files\",\n        params=params,\n        response_model=list_file_adapter,\n        error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n    )\n</code></pre>"},{"location":"ctfdpy/api/files/#ctfdpy.api.files.FilesAPI.create","title":"create","text":"<pre><code>create(\n    *,\n    payload: CreateFilePayload = MISSING,\n    files: list[MultipartFileTypes] | None = None,\n    file_paths: list[str | PathLike] | None = None,\n    type: FileType | None = None,\n    challenge_id: int | None = None,\n    challenge: int | None = None,\n    page_id: int | None = None,\n    page: int | None = None,\n    location: str | None = None\n) -&gt; list[StandardFile | ChallengeFile | PageFile]\n</code></pre> <p>This method is only available to admins</p> <p>Create a new file.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>CreateFilePayload</code> <p>The payload to create the file with. If this is provided, no other parameter should be provided.</p> <code>MISSING</code> <code>files</code> <code>list[MultipartFileTypes] | None</code> <p>The files to upload. This can either be a <code>FileContent</code> or a tuple of length between 2 and 4 in the format <code>(filename, file, content_type, headers)</code>. Defaults to None.</p> <code>None</code> <code>file_paths</code> <code>list[str | PathLike] | None</code> <p>The paths to the files to upload. Defaults to None.</p> <code>None</code> <code>type</code> <code>FileType | None</code> <p>The type of the file, defaults to None.</p> <code>None</code> <code>challenge_id</code> <code>int | None</code> <p>The ID of the challenge to associate the file with, defaults to None.</p> <code>None</code> <code>page_id</code> <code>int | None</code> <p>The ID of the page to associate the file with, defaults to None.</p> <code>None</code> <code>location</code> <code>str | None</code> <p>The location on the server to upload the files to, defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StandardFile | ChallengeFile | PageFile]</code> <p>The files that were created.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no files are provided.</p> <code>FileNotFoundError</code> <p>If a file path does not exist.</p> <code>ModelValidationError</code> <p>If the payload is invalid.</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <p>Examples:</p> <p>Create a file for a challenge:</p> <pre><code>files = ctfd.files.create(\n    files=[(\"filename.txt\", open(\"/path/to/file.txt\", \"rb\"))],\n    type=FileType.CHALLENGE,\n    challenge_id=1,\n)\n</code></pre> Source code in <code>ctfdpy\\api\\files.py</code> <pre><code>@admin_only\ndef create(\n    self,\n    *,\n    payload: CreateFilePayload = MISSING,\n    files: list[MultipartFileTypes] | None = None,\n    file_paths: list[str | os.PathLike] | None = None,\n    type: FileType | None = None,\n    challenge_id: int | None = None,\n    challenge: int | None = None,\n    page_id: int | None = None,\n    page: int | None = None,\n    location: str | None = None,\n) -&gt; list[StandardFile | ChallengeFile | PageFile]:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Create a new file.\n\n    Parameters\n    ----------\n    payload: CreateFilePayload\n        The payload to create the file with. If this is provided, no other parameter should be provided.\n    files: list[MultipartFileTypes] | None\n        The files to upload. This can either be a `#!python FileContent` or a tuple of length between 2 and 4\n        in the format `(filename, file, content_type, headers)`. Defaults to None.\n    file_paths: list[str | os.PathLike] | None\n        The paths to the files to upload. Defaults to None.\n    type: FileType | None\n        The type of the file, defaults to None.\n    challenge_id: int | None\n        The ID of the challenge to associate the file with, defaults to None.\n    page_id: int | None\n        The ID of the page to associate the file with, defaults to None.\n    location: str | None\n        The location on the server to upload the files to, defaults to None.\n\n    Returns\n    -------\n    list[StandardFile | ChallengeFile | PageFile]\n        The files that were created.\n\n    Raises\n    ------\n    ValueError\n        If no files are provided.\n    FileNotFoundError\n        If a file path does not exist.\n    ModelValidationError\n        If the payload is invalid.\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n\n    Examples\n    --------\n    Create a file for a challenge:\n\n    ```python\n    files = ctfd.files.create(\n        files=[(\"filename.txt\", open(\"/path/to/file.txt\", \"rb\"))],\n        type=FileType.CHALLENGE,\n        challenge_id=1,\n    )\n    ```\n    \"\"\"\n    if payload is MISSING:\n        files = files or []\n\n        if file_paths is not None:\n            for file_path in file_paths:\n                file_path = Path(file_path)\n                if not file_path.exists():\n                    raise FileNotFoundError(f\"File not found: {file_path}\")\n                files.append((file_path.name, file_path.open(\"rb\")))\n\n        if len(files) == 0:\n            raise ValueError(\"At least one file must be provided\")\n\n        try:\n            payload = CreateFilePayload(\n                files=files,\n                type=type,\n                challenge_id=challenge_id or challenge,\n                page_id=page_id or page,\n                location=location,\n            )\n        except ValidationError as e:\n            raise ModelValidationError(e.errors()) from e\n\n    return self._client.request(\n        \"POST\",\n        \"/api/v1/files\",\n        files=payload.dump_json(),\n        response_model=list_file_adapter,\n        error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n    )\n</code></pre>"},{"location":"ctfdpy/api/files/#ctfdpy.api.files.FilesAPI.async_create","title":"async_create  <code>async</code>","text":"<pre><code>async_create(\n    *,\n    payload: CreateFilePayload = MISSING,\n    files: list[MultipartFileTypes] | None = None,\n    file_paths: list[str | PathLike] | None = None,\n    type: FileType | None = None,\n    challenge_id: int | None = None,\n    challenge: int | None = None,\n    page_id: int | None = None,\n    page: int | None = None,\n    location: str | None = None\n) -&gt; list[StandardFile | ChallengeFile | PageFile]\n</code></pre> <p>This method is only available to admins</p> <p>Create a new file.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>CreateFilePayload</code> <p>The payload to create the file with. If this is provided, no other parameter should be provided.</p> <code>MISSING</code> <code>files</code> <code>list[MultipartFileTypes] | None</code> <p>The files to upload. This can either be a <code>FileContent</code> or a tuple of length between 2 and 4 in the format <code>(filename, file, content_type, headers)</code>. Defaults to None.</p> <code>None</code> <code>file_paths</code> <code>list[str | PathLike] | None</code> <p>The paths to the files to upload. Defaults to None.</p> <code>None</code> <code>type</code> <code>FileType | None</code> <p>The type of the file, defaults to None.</p> <code>None</code> <code>challenge_id</code> <code>int | None</code> <p>The ID of the challenge to associate the file with, defaults to None.</p> <code>None</code> <code>page_id</code> <code>int | None</code> <p>The ID of the page to associate the file with, defaults to None.</p> <code>None</code> <code>location</code> <code>str | None</code> <p>The location on the server to upload the files to, defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StandardFile | ChallengeFile | PageFile]</code> <p>The files that were created.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no files are provided.</p> <code>FileNotFoundError</code> <p>If a file path does not exist.</p> <code>ModelValidationError</code> <p>If the payload is invalid.</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <p>Examples:</p> <p>Create a file for a challenge:</p> <pre><code>files = await ctfd.files.async_create(\n    files=[(\"filename.txt\", open(\"/path/to/file.txt\", \"rb\"))],\n    type=FileType.CHALLENGE,\n    challenge_id=1,\n)\n</code></pre> Source code in <code>ctfdpy\\api\\files.py</code> <pre><code>@admin_only\nasync def async_create(\n    self,\n    *,\n    payload: CreateFilePayload = MISSING,\n    files: list[MultipartFileTypes] | None = None,\n    file_paths: list[str | os.PathLike] | None = None,\n    type: FileType | None = None,\n    challenge_id: int | None = None,\n    challenge: int | None = None,\n    page_id: int | None = None,\n    page: int | None = None,\n    location: str | None = None,\n) -&gt; list[StandardFile | ChallengeFile | PageFile]:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Create a new file.\n\n    Parameters\n    ----------\n    payload: CreateFilePayload\n        The payload to create the file with. If this is provided, no other parameter should be provided.\n    files: list[MultipartFileTypes] | None\n        The files to upload. This can either be a `#!python FileContent` or a tuple of length between 2 and 4\n        in the format `(filename, file, content_type, headers)`. Defaults to None.\n    file_paths: list[str | os.PathLike] | None\n        The paths to the files to upload. Defaults to None.\n    type: FileType | None\n        The type of the file, defaults to None.\n    challenge_id: int | None\n        The ID of the challenge to associate the file with, defaults to None.\n    page_id: int | None\n        The ID of the page to associate the file with, defaults to None.\n    location: str | None\n        The location on the server to upload the files to, defaults to None.\n\n    Returns\n    -------\n    list[StandardFile | ChallengeFile | PageFile]\n        The files that were created.\n\n    Raises\n    ------\n    ValueError\n        If no files are provided.\n    FileNotFoundError\n        If a file path does not exist.\n    ModelValidationError\n        If the payload is invalid.\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n\n    Examples\n    --------\n    Create a file for a challenge:\n\n    ```python\n    files = await ctfd.files.async_create(\n        files=[(\"filename.txt\", open(\"/path/to/file.txt\", \"rb\"))],\n        type=FileType.CHALLENGE,\n        challenge_id=1,\n    )\n    ```\n    \"\"\"\n    if payload is MISSING:\n        files = files or []\n\n        if file_paths is not None:\n            for file_path in file_paths:\n                file_path = Path(file_path)\n                if not file_path.exists():\n                    raise FileNotFoundError(f\"File not found: {file_path}\")\n                files.append((file_path.name, file_path.open(\"rb\")))\n\n        if len(files) == 0:\n            raise ValueError(\"At least one file must be provided\")\n\n        try:\n            payload = CreateFilePayload(\n                files=files,\n                type=type,\n                challenge_id=challenge_id or challenge,\n                page_id=page_id or page,\n                location=location,\n            )\n        except ValidationError as e:\n            raise ModelValidationError(e.errors()) from e\n\n    return await self._client.arequest(\n        \"POST\",\n        \"/api/v1/files\",\n        files=payload.dump_json(),\n        response_model=list_file_adapter,\n        error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n    )\n</code></pre>"},{"location":"ctfdpy/api/files/#ctfdpy.api.files.FilesAPI.get","title":"get","text":"<pre><code>get(\n    file_id: int,\n) -&gt; StandardFile | ChallengeFile | PageFile\n</code></pre> <p>This method is only available to admins</p> <p>Get a file by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The ID of the file to get.</p> required <p>Returns:</p> Type Description <code>StandardFile | ChallengeFile | PageFile</code> <p>The file with the provided ID.</p> <p>Raises:</p> Type Description <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>NotFound</code> <p>The file with the provided ID does not exist.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <p>Examples:</p> <p>Get a file by its ID:</p> <pre><code>file = ctfd.files.get(1)\n</code></pre> Source code in <code>ctfdpy\\api\\files.py</code> <pre><code>@admin_only\ndef get(self, file_id: int) -&gt; StandardFile | ChallengeFile | PageFile:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Get a file by its ID.\n\n    Parameters\n    ----------\n    file_id: int\n        The ID of the file to get.\n\n    Returns\n    -------\n    StandardFile | ChallengeFile | PageFile\n        The file with the provided ID.\n\n    Raises\n    ------\n    BadRequest\n        An error occurred processing the provided or stored data.\n    NotFound\n        The file with the provided ID does not exist.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n\n    Examples\n    --------\n    Get a file by its ID:\n\n    ```python\n    file = ctfd.files.get(1)\n    ```\n    \"\"\"\n    return self._client.request(\n        \"GET\",\n        f\"/api/v1/files/{file_id}\",\n        response_model=file_adapter,\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/files/#ctfdpy.api.files.FilesAPI.async_get","title":"async_get  <code>async</code>","text":"<pre><code>async_get(\n    file_id: int,\n) -&gt; StandardFile | ChallengeFile | PageFile\n</code></pre> <p>This method is only available to admins</p> <p>Get a file by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The ID of the file to get.</p> required <p>Returns:</p> Type Description <code>StandardFile | ChallengeFile | PageFile</code> <p>The file with the provided ID.</p> <p>Raises:</p> Type Description <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>NotFound</code> <p>The file with the provided ID does not exist.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <p>Examples:</p> <p>Get a file by its ID:</p> <pre><code>file = await ctfd.files.async_get(1)\n</code></pre> Source code in <code>ctfdpy\\api\\files.py</code> <pre><code>@admin_only\nasync def async_get(self, file_id: int) -&gt; StandardFile | ChallengeFile | PageFile:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Get a file by its ID.\n\n    Parameters\n    ----------\n    file_id: int\n        The ID of the file to get.\n\n    Returns\n    -------\n    StandardFile | ChallengeFile | PageFile\n        The file with the provided ID.\n\n    Raises\n    ------\n    BadRequest\n        An error occurred processing the provided or stored data.\n    NotFound\n        The file with the provided ID does not exist.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n\n    Examples\n    --------\n    Get a file by its ID:\n\n    ```python\n    file = await ctfd.files.async_get(1)\n    ```\n    \"\"\"\n    return await self._client.arequest(\n        \"GET\",\n        f\"/api/v1/files/{file_id}\",\n        response_model=file_adapter,\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/files/#ctfdpy.api.files.FilesAPI.delete","title":"delete","text":"<pre><code>delete(file_id: int) -&gt; bool\n</code></pre> <p>This method is only available to admins</p> <p>Delete a file by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The ID of the file to delete.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the file was successfully deleted.</p> <p>Raises:</p> Type Description <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <code>NotFound</code> <p>The file with the provided ID does not exist.</p> <p>Examples:</p> <p>Delete a file by its ID:</p> <pre><code>success = ctfd.files.delete(1)\n</code></pre> Source code in <code>ctfdpy\\api\\files.py</code> <pre><code>@admin_only\ndef delete(self, file_id: int) -&gt; bool:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Delete a file by its ID.\n\n    Parameters\n    ----------\n    file_id: int\n        The ID of the file to delete.\n\n    Returns\n    -------\n    bool\n        `#!python True` if the file was successfully deleted.\n\n    Raises\n    ------\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    NotFound\n        The file with the provided ID does not exist.\n\n    Examples\n    --------\n    Delete a file by its ID:\n\n    ```python\n    success = ctfd.files.delete(1)\n    ```\n    \"\"\"\n    return self._client.request(\n        \"DELETE\",\n        f\"/api/v1/files/{file_id}\",\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/files/#ctfdpy.api.files.FilesAPI.async_delete","title":"async_delete  <code>async</code>","text":"<pre><code>async_delete(file_id: int) -&gt; bool\n</code></pre> <p>This method is only available to admins</p> <p>Delete a file by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The ID of the file to delete.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the file was successfully deleted.</p> <p>Raises:</p> Type Description <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <code>NotFound</code> <p>The file with the provided ID does not exist.</p> <p>Examples:</p> <p>Delete a file by its ID:</p> <pre><code>success = await ctfd.files.async_delete(1)\n</code></pre> Source code in <code>ctfdpy\\api\\files.py</code> <pre><code>@admin_only\nasync def async_delete(self, file_id: int) -&gt; bool:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Delete a file by its ID.\n\n    Parameters\n    ----------\n    file_id: int\n        The ID of the file to delete.\n\n    Returns\n    -------\n    bool\n        `#!python True` if the file was successfully deleted.\n\n    Raises\n    ------\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    NotFound\n        The file with the provided ID does not exist.\n\n    Examples\n    --------\n    Delete a file by its ID:\n\n    ```python\n    success = await ctfd.files.async_delete(1)\n    ```\n    \"\"\"\n    return await self._client.arequest(\n        \"DELETE\",\n        f\"/api/v1/files/{file_id}\",\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/flags/","title":"Flags","text":""},{"location":"ctfdpy/api/flags/#ctfdpy.api.flags.FlagsAPI","title":"FlagsAPI","text":"<p>Interface for interacting with the <code>/api/v1/flags</code> CTFd API endpoint.</p> Source code in <code>ctfdpy\\api\\flags.py</code> <pre><code>class FlagsAPI:\n    \"\"\"\n    Interface for interacting with the `/api/v1/flags` CTFd API endpoint.\n    \"\"\"\n    def __init__(self, client: APIClient):\n        self._client = client\n\n    @admin_only\n    def list(\n        self,\n        *,\n        type: FlagType | None = None,\n        challenge_id: int | None = None,\n        content: str | None = None,\n        data: str | None = None,\n        q: str | None = None,\n        field: Literal[\"type\", \"content\", \"data\"] | None = None,\n    ) -&gt; list[Flag]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if type is not None:\n            params[\"type\"] = type.value\n        if challenge_id is not None:\n            params[\"challenge_id\"] = challenge_id\n        if content is not None:\n            params[\"content\"] = content\n        if data is not None:\n            params[\"data\"] = data\n\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/flags\",\n            params=params,\n            response_model=flag_list_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n            },\n        )\n\n    @admin_only\n    async def async_list(\n        self,\n        *,\n        type: FlagType | None = None,\n        challenge_id: int | None = None,\n        content: str | None = None,\n        data: str | None = None,\n        q: str | None = None,\n        field: Literal[\"type\", \"content\", \"data\"] | None = None,\n    ) -&gt; list[Flag]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if type is not None:\n            params[\"type\"] = type.value\n        if challenge_id is not None:\n            params[\"challenge_id\"] = challenge_id\n        if content is not None:\n            params[\"content\"] = content\n        if data is not None:\n            params[\"data\"] = data\n\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return await self._client.arequest(\n            \"GET\",\n            \"/api/v1/flags\",\n            params=params,\n            response_model=flag_list_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n            },\n        )\n\n    @overload\n    def create(self, *, payload: CreateFlagPayload) -&gt; Flag: ...\n\n    @overload\n    async def async_create(self, *, payload: CreateFlagPayload) -&gt; Flag: ...\n\n    @overload\n    def create(\n        self,\n        *,\n        challenge_id: int,\n        content: str,\n        type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n    ) -&gt; Flag: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        challenge_id: int,\n        content: str,\n        type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n    ) -&gt; Flag: ...\n\n    @admin_only\n    def create(\n        self,\n        *,\n        payload: CreateFlagPayload = MISSING,\n        challenge_id: int | None = None,\n        content: str | None = None,\n        type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n    ) -&gt; Flag:\n        if payload is MISSING:\n            data = \"case_insensitive\" if case_insensitive else \"\"\n            try:\n                payload = CreateFlagPayload(\n                    challenge_id=challenge_id,\n                    content=content,\n                    type=type,\n                    data=data,\n                )\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return self._client.request(\n            \"POST\",\n            \"/api/v1/flags\",\n            json=payload.dump_json(),\n            response_model=Flag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n            },\n        )\n\n    @admin_only\n    async def async_create(\n        self,\n        *,\n        payload: CreateFlagPayload = MISSING,\n        challenge_id: int | None = None,\n        content: str | None = None,\n        type: FlagType = FlagType.STATIC,\n        case_insensitive: bool = False,\n    ) -&gt; Flag:\n        if payload is MISSING:\n            data = \"case_insensitive\" if case_insensitive else \"\"\n            try:\n                payload = CreateFlagPayload(\n                    challenge_id=challenge_id,\n                    content=content,\n                    type=type,\n                    data=data,\n                )\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return await self._client.arequest(\n            \"POST\",\n            \"/api/v1/flags\",\n            json=payload.dump_json(),\n            response_model=Flag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n            },\n        )\n\n    @admin_only\n    def get_flag_types(self) -&gt; dict[str, FlagTypeInfo]:\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/flags/types\",\n            response_model=flag_type_info_dict_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_get_flag_types(self) -&gt; dict[str, FlagTypeInfo]:\n        return await self._client.arequest(\n            \"GET\",\n            \"/api/v1/flags/types\",\n            response_model=flag_type_info_dict_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get_flag_type(self, type: str) -&gt; FlagTypeInfo:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/flags/types/{type}\",\n            response_model=FlagTypeInfo,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                500: NotFound,  # it raises KeyError when the flag type does not exist\n            },\n        )\n\n    @admin_only\n    async def async_get_flag_type(self, type: str) -&gt; FlagTypeInfo:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/flags/types/{type}\",\n            response_model=FlagTypeInfo,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                500: NotFound,  # it raises KeyError when the flag type does not exist\n            },\n        )\n\n    @admin_only\n    def get(self, flag_id: int) -&gt; Flag:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/flags/{flag_id}\",\n            response_model=Flag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_get(self, flag_id: int) -&gt; Flag:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/flags/{flag_id}\",\n            response_model=Flag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @overload\n    def update(self, flag_id: int, *, payload: UpdateFlagPayload) -&gt; Flag: ...\n\n    @overload\n    async def async_update(\n        self, flag_id: int, *, payload: UpdateFlagPayload\n    ) -&gt; Flag: ...\n\n    @overload\n    def update(\n        self,\n        flag_id: int,\n        *,\n        challenge_id: int = MISSING,\n        content: str = MISSING,\n        type: FlagType = MISSING,\n        case_insensitive: bool = MISSING,\n    ) -&gt; Flag: ...\n\n    @overload\n    async def async_update(\n        self,\n        flag_id: int,\n        *,\n        challenge_id: int = MISSING,\n        content: str = MISSING,\n        type: FlagType = MISSING,\n        case_insensitive: bool = MISSING,\n    ) -&gt; Flag: ...\n\n    @admin_only\n    def update(\n        self,\n        flag_id: int,\n        *,\n        payload: UpdateFlagPayload = MISSING,\n        **kwargs,\n    ) -&gt; Flag:\n        if payload is MISSING:\n            case_insensitive = kwargs.pop(\"case_insensitive\", MISSING)\n            if case_insensitive is not MISSING:\n                kwargs[\"data\"] = \"case_insensitive\" if case_insensitive else \"\"\n            try:\n                payload = UpdateFlagPayload(**kwargs)\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return self._client.request(\n            \"PATCH\",\n            f\"/api/v1/flags/{flag_id}\",\n            json=payload.dump_json(),\n            response_model=Flag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_update(\n        self,\n        flag_id: int,\n        *,\n        payload: UpdateFlagPayload = MISSING,\n        **kwargs,\n    ) -&gt; Flag:\n        if payload is MISSING:\n            case_insensitive = kwargs.pop(\"case_insensitive\", MISSING)\n            if case_insensitive is not MISSING:\n                kwargs[\"data\"] = \"case_insensitive\" if case_insensitive else \"\"\n            try:\n                payload = UpdateFlagPayload(**kwargs)\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return await self._client.arequest(\n            \"PATCH\",\n            f\"/api/v1/flags/{flag_id}\",\n            json=payload.dump_json(),\n            response_model=Flag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    def delete(self, flag_id: int) -&gt; Literal[True]:\n        return self._client.request(\n            \"DELETE\",\n            f\"/api/v1/flags/{flag_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_delete(self, flag_id: int) -&gt; Literal[True]:\n        return await self._client.arequest(\n            \"DELETE\",\n            f\"/api/v1/flags/{flag_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n</code></pre>"},{"location":"ctfdpy/api/hints/","title":"Hints","text":""},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI","title":"HintsAPI","text":"<p>Interface for interacting with the <code>/api/v1/hints</code> CTFd API endpoint.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>class HintsAPI:\n    \"\"\"\n    Interface for interacting with the `/api/v1/hints` CTFd API endpoint.\n    \"\"\"\n\n    def __init__(self, client: APIClient):\n        self._client = client\n\n    @admin_only\n    def list(\n        self,\n        *,\n        type: HintType | None = None,\n        challenge_id: int | None = None,\n        content: str | None = None,\n        cost: int | None = None,\n        q: str | None = None,\n        field: Literal[\"type\", \"content\"] | None = None,\n    ) -&gt; list[LockedHint]:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        !!! warning \"This method returns limited information about hints\"\n\n        List all hints with optional filtering.\n\n        Parameters\n        ----------\n        type: HintType | None\n            The type of hint to filter by, defaults to None\n        challenge_id: int | None\n            The challenge ID to filter by, defaults to None\n        content: str | None\n            The content of the hint to filter by, defaults to None\n        cost: int | None\n            The cost of the hint to filter by, defaults to None\n        q: str | None\n            The query string to search for, defaults to None\n        field: Literal[\"type\", \"content\"] | None\n            The field to search in, defaults to None\n\n        Returns\n        -------\n        list[LockedHint]\n            A list of hints\n\n        Raises\n        ------\n        ValueError\n            If q and field are not provided together.\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        \"\"\"\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if type is not None:\n            params[\"type\"] = type.value\n        if challenge_id is not None:\n            params[\"challenge_id\"] = challenge_id\n        if content is not None:\n            params[\"content\"] = content\n        if cost is not None:\n            params[\"cost\"] = cost\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/hints\",\n            params=params,\n            response_model=locked_hint_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_list(\n        self,\n        *,\n        type: HintType | None = None,\n        challenge_id: int | None = None,\n        content: str | None = None,\n        cost: int | None = None,\n        q: str | None = None,\n        field: Literal[\"type\", \"content\"] | None = None,\n    ) -&gt; list[LockedHint]:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        !!! warning \"This method returns limited information about hints\"\n\n        List all hints with optional filtering.\n\n        Parameters\n        ----------\n        type: HintType | None\n            The type of hint to filter by, defaults to None\n        challenge_id: int | None\n            The challenge ID to filter by, defaults to None\n        content: str | None\n            The content of the hint to filter by, defaults to None\n        cost: int | None\n            The cost of the hint to filter by, defaults to None\n        q: str | None\n            The query string to search for, defaults to None\n        field: Literal[\"type\", \"content\"] | None\n            The field to search in, defaults to None\n\n        Returns\n        -------\n        list[LockedHint]\n            A list of hints\n\n        Raises\n        ------\n        ValueError\n            If q and field are not provided together.\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        \"\"\"\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if type is not None:\n            params[\"type\"] = type.value\n        if challenge_id is not None:\n            params[\"challenge_id\"] = challenge_id\n        if content is not None:\n            params[\"content\"] = content\n        if cost is not None:\n            params[\"cost\"] = cost\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return await self._client.arequest(\n            \"GET\",\n            \"/api/v1/hints\",\n            params=params,\n            response_model=locked_hint_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @overload\n    def create(self, *, payload: CreateHintPayload) -&gt; Hint: ...\n\n    @overload\n    async def async_create(self, *, payload: CreateHintPayload) -&gt; Hint: ...\n\n    @overload\n    def create(\n        self,\n        *,\n        challenge_id: int,\n        content: str,\n        cost: int,\n        type: HintType = HintType.STANDARD,\n        requirements: dict[str, str] | None = None,\n    ) -&gt; Hint: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        challenge_id: int,\n        content: str,\n        cost: int,\n        type: HintType = HintType.STANDARD,\n        requirements: dict[str, str] | None = None,\n    ) -&gt; Hint: ...\n\n    @admin_only\n    def create(\n        self,\n        *,\n        payload: CreateHintPayload = MISSING,\n        challenge_id: int | None = None,\n        content: str | None = None,\n        cost: int | None = None,\n        type: HintType = HintType.STANDARD,\n        requirements: dict[str, str] | None = None,\n    ) -&gt; Hint:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Create a new hint.\n\n        Parameters\n        ----------\n        payload: CreateHintPayload\n            The payload to create the hint with. If this is provided, no other parameters should be provided.\n        challenge_id: int | None\n            The challenge ID to create the hint for, defaults to None\n        content: str | None\n            The content of the hint, defaults to None\n        cost: int | None\n            The cost of the hint, defaults to None\n        type: HintType, default=HintType.STANDARD\n            The type of hint, defaults to HintType.STANDARD\n        requirements: dict[str, str] | None\n            The requirements to unlock the hint, defaults to None\n\n        Returns\n        -------\n        Hint\n            The created hint\n\n        Raises\n        ------\n        ModelValidationError\n            If the provided payload is invalid\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        \"\"\"\n        if payload is MISSING:\n            try:\n                payload = CreateHintPayload(\n                    challenge_id=challenge_id,\n                    content=content,\n                    cost=cost,\n                    type=type,\n                    requirements=requirements,\n                )\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return self._client.request(\n            \"POST\",\n            \"/api/v1/hints\",\n            json=payload.dump_json(),\n            response_model=Hint,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_create(\n        self,\n        *,\n        payload: CreateHintPayload = MISSING,\n        challenge_id: int | None = None,\n        content: str | None = None,\n        cost: int | None = None,\n        type: HintType = HintType.STANDARD,\n        requirements: dict[str, str] | None = None,\n    ) -&gt; Hint:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Create a new hint.\n\n        Parameters\n        ----------\n        payload: CreateHintPayload\n            The payload to create the hint with. If this is provided, no other parameters should be provided.\n        challenge_id: int | None\n            The challenge ID to create the hint for, defaults to None\n        content: str | None\n            The content of the hint, defaults to None\n        cost: int | None\n            The cost of the hint, defaults to None\n        type: HintType, default=HintType.STANDARD\n            The type of hint, defaults to HintType.STANDARD\n        requirements: dict[str, str] | None\n            The requirements to unlock the hint, defaults to None\n\n        Returns\n        -------\n        Hint\n            The created hint\n\n        Raises\n        ------\n        ModelValidationError\n            If the provided payload is invalid\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        \"\"\"\n        if payload is MISSING:\n            try:\n                payload = CreateHintPayload(\n                    challenge_id=challenge_id,\n                    content=content,\n                    cost=cost,\n                    type=type,\n                    requirements=requirements,\n                )\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return await self._client.arequest(\n            \"POST\",\n            \"/api/v1/hints\",\n            json=payload.dump_json(),\n            response_model=Hint,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get(self, hint_id: int) -&gt; Hint | LockedHint | UnlockedHint:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Get a hint by its ID.\n\n        Parameters\n        ----------\n        hint_id: int\n            The ID of the hint to get\n\n        Returns\n        -------\n        Hint | LockedHint | UnlockedHint\n            The hint\n\n        Raises\n        ------\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        NotFound\n            The hint with the provided ID does not exist.\n        \"\"\"\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/hints/{hint_id}\",\n            response_model=hint_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_get(self, hint_id: int) -&gt; Hint | LockedHint | UnlockedHint:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Get a hint by its ID.\n\n        Parameters\n        ----------\n        hint_id: int\n            The ID of the hint to get\n\n        Returns\n        -------\n        Hint | LockedHint | UnlockedHint\n            The hint\n\n        Raises\n        ------\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        NotFound\n            The hint with the provided ID does not exist.\n        \"\"\"\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/hints/{hint_id}\",\n            response_model=hint_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @overload\n    def update(self, hint_id: int, *, payload: UpdateHintPayload) -&gt; Hint: ...\n\n    @overload\n    async def async_update(\n        self, hint_id: int, *, payload: UpdateHintPayload\n    ) -&gt; Hint: ...\n\n    @overload\n    def update(\n        self,\n        hint_id: int,\n        *,\n        challenge_id: int = MISSING,\n        content: str = MISSING,\n        cost: int = MISSING,\n        type: HintType = MISSING,\n        requirements: dict[str, str] | None = None,\n    ) -&gt; Hint: ...\n\n    @overload\n    async def async_update(\n        self,\n        hint_id: int,\n        *,\n        challenge_id: int = MISSING,\n        content: str = MISSING,\n        cost: int = MISSING,\n        type: HintType = MISSING,\n        requirements: dict[str, str] | None = None,\n    ) -&gt; Hint: ...\n\n    @admin_only\n    def update(\n        self,\n        hint_id: int,\n        *,\n        payload: UpdateHintPayload = MISSING,\n        **kwargs,\n    ) -&gt; Hint:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Update a hint by its ID.\n\n        Parameters\n        ----------\n        hint_id: int\n            The ID of the hint to update\n        payload: UpdateHintPayload\n            The payload to update the hint with. If this is provided, no other parameters should be provided.\n        challenge_id: int\n            The challenge ID to update the hint for, defaults to None\n        content: str\n            The content of the hint, defaults to None\n        cost: int\n            The cost of the hint, defaults to None\n        type: HintType\n            The type of hint, defaults to None\n        requirements: dict[str, str] | None\n            The requirements to unlock the hint, defaults to None\n\n        Returns\n        -------\n        Hint\n            The updated hint\n\n        Raises\n        ------\n        ModelValidationError\n            If the provided payload is invalid\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        NotFound\n            The hint with the provided ID does not exist.\n        \"\"\"\n        if payload is MISSING:\n            try:\n                payload = UpdateHintPayload(**kwargs)\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return self._client.request(\n            \"PATCH\",\n            f\"/api/v1/hints/{hint_id}\",\n            json=payload.dump_json(),\n            response_model=Hint,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_update(\n        self,\n        hint_id: int,\n        *,\n        payload: UpdateHintPayload = MISSING,\n        **kwargs,\n    ) -&gt; Hint:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Update a hint by its ID.\n\n        Parameters\n        ----------\n        hint_id: int\n            The ID of the hint to update\n        payload: UpdateHintPayload\n            The payload to update the hint with. If this is provided, no other parameters should be provided.\n        challenge_id: int\n            The challenge ID to update the hint for, defaults to None\n        content: str\n            The content of the hint, defaults to None\n        cost: int\n            The cost of the hint, defaults to None\n        type: HintType\n            The type of hint, defaults to None\n        requirements: dict[str, str] | None\n            The requirements to unlock the hint, defaults to None\n\n        Returns\n        -------\n        Hint\n            The updated hint\n\n        Raises\n        ------\n        ModelValidationError\n            If the provided payload is invalid\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        NotFound\n            The hint with the provided ID does not exist.\n        \"\"\"\n        if payload is MISSING:\n            try:\n                payload = UpdateHintPayload(**kwargs)\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return await self._client.arequest(\n            \"PATCH\",\n            f\"/api/v1/hints/{hint_id}\",\n            json=payload.dump_json(),\n            response_model=Hint,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    def delete(self, hint_id: int) -&gt; bool:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Delete a hint by its ID.\n\n        Parameters\n        ----------\n        hint_id: int\n            The ID of the hint to delete\n\n        Returns\n        -------\n        bool\n            `#!python True` if the hint was successfully deleted.\n\n        Raises\n        ------\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        NotFound\n            The hint with the provided ID does not exist.\n        \"\"\"\n        return self._client.request(\n            \"DELETE\",\n            f\"/api/v1/hints/{hint_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_delete(self, hint_id: int) -&gt; bool:\n        \"\"\"\n        !!! note \"This method is only available to admins\"\n\n        Delete a hint by its ID.\n\n        Parameters\n        ----------\n        hint_id: int\n            The ID of the hint to delete\n\n        Returns\n        -------\n        bool\n            `#!python True` if the hint was successfully deleted.\n\n        Raises\n        ------\n        BadRequest\n            An error occurred processing the provided or stored data.\n        AuthenticationRequired\n            You must be logged in to access this resource.\n        AdminOnly\n            You must be an admin to access this resource.\n        NotFound\n            The hint with the provided ID does not exist.\n        \"\"\"\n        return await self._client.arequest(\n            \"DELETE\",\n            f\"/api/v1/hints/{hint_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    type: HintType | None = None,\n    challenge_id: int | None = None,\n    content: str | None = None,\n    cost: int | None = None,\n    q: str | None = None,\n    field: Literal[\"type\", \"content\"] | None = None\n) -&gt; list[LockedHint]\n</code></pre> <p>This method is only available to admins</p> <p>This method returns limited information about hints</p> <p>List all hints with optional filtering.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>HintType | None</code> <p>The type of hint to filter by, defaults to None</p> <code>None</code> <code>challenge_id</code> <code>int | None</code> <p>The challenge ID to filter by, defaults to None</p> <code>None</code> <code>content</code> <code>str | None</code> <p>The content of the hint to filter by, defaults to None</p> <code>None</code> <code>cost</code> <code>int | None</code> <p>The cost of the hint to filter by, defaults to None</p> <code>None</code> <code>q</code> <code>str | None</code> <p>The query string to search for, defaults to None</p> <code>None</code> <code>field</code> <code>Literal['type', 'content'] | None</code> <p>The field to search in, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[LockedHint]</code> <p>A list of hints</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If q and field are not provided together.</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\ndef list(\n    self,\n    *,\n    type: HintType | None = None,\n    challenge_id: int | None = None,\n    content: str | None = None,\n    cost: int | None = None,\n    q: str | None = None,\n    field: Literal[\"type\", \"content\"] | None = None,\n) -&gt; list[LockedHint]:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    !!! warning \"This method returns limited information about hints\"\n\n    List all hints with optional filtering.\n\n    Parameters\n    ----------\n    type: HintType | None\n        The type of hint to filter by, defaults to None\n    challenge_id: int | None\n        The challenge ID to filter by, defaults to None\n    content: str | None\n        The content of the hint to filter by, defaults to None\n    cost: int | None\n        The cost of the hint to filter by, defaults to None\n    q: str | None\n        The query string to search for, defaults to None\n    field: Literal[\"type\", \"content\"] | None\n        The field to search in, defaults to None\n\n    Returns\n    -------\n    list[LockedHint]\n        A list of hints\n\n    Raises\n    ------\n    ValueError\n        If q and field are not provided together.\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    \"\"\"\n    # Check if q and field are both provided or both not provided\n    if q is None != field is None:\n        raise ValueError(\"q and field must be provided together\")\n\n    params = {}\n    if type is not None:\n        params[\"type\"] = type.value\n    if challenge_id is not None:\n        params[\"challenge_id\"] = challenge_id\n    if content is not None:\n        params[\"content\"] = content\n    if cost is not None:\n        params[\"cost\"] = cost\n    if q is not None:\n        params[\"q\"] = q\n        params[\"field\"] = field\n\n    return self._client.request(\n        \"GET\",\n        \"/api/v1/hints\",\n        params=params,\n        response_model=locked_hint_list_adapter,\n        error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n    )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.async_list","title":"async_list  <code>async</code>","text":"<pre><code>async_list(\n    *,\n    type: HintType | None = None,\n    challenge_id: int | None = None,\n    content: str | None = None,\n    cost: int | None = None,\n    q: str | None = None,\n    field: Literal[\"type\", \"content\"] | None = None\n) -&gt; list[LockedHint]\n</code></pre> <p>This method is only available to admins</p> <p>This method returns limited information about hints</p> <p>List all hints with optional filtering.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>HintType | None</code> <p>The type of hint to filter by, defaults to None</p> <code>None</code> <code>challenge_id</code> <code>int | None</code> <p>The challenge ID to filter by, defaults to None</p> <code>None</code> <code>content</code> <code>str | None</code> <p>The content of the hint to filter by, defaults to None</p> <code>None</code> <code>cost</code> <code>int | None</code> <p>The cost of the hint to filter by, defaults to None</p> <code>None</code> <code>q</code> <code>str | None</code> <p>The query string to search for, defaults to None</p> <code>None</code> <code>field</code> <code>Literal['type', 'content'] | None</code> <p>The field to search in, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[LockedHint]</code> <p>A list of hints</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If q and field are not provided together.</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\nasync def async_list(\n    self,\n    *,\n    type: HintType | None = None,\n    challenge_id: int | None = None,\n    content: str | None = None,\n    cost: int | None = None,\n    q: str | None = None,\n    field: Literal[\"type\", \"content\"] | None = None,\n) -&gt; list[LockedHint]:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    !!! warning \"This method returns limited information about hints\"\n\n    List all hints with optional filtering.\n\n    Parameters\n    ----------\n    type: HintType | None\n        The type of hint to filter by, defaults to None\n    challenge_id: int | None\n        The challenge ID to filter by, defaults to None\n    content: str | None\n        The content of the hint to filter by, defaults to None\n    cost: int | None\n        The cost of the hint to filter by, defaults to None\n    q: str | None\n        The query string to search for, defaults to None\n    field: Literal[\"type\", \"content\"] | None\n        The field to search in, defaults to None\n\n    Returns\n    -------\n    list[LockedHint]\n        A list of hints\n\n    Raises\n    ------\n    ValueError\n        If q and field are not provided together.\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    \"\"\"\n    # Check if q and field are both provided or both not provided\n    if q is None != field is None:\n        raise ValueError(\"q and field must be provided together\")\n\n    params = {}\n    if type is not None:\n        params[\"type\"] = type.value\n    if challenge_id is not None:\n        params[\"challenge_id\"] = challenge_id\n    if content is not None:\n        params[\"content\"] = content\n    if cost is not None:\n        params[\"cost\"] = cost\n    if q is not None:\n        params[\"q\"] = q\n        params[\"field\"] = field\n\n    return await self._client.arequest(\n        \"GET\",\n        \"/api/v1/hints\",\n        params=params,\n        response_model=locked_hint_list_adapter,\n        error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n    )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.create","title":"create","text":"<pre><code>create(\n    *,\n    payload: CreateHintPayload = MISSING,\n    challenge_id: int | None = None,\n    content: str | None = None,\n    cost: int | None = None,\n    type: HintType = HintType.STANDARD,\n    requirements: dict[str, str] | None = None\n) -&gt; Hint\n</code></pre> <p>This method is only available to admins</p> <p>Create a new hint.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>CreateHintPayload</code> <p>The payload to create the hint with. If this is provided, no other parameters should be provided.</p> <code>MISSING</code> <code>challenge_id</code> <code>int | None</code> <p>The challenge ID to create the hint for, defaults to None</p> <code>None</code> <code>content</code> <code>str | None</code> <p>The content of the hint, defaults to None</p> <code>None</code> <code>cost</code> <code>int | None</code> <p>The cost of the hint, defaults to None</p> <code>None</code> <code>type</code> <code>HintType</code> <p>The type of hint, defaults to HintType.STANDARD</p> <code>STANDARD</code> <code>requirements</code> <code>dict[str, str] | None</code> <p>The requirements to unlock the hint, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>Hint</code> <p>The created hint</p> <p>Raises:</p> Type Description <code>ModelValidationError</code> <p>If the provided payload is invalid</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\ndef create(\n    self,\n    *,\n    payload: CreateHintPayload = MISSING,\n    challenge_id: int | None = None,\n    content: str | None = None,\n    cost: int | None = None,\n    type: HintType = HintType.STANDARD,\n    requirements: dict[str, str] | None = None,\n) -&gt; Hint:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Create a new hint.\n\n    Parameters\n    ----------\n    payload: CreateHintPayload\n        The payload to create the hint with. If this is provided, no other parameters should be provided.\n    challenge_id: int | None\n        The challenge ID to create the hint for, defaults to None\n    content: str | None\n        The content of the hint, defaults to None\n    cost: int | None\n        The cost of the hint, defaults to None\n    type: HintType, default=HintType.STANDARD\n        The type of hint, defaults to HintType.STANDARD\n    requirements: dict[str, str] | None\n        The requirements to unlock the hint, defaults to None\n\n    Returns\n    -------\n    Hint\n        The created hint\n\n    Raises\n    ------\n    ModelValidationError\n        If the provided payload is invalid\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    \"\"\"\n    if payload is MISSING:\n        try:\n            payload = CreateHintPayload(\n                challenge_id=challenge_id,\n                content=content,\n                cost=cost,\n                type=type,\n                requirements=requirements,\n            )\n        except ValidationError as e:\n            raise ModelValidationError(e.errors()) from e\n\n    return self._client.request(\n        \"POST\",\n        \"/api/v1/hints\",\n        json=payload.dump_json(),\n        response_model=Hint,\n        error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n    )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.async_create","title":"async_create  <code>async</code>","text":"<pre><code>async_create(\n    *,\n    payload: CreateHintPayload = MISSING,\n    challenge_id: int | None = None,\n    content: str | None = None,\n    cost: int | None = None,\n    type: HintType = HintType.STANDARD,\n    requirements: dict[str, str] | None = None\n) -&gt; Hint\n</code></pre> <p>This method is only available to admins</p> <p>Create a new hint.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>CreateHintPayload</code> <p>The payload to create the hint with. If this is provided, no other parameters should be provided.</p> <code>MISSING</code> <code>challenge_id</code> <code>int | None</code> <p>The challenge ID to create the hint for, defaults to None</p> <code>None</code> <code>content</code> <code>str | None</code> <p>The content of the hint, defaults to None</p> <code>None</code> <code>cost</code> <code>int | None</code> <p>The cost of the hint, defaults to None</p> <code>None</code> <code>type</code> <code>HintType</code> <p>The type of hint, defaults to HintType.STANDARD</p> <code>STANDARD</code> <code>requirements</code> <code>dict[str, str] | None</code> <p>The requirements to unlock the hint, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>Hint</code> <p>The created hint</p> <p>Raises:</p> Type Description <code>ModelValidationError</code> <p>If the provided payload is invalid</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\nasync def async_create(\n    self,\n    *,\n    payload: CreateHintPayload = MISSING,\n    challenge_id: int | None = None,\n    content: str | None = None,\n    cost: int | None = None,\n    type: HintType = HintType.STANDARD,\n    requirements: dict[str, str] | None = None,\n) -&gt; Hint:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Create a new hint.\n\n    Parameters\n    ----------\n    payload: CreateHintPayload\n        The payload to create the hint with. If this is provided, no other parameters should be provided.\n    challenge_id: int | None\n        The challenge ID to create the hint for, defaults to None\n    content: str | None\n        The content of the hint, defaults to None\n    cost: int | None\n        The cost of the hint, defaults to None\n    type: HintType, default=HintType.STANDARD\n        The type of hint, defaults to HintType.STANDARD\n    requirements: dict[str, str] | None\n        The requirements to unlock the hint, defaults to None\n\n    Returns\n    -------\n    Hint\n        The created hint\n\n    Raises\n    ------\n    ModelValidationError\n        If the provided payload is invalid\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    \"\"\"\n    if payload is MISSING:\n        try:\n            payload = CreateHintPayload(\n                challenge_id=challenge_id,\n                content=content,\n                cost=cost,\n                type=type,\n                requirements=requirements,\n            )\n        except ValidationError as e:\n            raise ModelValidationError(e.errors()) from e\n\n    return await self._client.arequest(\n        \"POST\",\n        \"/api/v1/hints\",\n        json=payload.dump_json(),\n        response_model=Hint,\n        error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n    )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.get","title":"get","text":"<pre><code>get(hint_id: int) -&gt; Hint | LockedHint | UnlockedHint\n</code></pre> <p>This method is only available to admins</p> <p>Get a hint by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>hint_id</code> <code>int</code> <p>The ID of the hint to get</p> required <p>Returns:</p> Type Description <code>Hint | LockedHint | UnlockedHint</code> <p>The hint</p> <p>Raises:</p> Type Description <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <code>NotFound</code> <p>The hint with the provided ID does not exist.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\ndef get(self, hint_id: int) -&gt; Hint | LockedHint | UnlockedHint:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Get a hint by its ID.\n\n    Parameters\n    ----------\n    hint_id: int\n        The ID of the hint to get\n\n    Returns\n    -------\n    Hint | LockedHint | UnlockedHint\n        The hint\n\n    Raises\n    ------\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    NotFound\n        The hint with the provided ID does not exist.\n    \"\"\"\n    return self._client.request(\n        \"GET\",\n        f\"/api/v1/hints/{hint_id}\",\n        response_model=hint_adapter,\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.async_get","title":"async_get  <code>async</code>","text":"<pre><code>async_get(hint_id: int) -&gt; Hint | LockedHint | UnlockedHint\n</code></pre> <p>This method is only available to admins</p> <p>Get a hint by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>hint_id</code> <code>int</code> <p>The ID of the hint to get</p> required <p>Returns:</p> Type Description <code>Hint | LockedHint | UnlockedHint</code> <p>The hint</p> <p>Raises:</p> Type Description <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <code>NotFound</code> <p>The hint with the provided ID does not exist.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\nasync def async_get(self, hint_id: int) -&gt; Hint | LockedHint | UnlockedHint:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Get a hint by its ID.\n\n    Parameters\n    ----------\n    hint_id: int\n        The ID of the hint to get\n\n    Returns\n    -------\n    Hint | LockedHint | UnlockedHint\n        The hint\n\n    Raises\n    ------\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    NotFound\n        The hint with the provided ID does not exist.\n    \"\"\"\n    return await self._client.arequest(\n        \"GET\",\n        f\"/api/v1/hints/{hint_id}\",\n        response_model=hint_adapter,\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.update","title":"update","text":"<pre><code>update(\n    hint_id: int,\n    *,\n    payload: UpdateHintPayload = MISSING,\n    **kwargs\n) -&gt; Hint\n</code></pre> <p>This method is only available to admins</p> <p>Update a hint by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>hint_id</code> <code>int</code> <p>The ID of the hint to update</p> required <code>payload</code> <code>UpdateHintPayload</code> <p>The payload to update the hint with. If this is provided, no other parameters should be provided.</p> <code>MISSING</code> <code>challenge_id</code> <p>The challenge ID to update the hint for, defaults to None</p> required <code>content</code> <p>The content of the hint, defaults to None</p> required <code>cost</code> <p>The cost of the hint, defaults to None</p> required <code>type</code> <p>The type of hint, defaults to None</p> required <code>requirements</code> <p>The requirements to unlock the hint, defaults to None</p> required <p>Returns:</p> Type Description <code>Hint</code> <p>The updated hint</p> <p>Raises:</p> Type Description <code>ModelValidationError</code> <p>If the provided payload is invalid</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <code>NotFound</code> <p>The hint with the provided ID does not exist.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\ndef update(\n    self,\n    hint_id: int,\n    *,\n    payload: UpdateHintPayload = MISSING,\n    **kwargs,\n) -&gt; Hint:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Update a hint by its ID.\n\n    Parameters\n    ----------\n    hint_id: int\n        The ID of the hint to update\n    payload: UpdateHintPayload\n        The payload to update the hint with. If this is provided, no other parameters should be provided.\n    challenge_id: int\n        The challenge ID to update the hint for, defaults to None\n    content: str\n        The content of the hint, defaults to None\n    cost: int\n        The cost of the hint, defaults to None\n    type: HintType\n        The type of hint, defaults to None\n    requirements: dict[str, str] | None\n        The requirements to unlock the hint, defaults to None\n\n    Returns\n    -------\n    Hint\n        The updated hint\n\n    Raises\n    ------\n    ModelValidationError\n        If the provided payload is invalid\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    NotFound\n        The hint with the provided ID does not exist.\n    \"\"\"\n    if payload is MISSING:\n        try:\n            payload = UpdateHintPayload(**kwargs)\n        except ValidationError as e:\n            raise ModelValidationError(e.errors()) from e\n\n    return self._client.request(\n        \"PATCH\",\n        f\"/api/v1/hints/{hint_id}\",\n        json=payload.dump_json(),\n        response_model=Hint,\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.async_update","title":"async_update  <code>async</code>","text":"<pre><code>async_update(\n    hint_id: int,\n    *,\n    payload: UpdateHintPayload = MISSING,\n    **kwargs\n) -&gt; Hint\n</code></pre> <p>This method is only available to admins</p> <p>Update a hint by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>hint_id</code> <code>int</code> <p>The ID of the hint to update</p> required <code>payload</code> <code>UpdateHintPayload</code> <p>The payload to update the hint with. If this is provided, no other parameters should be provided.</p> <code>MISSING</code> <code>challenge_id</code> <p>The challenge ID to update the hint for, defaults to None</p> required <code>content</code> <p>The content of the hint, defaults to None</p> required <code>cost</code> <p>The cost of the hint, defaults to None</p> required <code>type</code> <p>The type of hint, defaults to None</p> required <code>requirements</code> <p>The requirements to unlock the hint, defaults to None</p> required <p>Returns:</p> Type Description <code>Hint</code> <p>The updated hint</p> <p>Raises:</p> Type Description <code>ModelValidationError</code> <p>If the provided payload is invalid</p> <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <code>NotFound</code> <p>The hint with the provided ID does not exist.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\nasync def async_update(\n    self,\n    hint_id: int,\n    *,\n    payload: UpdateHintPayload = MISSING,\n    **kwargs,\n) -&gt; Hint:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Update a hint by its ID.\n\n    Parameters\n    ----------\n    hint_id: int\n        The ID of the hint to update\n    payload: UpdateHintPayload\n        The payload to update the hint with. If this is provided, no other parameters should be provided.\n    challenge_id: int\n        The challenge ID to update the hint for, defaults to None\n    content: str\n        The content of the hint, defaults to None\n    cost: int\n        The cost of the hint, defaults to None\n    type: HintType\n        The type of hint, defaults to None\n    requirements: dict[str, str] | None\n        The requirements to unlock the hint, defaults to None\n\n    Returns\n    -------\n    Hint\n        The updated hint\n\n    Raises\n    ------\n    ModelValidationError\n        If the provided payload is invalid\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    NotFound\n        The hint with the provided ID does not exist.\n    \"\"\"\n    if payload is MISSING:\n        try:\n            payload = UpdateHintPayload(**kwargs)\n        except ValidationError as e:\n            raise ModelValidationError(e.errors()) from e\n\n    return await self._client.arequest(\n        \"PATCH\",\n        f\"/api/v1/hints/{hint_id}\",\n        json=payload.dump_json(),\n        response_model=Hint,\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.delete","title":"delete","text":"<pre><code>delete(hint_id: int) -&gt; bool\n</code></pre> <p>This method is only available to admins</p> <p>Delete a hint by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>hint_id</code> <code>int</code> <p>The ID of the hint to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the hint was successfully deleted.</p> <p>Raises:</p> Type Description <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <code>NotFound</code> <p>The hint with the provided ID does not exist.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\ndef delete(self, hint_id: int) -&gt; bool:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Delete a hint by its ID.\n\n    Parameters\n    ----------\n    hint_id: int\n        The ID of the hint to delete\n\n    Returns\n    -------\n    bool\n        `#!python True` if the hint was successfully deleted.\n\n    Raises\n    ------\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    NotFound\n        The hint with the provided ID does not exist.\n    \"\"\"\n    return self._client.request(\n        \"DELETE\",\n        f\"/api/v1/hints/{hint_id}\",\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/hints/#ctfdpy.api.hints.HintsAPI.async_delete","title":"async_delete  <code>async</code>","text":"<pre><code>async_delete(hint_id: int) -&gt; bool\n</code></pre> <p>This method is only available to admins</p> <p>Delete a hint by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>hint_id</code> <code>int</code> <p>The ID of the hint to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the hint was successfully deleted.</p> <p>Raises:</p> Type Description <code>BadRequest</code> <p>An error occurred processing the provided or stored data.</p> <code>AuthenticationRequired</code> <p>You must be logged in to access this resource.</p> <code>AdminOnly</code> <p>You must be an admin to access this resource.</p> <code>NotFound</code> <p>The hint with the provided ID does not exist.</p> Source code in <code>ctfdpy\\api\\hints.py</code> <pre><code>@admin_only\nasync def async_delete(self, hint_id: int) -&gt; bool:\n    \"\"\"\n    !!! note \"This method is only available to admins\"\n\n    Delete a hint by its ID.\n\n    Parameters\n    ----------\n    hint_id: int\n        The ID of the hint to delete\n\n    Returns\n    -------\n    bool\n        `#!python True` if the hint was successfully deleted.\n\n    Raises\n    ------\n    BadRequest\n        An error occurred processing the provided or stored data.\n    AuthenticationRequired\n        You must be logged in to access this resource.\n    AdminOnly\n        You must be an admin to access this resource.\n    NotFound\n        The hint with the provided ID does not exist.\n    \"\"\"\n    return await self._client.arequest(\n        \"DELETE\",\n        f\"/api/v1/hints/{hint_id}\",\n        error_models={\n            400: BadRequest,\n            401: Unauthorized,\n            403: Forbidden,\n            404: NotFound,\n        },\n    )\n</code></pre>"},{"location":"ctfdpy/api/tags/","title":"Tags","text":""},{"location":"ctfdpy/api/tags/#ctfdpy.api.tags.TagsAPI","title":"TagsAPI","text":"<p>Interface for interacting with the <code>/api/v1/tags</code> CTFd API endpoint.</p> Source code in <code>ctfdpy\\api\\tags.py</code> <pre><code>class TagsAPI:\n    \"\"\"\n    Interface for interacting with the `/api/v1/tags` CTFd API endpoint.\n    \"\"\"\n    def __init__(self, client: APIClient):\n        self._client = client\n\n    @admin_only\n    def list(\n        self,\n        *,\n        value: str | None = None,\n        challenge_id: int | None = None,\n        q: str | None = None,\n        field: Literal[\"value\", \"challenge_id\"] | None = None,\n    ) -&gt; list[Tag]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if value is not None:\n            params[\"value\"] = value\n        if challenge_id is not None:\n            params[\"challenge_id\"] = challenge_id\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/tags\",\n            params=params,\n            model=tag_list_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n            },\n        )\n\n    @admin_only\n    async def async_list(\n        self,\n        *,\n        value: str | None = None,\n        challenge_id: int | None = None,\n        q: str | None = None,\n        field: Literal[\"value\", \"challenge_id\"] | None = None,\n    ) -&gt; list[Tag]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if value is not None:\n            params[\"value\"] = value\n        if challenge_id is not None:\n            params[\"challenge_id\"] = challenge_id\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return await self._client.request(\n            \"GET\",\n            \"/api/v1/tags\",\n            params=params,\n            model=tag_list_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n            },\n        )\n\n    @admin_only\n    def create(self, value: str, challenge_id: int) -&gt; Tag:\n        return self._client.request(\n            \"POST\",\n            \"/api/v1/tags\",\n            json={\"value\": value, \"challenge_id\": challenge_id},\n            model=Tag,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_create(self, value: str, challenge_id: int) -&gt; Tag:\n        return await self._client.request(\n            \"POST\",\n            \"/api/v1/tags\",\n            json={\"value\": value, \"challenge_id\": challenge_id},\n            model=Tag,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def get(self, tag_id: int) -&gt; Tag:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/tags/{tag_id}\",\n            model=Tag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_get(self, tag_id: int) -&gt; Tag:\n        return await self._client.request(\n            \"GET\",\n            f\"/api/v1/tags/{tag_id}\",\n            model=Tag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    def update(\n        self,\n        tag_id: int,\n        *,\n        value: str = MISSING,\n        challenge_id: int = MISSING,\n    ) -&gt; Tag:\n        payload = {}\n        if value is not MISSING:\n            payload[\"value\"] = value\n        if challenge_id is not MISSING:\n            # I have no idea what would happen if this is changed\n            payload[\"challenge_id\"] = challenge_id\n\n        return self._client.request(\n            \"PATCH\",\n            f\"/api/v1/tags/{tag_id}\",\n            json=payload,\n            model=Tag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_update(\n        self,\n        tag_id: int,\n        *,\n        value: str = MISSING,\n        challenge_id: int = MISSING,\n    ) -&gt; Tag:\n        payload = {}\n        if value is not MISSING:\n            payload[\"value\"] = value\n        if challenge_id is not MISSING:\n            # I have no idea what would happen if this is changed\n            payload[\"challenge_id\"] = challenge_id\n\n        return await self._client.request(\n            \"PATCH\",\n            f\"/api/v1/tags/{tag_id}\",\n            json=payload,\n            model=Tag,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    def delete(self, tag_id: int) -&gt; Literal[True]:\n        return self._client.request(\n            \"DELETE\",\n            f\"/api/v1/tags/{tag_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_delete(self, tag_id: int) -&gt; Literal[True]:\n        return await self._client.request(\n            \"DELETE\",\n            f\"/api/v1/tags/{tag_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n</code></pre>"},{"location":"ctfdpy/api/topics/","title":"Topics","text":""},{"location":"ctfdpy/api/topics/#ctfdpy.api.topics.TopicsAPI","title":"TopicsAPI","text":"<p>Interface for interacting with the <code>/api/v1/topics</code> CTFd API endpoint.</p> Source code in <code>ctfdpy\\api\\topics.py</code> <pre><code>class TopicsAPI:\n    \"\"\"\n    Interface for interacting with the `/api/v1/topics` CTFd API endpoint.\n    \"\"\"\n    def __init__(self, client: APIClient):\n        self._client = client\n\n    @admin_only\n    def list(\n        self,\n        *,\n        value: str | None = None,\n        q: str | None,\n        field: Literal[\"value\"] | None = None,\n    ) -&gt; list[Topic]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if value is not None:\n            params[\"value\"] = value\n\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/topics\",\n            params=params,\n            model=topic_list_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n            },\n        )\n\n    @admin_only\n    async def async_list(\n        self,\n        *,\n        value: str | None = None,\n        q: str | None,\n        field: Literal[\"value\"] | None = None,\n    ) -&gt; list[Topic]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if value is not None:\n            params[\"value\"] = value\n\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n\n        return await self._client.arequest(\n            \"GET\",\n            \"/api/v1/topics\",\n            params=params,\n            model=topic_list_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n            },\n        )\n\n    @overload\n    def create(self, value: str) -&gt; Literal[True]: ...\n\n    @overload\n    async def async_create(self, value: str) -&gt; Literal[True]: ...\n\n    @overload\n    def create(self, value: str, *, challenge_id: int) -&gt; ChallengeTopicReference: ...\n\n    @overload\n    async def async_create(\n        self, value: str, *, challenge_id: int\n    ) -&gt; ChallengeTopicReference: ...\n\n    @overload\n    def create(self, topic_id: int) -&gt; Literal[True]: ...\n\n    @overload\n    async def async_create(self, topic_id: int) -&gt; Literal[True]: ...\n\n    @overload\n    def create(\n        self, topic_id: int, *, challenge_id: int\n    ) -&gt; ChallengeTopicReference: ...\n\n    @overload\n    async def async_create(\n        self, topic_id: int, *, challenge_id: int\n    ) -&gt; ChallengeTopicReference: ...\n\n    @admin_only\n    def create(\n        self, value_or_topic_id: str | int, *, challenge_id: int | None = None\n    ) -&gt; ChallengeTopicReference | Literal[True]:\n        if isinstance(value_or_topic_id, str):\n            params = {\"value\": value_or_topic_id}\n        elif isinstance(value_or_topic_id, int):\n            params = {\"topic_id\": value_or_topic_id}\n        else:\n            raise TypeError(\n                f\"value_or_topic_id must be str or int, not {type(value_or_topic_id).__name__}\"\n            )\n\n        if challenge_id is not None:\n            # If challenge_id is provided, create a ChallengeTopic\n            params[\"challenge_id\"] = challenge_id\n            params[\"type\"] = \"challenge\"\n\n        try:\n            result = self._client.request(\n                \"POST\",\n                \"/api/v1/topics\",\n                json=params,\n                model=ChallengeTopicReference,\n                error_models={\n                    400: BadRequest,\n                    401: Unauthorized,\n                    403: Forbidden,\n                    404: NotFound,\n                },\n            )\n        except BadRequest as e:\n            response: APIResponse = e.response.json()\n            if response[\"success\"] is False and response.get(\"errors\") is None:\n                return True\n            else:\n                raise e from e\n\n        return result\n\n    @admin_only\n    async def async_create(\n        self, value_or_topic_id: str | int, *, challenge_id: int | None = None\n    ) -&gt; ChallengeTopicReference | Literal[True]:\n        if isinstance(value_or_topic_id, str):\n            params = {\"value\": value_or_topic_id}\n        elif isinstance(value_or_topic_id, int):\n            params = {\"topic_id\": value_or_topic_id}\n        else:\n            raise TypeError(\n                f\"value_or_topic_id must be str or int, not {type(value_or_topic_id).__name__}\"\n            )\n\n        if challenge_id is not None:\n            # If challenge_id is provided, create a ChallengeTopic\n            params[\"challenge_id\"] = challenge_id\n            params[\"type\"] = \"challenge\"\n\n        try:\n            result = await self._client.arequest(\n                \"POST\",\n                \"/api/v1/topics\",\n                json=params,\n                model=ChallengeTopicReference,\n                error_models={\n                    400: BadRequest,\n                    401: Unauthorized,\n                    403: Forbidden,\n                    404: NotFound,\n                },\n            )\n        except BadRequest as e:\n            response: APIResponse = e.response.json()\n            if response[\"success\"] is False and response.get(\"errors\") is None:\n                return True\n            else:\n                raise e from e\n\n        return result\n\n    @admin_only\n    def delete_challenge_topic(self, challenge_topic_id: int) -&gt; Literal[True]:\n        return self._client.request(\n            \"DELETE\",\n            \"/api/v1/topics\",\n            params={\n                \"type\": \"challenge\",\n                \"target_id\": challenge_topic_id,\n            },\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_delete_challenge_topic(\n        self, challenge_topic_id: int\n    ) -&gt; Literal[True]:\n        return await self._client.arequest(\n            \"DELETE\",\n            \"/api/v1/topics\",\n            params={\n                \"type\": \"challenge\",\n                \"target_id\": challenge_topic_id,\n            },\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    def get(self, topic_id: int) -&gt; Topic:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/topics/{topic_id}\",\n            model=Topic,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_get(self, topic_id: int) -&gt; Topic:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/topics/{topic_id}\",\n            model=Topic,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    def delete(self, topic_id: int) -&gt; Literal[True]:\n        return self._client.request(\n            \"DELETE\",\n            f\"/api/v1/topics/{topic_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_delete(self, topic_id: int) -&gt; Literal[True]:\n        return await self._client.arequest(\n            \"DELETE\",\n            f\"/api/v1/topics/{topic_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n</code></pre>"},{"location":"ctfdpy/api/users/","title":"Users","text":""},{"location":"ctfdpy/api/users/#ctfdpy.api.users.UsersAPI","title":"UsersAPI","text":"<p>Interface for interacting with the <code>/api/v1/users</code> CTFd API endpoint.</p> Source code in <code>ctfdpy\\api\\users.py</code> <pre><code>class UsersAPI:\n    \"\"\"\n    Interface for interacting with the `/api/v1/users` CTFd API endpoint.\n    \"\"\"\n    def __init__(self, client: APIClient):\n        self._client = client\n\n    def list(\n        self,\n        *,\n        affiliation: str | None = None,\n        country: str | None = None,\n        bracket: str | None = None,\n        q: str | None = None,\n        field: (\n            Literal[\"name\", \"website\", \"country\", \"bracket\", \"affiliation\", \"email\"]\n            | None\n        ) = None,\n        view: Literal[\"admin\"] | None = None,\n        page: int | None = None,\n    ) -&gt; list[UserListing]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if affiliation is not None:\n            params[\"affiliation\"] = affiliation\n        if country is not None:\n            params[\"country\"] = country\n        if bracket is not None:\n            params[\"bracket\"] = bracket\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n        if view is not None:\n            params[\"view\"] = view\n        if page is not None:\n            params[\"page\"] = page\n\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/users\",\n            params=params,\n            response_model=user_listing_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    async def async_list(\n        self,\n        *,\n        affiliation: str | None = None,\n        country: str | None = None,\n        bracket: str | None = None,\n        q: str | None = None,\n        field: (\n            Literal[\"name\", \"website\", \"country\", \"bracket\", \"affiliation\", \"email\"]\n            | None\n        ) = None,\n        view: Literal[\"admin\"] | None = None,\n        page: int | None = None,\n    ) -&gt; list[UserListing]:\n        # Check if q and field are both provided or both not provided\n        if q is None != field is None:\n            raise ValueError(\"q and field must be provided together\")\n\n        params = {}\n        if affiliation is not None:\n            params[\"affiliation\"] = affiliation\n        if country is not None:\n            params[\"country\"] = country\n        if bracket is not None:\n            params[\"bracket\"] = bracket\n        if q is not None:\n            params[\"q\"] = q\n            params[\"field\"] = field\n        if view is not None:\n            params[\"view\"] = view\n        if page is not None:\n            params[\"page\"] = page\n\n        return await self._client.arequest(\n            \"GET\",\n            \"/api/v1/users\",\n            params=params,\n            response_model=user_listing_list_adapter,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @overload\n    def create(self, *, payload: CreateUserPayload) -&gt; UserAdminView: ...\n\n    @overload\n    async def async_create(self, *, payload: CreateUserPayload) -&gt; UserAdminView: ...\n\n    @overload\n    def create(\n        self,\n        *,\n        name: str,\n        email: str,\n        password: str,\n        type: UserType = UserType.USER,\n        banned: bool = False,\n        hidden: bool = False,\n        verified: bool = False,\n        language: str | None = None,\n        website: str | None = None,\n        affiliation: str | None = None,\n        country: str | None = None,\n        bracket_id: int | None = None,\n        fields: list | None = None,\n        secret: str | None = None,\n    ) -&gt; UserAdminView: ...\n\n    @overload\n    async def async_create(\n        self,\n        *,\n        name: str,\n        email: str,\n        password: str,\n        type: UserType = UserType.USER,\n        banned: bool = False,\n        hidden: bool = False,\n        verified: bool = False,\n        language: str | None = None,\n        website: str | None = None,\n        affiliation: str | None = None,\n        country: str | None = None,\n        bracket_id: int | None = None,\n        fields: list | None = None,\n        secret: str | None = None,\n    ) -&gt; UserAdminView: ...\n\n    @admin_only\n    def create(\n        self,\n        *,\n        payload: CreateUserPayload = MISSING,\n        name: str | None = None,\n        email: str | None = None,\n        password: str | None = None,\n        type: UserType = UserType.USER,\n        banned: bool = False,\n        hidden: bool = False,\n        verified: bool = False,\n        language: str | None = None,\n        website: str | None = None,\n        affiliation: str | None = None,\n        country: str | None = None,\n        bracket_id: int | None = None,\n        fields: list | None = None,\n        secret: str | None = None,\n    ) -&gt; UserAdminView:\n        if payload is MISSING:\n            try:\n                payload = CreateUserPayload(\n                    name=name,\n                    email=email,\n                    password=password,\n                    type=type,\n                    banned=banned,\n                    hidden=hidden,\n                    verified=verified,\n                    language=language,\n                    website=website,\n                    affiliation=affiliation,\n                    country=country,\n                    bracket_id=bracket_id,\n                    fields=fields,\n                    secret=secret,\n                )\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return self._client.request(\n            \"POST\",\n            \"/api/v1/users\",\n            json=payload.dump_json(),\n            response_model=UserAdminView,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_create(\n        self,\n        *,\n        payload: CreateUserPayload = MISSING,\n        name: str | None = None,\n        email: str | None = None,\n        password: str | None = None,\n        type: UserType = UserType.USER,\n        banned: bool = False,\n        hidden: bool = False,\n        verified: bool = False,\n        language: str | None = None,\n        website: str | None = None,\n        affiliation: str | None = None,\n        country: str | None = None,\n        bracket_id: int | None = None,\n        fields: list | None = None,\n        secret: str | None = None,\n    ) -&gt; UserAdminView:\n        if payload is MISSING:\n            try:\n                payload = CreateUserPayload(\n                    name=name,\n                    email=email,\n                    password=password,\n                    type=type,\n                    banned=banned,\n                    hidden=hidden,\n                    verified=verified,\n                    language=language,\n                    website=website,\n                    affiliation=affiliation,\n                    country=country,\n                    bracket_id=bracket_id,\n                    fields=fields,\n                    secret=secret,\n                )\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return await self._client.arequest(\n            \"POST\",\n            \"/api/v1/users\",\n            json=payload.dump_json(),\n            response_model=UserAdminView,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @auth_only\n    def get_self(self) -&gt; UserPrivateView:\n        return self._client.request(\n            \"GET\",\n            \"/api/v1/users/me\",\n            response_model=UserPrivateView,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @auth_only\n    async def async_get_self(self) -&gt; UserPrivateView:\n        return await self._client.arequest(\n            \"GET\",\n            \"/api/v1/users/me\",\n            response_model=UserPrivateView,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @overload\n    def update_self(self, *, payload: UpdateSelfUserPayload) -&gt; UserPrivateView: ...\n\n    @overload\n    async def async_update_self(\n        self, *, payload: UpdateSelfUserPayload\n    ) -&gt; UserPrivateView: ...\n\n    @overload\n    def update_self(\n        self,\n        *,\n        name: str = MISSING,\n        email: str = MISSING,\n        password: str = MISSING,\n        # only needed if password is provided and user is not admin\n        old_password: str = MISSING,\n        language: str | None = MISSING,\n        website: str | None = MISSING,\n        affiliation: str | None = MISSING,\n        country: str | None = MISSING,\n        fields: list = MISSING,\n    ) -&gt; UserPrivateView: ...\n\n    @overload\n    async def async_update_self(\n        self,\n        *,\n        name: str = MISSING,\n        email: str = MISSING,\n        password: str = MISSING,\n        # only needed if password is provided and user is not admin\n        old_password: str = MISSING,\n        language: str | None = MISSING,\n        website: str | None = MISSING,\n        affiliation: str | None = MISSING,\n        country: str | None = MISSING,\n        fields: list = MISSING,\n    ) -&gt; UserPrivateView: ...\n\n    @auth_only\n    def update_self(\n        self,\n        *,\n        payload: UpdateSelfUserPayload | None = None,\n        **kwargs,\n    ) -&gt; UserPrivateView:\n        if payload is None:\n            try:\n                payload = UpdateSelfUserPayload(**kwargs)\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return self._client.request(\n            \"PATCH\",\n            \"/api/v1/users/me\",\n            json=payload.dump_json(),\n            response_model=UserPrivateView,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @auth_only\n    def get_self_awards(self):\n        raise NotImplementedError\n\n    @auth_only\n    async def async_get_self_awards(self):\n        raise NotImplementedError\n\n    @auth_only\n    def get_self_fails(self):\n        raise NotImplementedError\n\n    @auth_only\n    async def async_get_self_fails(self):\n        raise NotImplementedError\n\n    @auth_only\n    def get_self_solves(self):\n        raise NotImplementedError\n\n    @auth_only\n    async def async_get_self_solves(self):\n        raise NotImplementedError\n\n    def get(self, user_id: int) -&gt; UserPublicView | UserAdminView:\n        return self._client.request(\n            \"GET\",\n            f\"/api/v1/users/{user_id}\",\n            response_model=user_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    async def async_get(self, user_id: int) -&gt; UserPublicView | UserAdminView:\n        return await self._client.arequest(\n            \"GET\",\n            f\"/api/v1/users/{user_id}\",\n            response_model=user_adapter,\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @overload\n    def update(self, user_id: int, *, payload: UpdateUserPayload) -&gt; UserAdminView: ...\n\n    @overload\n    async def async_update(\n        self, user_id: int, *, payload: UpdateUserPayload\n    ) -&gt; UserAdminView: ...\n\n    @overload\n    def update(\n        self,\n        user_id: int,\n        *,\n        name: str = MISSING,\n        email: str = MISSING,\n        password: str = MISSING,\n        type: UserType = MISSING,\n        banned: bool = MISSING,\n        hidden: bool = MISSING,\n        verified: bool = MISSING,\n        language: str | None = MISSING,\n        website: str | None = MISSING,\n        affiliation: str | None = MISSING,\n        country: str | None = MISSING,\n        bracket_id: int | None = MISSING,\n        fields: list = MISSING,\n        secret: str = MISSING,\n    ) -&gt; UserAdminView: ...\n\n    @overload\n    async def async_update(\n        self,\n        user_id: int,\n        *,\n        name: str = MISSING,\n        email: str = MISSING,\n        password: str = MISSING,\n        type: UserType = MISSING,\n        banned: bool = MISSING,\n        hidden: bool = MISSING,\n        verified: bool = MISSING,\n        language: str | None = MISSING,\n        website: str | None = MISSING,\n        affiliation: str | None = MISSING,\n        country: str | None = MISSING,\n        bracket_id: int | None = MISSING,\n        fields: list = MISSING,\n        secret: str = MISSING,\n    ) -&gt; UserAdminView: ...\n\n    @admin_only\n    def update(\n        self,\n        user_id: int,\n        *,\n        payload: UpdateUserPayload = MISSING,\n        **kwargs,\n    ) -&gt; UserAdminView:\n        if payload is MISSING:\n            try:\n                payload = UpdateUserPayload(**kwargs)\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return self._client.request(\n            \"PATCH\",\n            f\"/api/v1/users/{user_id}\",\n            json=payload.dump_json(),\n            response_model=UserAdminView,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    async def async_update(\n        self,\n        user_id: int,\n        *,\n        payload: UpdateUserPayload = MISSING,\n        **kwargs,\n    ) -&gt; UserAdminView:\n        if payload is MISSING:\n            try:\n                payload = UpdateUserPayload(**kwargs)\n            except ValidationError as e:\n                raise ModelValidationError(e.errors()) from e\n\n        return await self._client.arequest(\n            \"PATCH\",\n            f\"/api/v1/users/{user_id}\",\n            json=payload.dump_json(),\n            response_model=UserAdminView,\n            error_models={400: BadRequest, 401: Unauthorized, 403: Forbidden},\n        )\n\n    @admin_only\n    def delete(self, user_id: int) -&gt; bool:\n        return self._client.request(\n            \"DELETE\",\n            f\"/api/v1/users/{user_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_delete(self, user_id: int) -&gt; bool:\n        return await self._client.arequest(\n            \"DELETE\",\n            f\"/api/v1/users/{user_id}\",\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    def get_awards(self, user_id: int):\n        raise NotImplementedError\n\n    async def async_get_awards(self, user_id: int):\n        raise NotImplementedError\n\n    def get_fails(self, user_id: int):\n        raise NotImplementedError\n\n    async def async_get_fails(self, user_id: int):\n        raise NotImplementedError\n\n    def get_solves(self, user_id: int):\n        raise NotImplementedError\n\n    async def async_get_solves(self, user_id: int):\n        raise NotImplementedError\n\n    @admin_only\n    def email(self, user_id: int, text: str):\n        return self._client.request(\n            \"POST\",\n            f\"/api/v1/users/{user_id}/email\",\n            json={\"text\": text},\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n\n    @admin_only\n    async def async_email(self, user_id: int, text: str):\n        return await self._client.arequest(\n            \"POST\",\n            f\"/api/v1/users/{user_id}/email\",\n            json={\"text\": text},\n            error_models={\n                400: BadRequest,\n                401: Unauthorized,\n                403: Forbidden,\n                404: NotFound,\n            },\n        )\n</code></pre>"},{"location":"ctfdpy/models/challenges/","title":"Challenges","text":""},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.LockedChallengeHint","title":"LockedChallengeHint","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a locked challenge hint in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the hint</p> required <code>cost</code> <code>int</code> <p>The cost of the hint</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the hint, read-only</p> <code>cost</code> <code>int</code> <p>The cost of the hint</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class LockedChallengeHint(ResponseModel):\n    \"\"\"\n    Represents a locked challenge hint in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the hint\n    cost : int\n        The cost of the hint\n\n    Attributes\n    ----------\n    id : int\n        The ID of the hint, read-only\n    cost : int\n        The cost of the hint\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    cost: int\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.UnlockedChallengeHint","title":"UnlockedChallengeHint","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents an unlocked challenge hint in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the hint</p> required <code>cost</code> <code>int</code> <p>The cost of the hint</p> required <code>content</code> <code>str</code> <p>The content of the hint</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the hint, read-only</p> <code>cost</code> <code>int</code> <p>The cost of the hint</p> <code>content</code> <code>str</code> <p>The content of the hint</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class UnlockedChallengeHint(ResponseModel):\n    \"\"\"\n    Represents an unlocked challenge hint in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the hint\n    cost : int\n        The cost of the hint\n    content : str\n        The content of the hint\n\n    Attributes\n    ----------\n    id : int\n        The ID of the hint, read-only\n    cost : int\n        The cost of the hint\n    content : str\n        The content of the hint\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    cost: int\n    content: str\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.ChallengeListing","title":"ChallengeListing","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a challenge listing in CTFd.</p> <p>This is returned by the <code>GET /challenges</code> endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge</p> required <code>type</code> <code>ChallengeType</code> <p>The type of the challenge</p> required <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>value</code> <code>int</code> <p>The value of the challenge</p> required <code>solves</code> <code>int</code> <p>The number of solves of the challenge</p> required <code>solved_by_me</code> <code>bool</code> <p>Whether the challenge is solved by the current user</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>tags</code> <code>list[str]</code> <p>The tags of the challenge</p> required <code>template</code> <code>str</code> <p>The HTML template of the modal for the challenge. Used internally by the CTFd frontend.</p> required <code>script</code> <code>str</code> <p>The Javascript code for the modal for the challenge. Used internally by the CTFd frontend</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge, read-only</p> <code>type</code> <code>ChallengeType</code> <p>The type of the challenge</p> <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>value</code> <code>int</code> <p>The value of the challenge</p> <code>solves</code> <code>int</code> <p>The number of solves of the challenge</p> <code>solved_by_me</code> <code>bool</code> <p>Whether the challenge is solved by the current user</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>tags</code> <code>list[str]</code> <p>The tags of the challenge</p> <code>template</code> <code>str</code> <p>The HTML template of the modal for the challenge. Used internally by the CTFd frontend.</p> <code>script</code> <code>str</code> <p>The Javascript code for the modal for the challenge. Used internally by the CTFd frontend</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class ChallengeListing(ResponseModel):\n    \"\"\"\n    Represents a challenge listing in CTFd.\n\n    This is returned by the `GET /challenges` endpoint.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge\n    type : ChallengeType\n        The type of the challenge\n    name : str\n        The name of the challenge\n    value : int\n        The value of the challenge\n    solves : int\n        The number of solves of the challenge\n    solved_by_me : bool\n        Whether the challenge is solved by the current user\n    category : str\n        The category of the challenge\n    tags : list[str]\n        The tags of the challenge\n    template : str\n        The HTML template of the modal for the challenge. Used internally by the CTFd frontend.\n    script : str\n        The Javascript code for the modal for the challenge. Used internally by the CTFd frontend\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge, read-only\n    type : ChallengeType\n        The type of the challenge\n    name : str\n        The name of the challenge\n    value : int\n        The value of the challenge\n    solves : int\n        The number of solves of the challenge\n    solved_by_me : bool\n        Whether the challenge is solved by the current user\n    category : str\n        The category of the challenge\n    tags : list[str]\n        The tags of the challenge\n    template : str\n        The HTML template of the modal for the challenge. Used internally by the CTFd frontend.\n    script : str\n        The Javascript code for the modal for the challenge. Used internally by the CTFd frontend\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    type: ChallengeType\n    name: str\n    value: int\n    solves: int\n    solved_by_me: bool\n    category: str\n    tags: list[str]\n    template: str = Field(frozen=True, exclude=True)\n    script: str = Field(frozen=True, exclude=True)\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.AnonymousChallenge","title":"AnonymousChallenge","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents an anonymized challenge in CTFd.</p> <p>All fields in this model will always be the same, except for <code>id</code>.</p> <p>This can be returned by the <code>GET /challenges</code> and <code>GET /challenges/&lt;int:challenge_id&gt;</code> endpoints.</p> <p>This occurs when the challenge has a prerequisite that has not been solved and is set to be anonymized instead of hidden.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge</p> required <code>type</code> <code>Literal['hidden']</code> <p>The type of the challenge</p> required <code>name</code> <code>Literal['???']</code> <p>The name of the challenge</p> required <code>value</code> <code>Literal[0]</code> <p>The value of the challenge</p> required <code>solves</code> <code>None</code> <p>The number of solves of the challenge</p> required <code>solved_by_me</code> <code>Literal[False]</code> <p>Whether the challenge is solved by the current user</p> required <code>category</code> <code>Literal['???']</code> <p>The category of the challenge</p> required <code>tags</code> <code>list[Never]</code> <p>The tags of the challenge. Always an empty list.</p> required <code>template</code> <code>Literal['']</code> <p>The HTML template of the modal for the challenge. Used internally by the CTFd frontend.</p> required <code>script</code> <code>Literal['']</code> <p>The Javascript code for the modal for the challenge. Used internally by the CTFd frontend</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge, read-only</p> <code>type</code> <code>Literal['hidden']</code> <p>The type of the challenge</p> <code>name</code> <code>Literal['???']</code> <p>The name of the challenge</p> <code>value</code> <code>Literal[0]</code> <p>The value of the challenge</p> <code>solves</code> <code>None</code> <p>The number of solves of the challenge</p> <code>solved_by_me</code> <code>Literal[False]</code> <p>Whether the challenge is solved by the current user</p> <code>category</code> <code>Literal['???']</code> <p>The category of the challenge</p> <code>tags</code> <code>list[Never]</code> <p>The tags of the challenge. Always an empty list.</p> <code>template</code> <code>Literal['']</code> <p>The HTML template of the modal for the challenge. Used internally by the CTFd frontend.</p> <code>script</code> <code>Literal['']</code> <p>The Javascript code for the modal for the challenge. Used internally by the CTFd frontend</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class AnonymousChallenge(ResponseModel):\n    \"\"\"\n    Represents an anonymized challenge in CTFd.\n\n    All fields in this model will always be the same, except for `id`.\n\n    This can be returned by the `GET /challenges` and `GET /challenges/&lt;int:challenge_id&gt;` endpoints.\n\n    This occurs when the challenge has a prerequisite that has not been solved\n    and is set to be anonymized instead of hidden.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge\n    type : Literal[\"hidden\"]\n        The type of the challenge\n    name : Literal[\"???\"]\n        The name of the challenge\n    value : Literal[0]\n        The value of the challenge\n    solves : None\n        The number of solves of the challenge\n    solved_by_me : Literal[False]\n        Whether the challenge is solved by the current user\n    category : Literal[\"???\"]\n        The category of the challenge\n    tags : list[Never]\n        The tags of the challenge. Always an empty list.\n    template : Literal[\"\"]\n        The HTML template of the modal for the challenge. Used internally by the CTFd frontend.\n    script : Literal[\"\"]\n        The Javascript code for the modal for the challenge. Used internally by the CTFd frontend\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge, read-only\n    type : Literal[\"hidden\"]\n        The type of the challenge\n    name : Literal[\"???\"]\n        The name of the challenge\n    value : Literal[0]\n        The value of the challenge\n    solves : None\n        The number of solves of the challenge\n    solved_by_me : Literal[False]\n        Whether the challenge is solved by the current user\n    category : Literal[\"???\"]\n        The category of the challenge\n    tags : list[Never]\n        The tags of the challenge. Always an empty list.\n    template : Literal[\"\"]\n        The HTML template of the modal for the challenge. Used internally by the CTFd frontend.\n    script : Literal[\"\"]\n        The Javascript code for the modal for the challenge. Used internally by the CTFd frontend\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    type: Literal[\"hidden\"] = \"hidden\"\n    name: Literal[\"???\"]\n    value: Literal[0]\n    solves: None\n    solved_by_me: Literal[False]\n    category: Literal[\"???\"]\n    tags: Annotated[list[Any], Len(0, 0)]\n    template: Literal[\"\"]\n    script: Literal[\"\"]\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.BaseChallenge","title":"BaseChallenge","text":"<p>             Bases: <code>_BaseChallenge</code></p> <p>The base class for challenge models in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge</p> required <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>value</code> <code>int</code> <p>The value of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>type</code> <code>ChallengeType</code> <p>The type of the challenge</p> required <code>type_data</code> <code>ChallengeTypeDataDict</code> <p>The data of the challenge type</p> required <code>solves</code> <code>int</code> <p>The number of solves the challenge has</p> required <code>solved_by_me</code> <code>bool</code> <p>Whether the challenge is solved by the current user</p> required <code>attempts</code> <code>int</code> <p>The number of attempts the current user has made on the challenge</p> required <code>files</code> <code>list[str]</code> <p>The URL paths to the files of the challenge</p> required <code>tags</code> <code>list[str]</code> <p>The tags of the challenge</p> required <code>hints</code> <code>list[LockedChallengeHint | UnlockedChallengeHint]</code> <p>The hints of the challenge</p> required <code>view</code> <code>str</code> <p>The HTML template of the challenge. Used internally by the CTFd frontend</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge, read-only</p> <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>value</code> <code>int</code> <p>The value of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>type</code> <code>ChallengeType</code> <p>The type of the challenge</p> <code>type_data</code> <code>ChallengeTypeDataDict</code> <p>The data of the challenge type</p> <code>solves</code> <code>int</code> <p>The number of solves the challenge has</p> <code>solved_by_me</code> <code>bool</code> <p>Whether the challenge is solved by the current user</p> <code>attempts</code> <code>int</code> <p>The number of attempts the current user has made on the challenge</p> <code>files</code> <code>list[str]</code> <p>The URL paths to the files of the challenge</p> <code>tags</code> <code>list[str]</code> <p>The tags of the challenge</p> <code>hints</code> <code>list[LockedChallengeHint | UnlockedChallengeHint]</code> <p>The hints of the challenge</p> <code>view</code> <code>str</code> <p>The HTML template of the challenge. Used internally by the CTFd frontend</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class BaseChallenge(_BaseChallenge):\n    \"\"\"\n    The base class for challenge models in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : ChallengeType\n        The type of the challenge\n    type_data : ChallengeTypeDataDict\n        The data of the challenge type\n    solves : int\n        The number of solves the challenge has\n    solved_by_me : bool\n        Whether the challenge is solved by the current user\n    attempts : int\n        The number of attempts the current user has made on the challenge\n    files : list[str]\n        The URL paths to the files of the challenge\n    tags : list[str]\n        The tags of the challenge\n    hints : list[LockedChallengeHint | UnlockedChallengeHint]\n        The hints of the challenge\n    view : str\n        The HTML template of the challenge. Used internally by the CTFd frontend\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge, read-only\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : ChallengeType\n        The type of the challenge\n    type_data : ChallengeTypeDataDict\n        The data of the challenge type\n    solves : int\n        The number of solves the challenge has\n    solved_by_me : bool\n        Whether the challenge is solved by the current user\n    attempts : int\n        The number of attempts the current user has made on the challenge\n    files : list[str]\n        The URL paths to the files of the challenge\n    tags : list[str]\n        The tags of the challenge\n    hints : list[LockedChallengeHint | UnlockedChallengeHint]\n        The hints of the challenge\n    view : str\n        The HTML template of the challenge. Used internally by the CTFd frontend\n    \"\"\"\n\n    solves: int\n    solved_by_me: bool\n    attempts: int\n\n    files: list[str]\n    tags: list[str]\n    hints: list[\n        Annotated[\n            Annotated[LockedChallengeHint, Tag(\"locked\")]\n            | Annotated[UnlockedChallengeHint, Tag(\"unlocked\")],\n            Discriminator(_hint_model_discriminator),\n        ]\n    ]\n\n    view: str\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.StandardChallenge","title":"StandardChallenge","text":"<p>             Bases: <code>BaseChallenge</code></p> <p>Represents a standard challenge in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge</p> required <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>value</code> <code>int</code> <p>The value of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>type</code> <code>Literal[STANDARD]</code> <p>The type of the challenge</p> required <code>type_data</code> <code>ChallengeTypeDataDict[Literal[STANDARD]]</code> <p>The data of the challenge type</p> required <code>solves</code> <code>int</code> <p>The number of solves the challenge has</p> required <code>solved_by_me</code> <code>bool</code> <p>Whether the challenge is solved by the current user</p> required <code>attempts</code> <code>int</code> <p>The number of attempts the current user has made on the challenge</p> required <code>files</code> <code>list[str]</code> <p>The URL paths to the files of the challenge</p> required <code>tags</code> <code>list[str]</code> <p>The tags of the challenge</p> required <code>hints</code> <code>list[LockedChallengeHint | UnlockedChallengeHint]</code> <p>The hints of the challenge</p> required <code>view</code> <code>str</code> <p>The HTML template of the challenge. Used internally by the CTFd frontend</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge, read-only</p> <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>value</code> <code>int</code> <p>The value of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>type</code> <code>Literal[STANDARD]</code> <p>The type of the challenge</p> <code>type_data</code> <code>ChallengeTypeDataDict[Literal[STANDARD]]</code> <p>The data of the challenge type</p> <code>solves</code> <code>int</code> <p>The number of solves the challenge has</p> <code>solved_by_me</code> <code>bool</code> <p>Whether the challenge is solved by the current user</p> <code>attempts</code> <code>int</code> <p>The number of attempts the current user has made on the challenge</p> <code>files</code> <code>list[str]</code> <p>The URL paths to the files of the challenge</p> <code>tags</code> <code>list[str]</code> <p>The tags of the challenge</p> <code>hints</code> <code>list[LockedChallengeHint | UnlockedChallengeHint]</code> <p>The hints of the challenge</p> <code>view</code> <code>str</code> <p>The HTML template of the challenge. Used internally by the CTFd frontend</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class StandardChallenge(BaseChallenge):\n    \"\"\"\n    Represents a standard challenge in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : Literal[ChallengeType.STANDARD]\n        The type of the challenge\n    type_data : ChallengeTypeDataDict[Literal[ChallengeType.STANDARD]]\n        The data of the challenge type\n    solves : int\n        The number of solves the challenge has\n    solved_by_me : bool\n        Whether the challenge is solved by the current user\n    attempts : int\n        The number of attempts the current user has made on the challenge\n    files : list[str]\n        The URL paths to the files of the challenge\n    tags : list[str]\n        The tags of the challenge\n    hints : list[LockedChallengeHint | UnlockedChallengeHint]\n        The hints of the challenge\n    view : str\n        The HTML template of the challenge. Used internally by the CTFd frontend\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge, read-only\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : Literal[ChallengeType.STANDARD]\n        The type of the challenge\n    type_data : ChallengeTypeDataDict[Literal[ChallengeType.STANDARD]]\n        The data of the challenge type\n    solves : int\n        The number of solves the challenge has\n    solved_by_me : bool\n        Whether the challenge is solved by the current user\n    attempts : int\n        The number of attempts the current user has made on the challenge\n    files : list[str]\n        The URL paths to the files of the challenge\n    tags : list[str]\n        The tags of the challenge\n    hints : list[LockedChallengeHint | UnlockedChallengeHint]\n        The hints of the challenge\n    view : str\n        The HTML template of the challenge. Used internally by the CTFd frontend\n    \"\"\"\n\n    type: Literal[ChallengeType.STANDARD] = ChallengeType.STANDARD\n    type_data: ChallengeTypeDataDict[Literal[ChallengeType.STANDARD]]\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.DynamicChallenge","title":"DynamicChallenge","text":"<p>             Bases: <code>BaseChallenge</code></p> <p>Represents a dynamic challenge in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge</p> required <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>value</code> <code>int</code> <p>The value of the challenge</p> required <code>initial</code> <code>int</code> <p>The initial value of the challenge</p> required <code>decay</code> <code>int</code> <p>The decay value of the challenge</p> required <code>minimum</code> <code>int</code> <p>The minimum value of the challenge</p> required <code>function</code> <code>DecayFunction</code> <p>The decay function of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>type</code> <code>Literal[DYNAMIC]</code> <p>The type of the challenge</p> required <code>type_data</code> <code>ChallengeTypeDataDict[Literal[DYNAMIC]]</code> <p>The data of the challenge type</p> required <code>solves</code> <code>int</code> <p>The number of solves the challenge has</p> required <code>solved_by_me</code> <code>bool</code> <p>Whether the challenge is solved by the current user</p> required <code>attempts</code> <code>int</code> <p>The number of attempts the current user has made on the challenge</p> required <code>files</code> <code>list[str]</code> <p>The URL paths to the files of the challenge</p> required <code>tags</code> <code>list[str]</code> <p>The tags of the challenge</p> required <code>hints</code> <code>list[LockedChallengeHint | UnlockedChallengeHint]</code> <p>The hints of the challenge</p> required <code>view</code> <code>str</code> <p>The HTML template of the challenge. Used internally by the CTFd frontend</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge, read-only</p> <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>value</code> <code>int</code> <p>The value of the challenge</p> <code>initial</code> <code>int</code> <p>The initial value of the challenge</p> <code>decay</code> <code>int</code> <p>The decay value of the challenge</p> <code>minimum</code> <code>int</code> <p>The minimum value of the challenge</p> <code>function</code> <code>DecayFunction</code> <p>The decay function of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>type</code> <code>Literal[DYNAMIC]</code> <p>The type of the challenge</p> <code>type_data</code> <code>ChallengeTypeDataDict[Literal[DYNAMIC]]</code> <p>The data of the challenge type</p> <code>solves</code> <code>int</code> <p>The number of solves the challenge has</p> <code>solved_by_me</code> <code>bool</code> <p>Whether the challenge is solved by the current user</p> <code>attempts</code> <code>int</code> <p>The number of attempts the current user has made on the challenge</p> <code>files</code> <code>list[str]</code> <p>The URL paths to the files of the challenge</p> <code>tags</code> <code>list[str]</code> <p>The tags of the challenge</p> <code>hints</code> <code>list[LockedChallengeHint | UnlockedChallengeHint]</code> <p>The hints of the challenge</p> <code>view</code> <code>str</code> <p>The HTML template of the challenge. Used internally by the CTFd frontend</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class DynamicChallenge(BaseChallenge):\n    \"\"\"\n    Represents a dynamic challenge in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    initial : int\n        The initial value of the challenge\n    decay : int\n        The decay value of the challenge\n    minimum : int\n        The minimum value of the challenge\n    function : DecayFunction\n        The decay function of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : Literal[ChallengeType.DYNAMIC]\n        The type of the challenge\n    type_data : ChallengeTypeDataDict[Literal[ChallengeType.DYNAMIC]]\n        The data of the challenge type\n    solves : int\n        The number of solves the challenge has\n    solved_by_me : bool\n        Whether the challenge is solved by the current user\n    attempts : int\n        The number of attempts the current user has made on the challenge\n    files : list[str]\n        The URL paths to the files of the challenge\n    tags : list[str]\n        The tags of the challenge\n    hints : list[LockedChallengeHint | UnlockedChallengeHint]\n        The hints of the challenge\n    view : str\n        The HTML template of the challenge. Used internally by the CTFd frontend\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge, read-only\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    initial : int\n        The initial value of the challenge\n    decay : int\n        The decay value of the challenge\n    minimum : int\n        The minimum value of the challenge\n    function : DecayFunction\n        The decay function of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : Literal[ChallengeType.DYNAMIC]\n        The type of the challenge\n    type_data : ChallengeTypeDataDict[Literal[ChallengeType.DYNAMIC]]\n        The data of the challenge type\n    solves : int\n        The number of solves the challenge has\n    solved_by_me : bool\n        Whether the challenge is solved by the current user\n    attempts : int\n        The number of attempts the current user has made on the challenge\n    files : list[str]\n        The URL paths to the files of the challenge\n    tags : list[str]\n        The tags of the challenge\n    hints : list[LockedChallengeHint | UnlockedChallengeHint]\n        The hints of the challenge\n    view : str\n        The HTML template of the challenge. Used internally by the CTFd frontend\n    \"\"\"\n\n    value: int = Field(frozen=True, exclude=True)\n    initial: int\n    decay: int\n    minimum: int\n    function: DecayFunction\n\n    type: Literal[ChallengeType.DYNAMIC] = ChallengeType.DYNAMIC\n    type_data: ChallengeTypeDataDict[Literal[ChallengeType.DYNAMIC]]\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.BaseChallengeWriteResult","title":"BaseChallengeWriteResult","text":"<p>             Bases: <code>_BaseChallenge</code></p> <p>The base class for challenge write results in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge</p> required <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>value</code> <code>int</code> <p>The value of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>type</code> <code>ChallengeType</code> <p>The type of the challenge</p> required <code>type_data</code> <code>ChallengeTypeDataDict</code> <p>The data of the challenge type</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge, read-only</p> <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>value</code> <code>int</code> <p>The value of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>type</code> <code>ChallengeType</code> <p>The type of the challenge</p> <code>type_data</code> <code>ChallengeTypeDataDict</code> <p>The data of the challenge type</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class BaseChallengeWriteResult(_BaseChallenge):\n    \"\"\"\n    The base class for challenge write results in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : ChallengeType\n        The type of the challenge\n    type_data : ChallengeTypeDataDict\n        The data of the challenge type\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge, read-only\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : ChallengeType\n        The type of the challenge\n    type_data : ChallengeTypeDataDict\n        The data of the challenge type\n    \"\"\"\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.StandardChallengeWriteResult","title":"StandardChallengeWriteResult","text":"<p>             Bases: <code>BaseChallengeWriteResult</code></p> <p>Represents a standard challenge write result in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge</p> required <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>value</code> <code>int</code> <p>The value of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>type</code> <code>Literal[STANDARD]</code> <p>The type of the challenge</p> required <code>type_data</code> <code>ChallengeTypeDataDict[Literal[STANDARD]]</code> <p>The data of the challenge type</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge, read-only</p> <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>value</code> <code>int</code> <p>The value of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>type</code> <code>Literal[STANDARD]</code> <p>The type of the challenge</p> <code>type_data</code> <code>ChallengeTypeDataDict[Literal[STANDARD]]</code> <p>The data of the challenge type</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class StandardChallengeWriteResult(BaseChallengeWriteResult):\n    \"\"\"\n    Represents a standard challenge write result in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : Literal[ChallengeType.STANDARD]\n        The type of the challenge\n    type_data : ChallengeTypeDataDict[Literal[ChallengeType.STANDARD]]\n        The data of the challenge type\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge, read-only\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : Literal[ChallengeType.STANDARD]\n        The type of the challenge\n    type_data : ChallengeTypeDataDict[Literal[ChallengeType.STANDARD]]\n        The data of the challenge type\n    \"\"\"\n\n    type: Literal[ChallengeType.STANDARD] = ChallengeType.STANDARD\n    type_data: ChallengeTypeDataDict[Literal[ChallengeType.STANDARD]]\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.DynamicChallengeWriteResult","title":"DynamicChallengeWriteResult","text":"<p>             Bases: <code>BaseChallengeWriteResult</code></p> <p>Represents a dynamic challenge write result in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge</p> required <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>value</code> <code>int</code> <p>The value of the challenge</p> required <code>initial</code> <code>int</code> <p>The initial value of the challenge</p> required <code>decay</code> <code>int</code> <p>The decay value of the challenge</p> required <code>minimum</code> <code>int</code> <p>The minimum value of the challenge</p> required <code>function</code> <code>DecayFunction</code> <p>The decay function of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>type</code> <code>Literal[DYNAMIC]</code> <p>The type of the challenge</p> required <code>type_data</code> <code>ChallengeTypeDataDict[Literal[DYNAMIC]]</code> <p>The data of the challenge type</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge, read-only</p> <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>value</code> <code>int</code> <p>The value of the challenge</p> <code>initial</code> <code>int</code> <p>The initial value of the challenge</p> <code>decay</code> <code>int</code> <p>The decay value of the challenge</p> <code>minimum</code> <code>int</code> <p>The minimum value of the challenge</p> <code>function</code> <code>DecayFunction</code> <p>The decay function of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>type</code> <code>Literal[DYNAMIC]</code> <p>The type of the challenge</p> <code>type_data</code> <code>ChallengeTypeDataDict[Literal[DYNAMIC]]</code> <p>The data of the challenge type</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class DynamicChallengeWriteResult(BaseChallengeWriteResult):\n    \"\"\"\n    Represents a dynamic challenge write result in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    initial : int\n        The initial value of the challenge\n    decay : int\n        The decay value of the challenge\n    minimum : int\n        The minimum value of the challenge\n    function : DecayFunction\n        The decay function of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : Literal[ChallengeType.DYNAMIC]\n        The type of the challenge\n    type_data : ChallengeTypeDataDict[Literal[ChallengeType.DYNAMIC]]\n        The data of the challenge type\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge, read-only\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    value : int\n        The value of the challenge\n    initial : int\n        The initial value of the challenge\n    decay : int\n        The decay value of the challenge\n    minimum : int\n        The minimum value of the challenge\n    function : DecayFunction\n        The decay function of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    type : Literal[ChallengeType.DYNAMIC]\n        The type of the challenge\n    type_data : ChallengeTypeDataDict[Literal[ChallengeType.DYNAMIC]]\n        The data of the challenge type\n    \"\"\"\n\n    value: int = Field(frozen=True, exclude=True)\n    initial: int\n    decay: int\n    minimum: int\n    function: DecayFunction\n\n    type: Literal[ChallengeType.DYNAMIC] = ChallengeType.DYNAMIC\n    type_data: ChallengeTypeDataDict[Literal[ChallengeType.DYNAMIC]]\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.CreateBaseChallengePayload","title":"CreateBaseChallengePayload","text":"<p>             Bases: <code>CreatePayloadModel</code></p> <p>Represents the base payload for creating a challenge in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> required <code>type</code> <code>ChallengeType</code> <p>The type of the challenge</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> <code>type</code> <code>ChallengeType</code> <p>The type of the challenge</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class CreateBaseChallengePayload(CreatePayloadModel):\n    \"\"\"\n    Represents the base payload for creating a challenge in CTFd.\n\n    Parameters\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    type : ChallengeType\n        The type of the challenge\n\n    Attributes\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    type : ChallengeType\n        The type of the challenge\n    \"\"\"\n\n    name: str\n    description: str\n    category: str\n    state: ChallengeState\n\n    connection_info: str | None = None\n    next_id: int | None = None\n    max_attempts: int | None = None\n\n    requirements: ChallengeRequirementsDict | None = None\n\n    type: ChallengeType\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.CreateStandardChallengePayload","title":"CreateStandardChallengePayload","text":"<p>             Bases: <code>CreateBaseChallengePayload</code></p> <p>Represents the payload for creating a standard challenge in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> required <code>value</code> <code>int</code> <p>The value of the challenge</p> required <code>type</code> <code>Literal[STANDARD]</code> <p>The type of the challenge</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> <code>value</code> <code>int</code> <p>The value of the challenge</p> <code>type</code> <code>Literal[STANDARD]</code> <p>The type of the challenge</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class CreateStandardChallengePayload(CreateBaseChallengePayload):\n    \"\"\"\n    Represents the payload for creating a standard challenge in CTFd.\n\n    Parameters\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    value : int\n        The value of the challenge\n    type : Literal[ChallengeType.STANDARD]\n        The type of the challenge\n\n    Attributes\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    value : int\n        The value of the challenge\n    type : Literal[ChallengeType.STANDARD]\n        The type of the challenge\n    \"\"\"\n\n    value: int\n    type: Literal[ChallengeType.STANDARD] = ChallengeType.STANDARD\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.CreateDynamicChallengePayload","title":"CreateDynamicChallengePayload","text":"<p>             Bases: <code>CreateBaseChallengePayload</code></p> <p>Represents the payload for creating a dynamic challenge in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> required <code>initial</code> <code>int</code> <p>The initial value of the challenge</p> required <code>decay</code> <code>int</code> <p>The decay value of the challenge</p> required <code>minimum</code> <code>int</code> <p>The minimum value of the challenge</p> required <code>function</code> <code>DecayFunction</code> <p>The decay function of the challenge</p> required <code>type</code> <code>Literal[DYNAMIC]</code> <p>The type of the challenge</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> <code>initial</code> <code>int</code> <p>The initial value of the challenge</p> <code>decay</code> <code>int</code> <p>The decay value of the challenge</p> <code>minimum</code> <code>int</code> <p>The minimum value of the challenge</p> <code>function</code> <code>DecayFunction</code> <p>The decay function of the challenge</p> <code>type</code> <code>Literal[DYNAMIC]</code> <p>The type of the challenge</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class CreateDynamicChallengePayload(CreateBaseChallengePayload):\n    \"\"\"\n    Represents the payload for creating a dynamic challenge in CTFd.\n\n    Parameters\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    initial : int\n        The initial value of the challenge\n    decay : int\n        The decay value of the challenge\n    minimum : int\n        The minimum value of the challenge\n    function : DecayFunction\n        The decay function of the challenge\n    type : Literal[ChallengeType.DYNAMIC]\n        The type of the challenge\n\n    Attributes\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    initial : int\n        The initial value of the challenge\n    decay : int\n        The decay value of the challenge\n    minimum : int\n        The minimum value of the challenge\n    function : DecayFunction\n        The decay function of the challenge\n    type : Literal[ChallengeType.DYNAMIC]\n        The type of the challenge\n    \"\"\"\n\n    initial: int\n    decay: int\n    minimum: int\n    function: DecayFunction\n    type: Literal[ChallengeType.DYNAMIC] = ChallengeType.DYNAMIC\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.UpdateBaseChallengePayload","title":"UpdateBaseChallengePayload","text":"<p>             Bases: <code>UpdatePayloadModel</code></p> <p>The base class for challenge update payloads in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class UpdateBaseChallengePayload(UpdatePayloadModel):\n    \"\"\"\n    The base class for challenge update payloads in CTFd.\n\n    Parameters\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n\n    Attributes\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    \"\"\"\n\n    name: str = MISSING\n    description: str = MISSING\n    category: str = MISSING\n    state: ChallengeState = MISSING\n\n    connection_info: str | None = MISSING\n    next_id: int | None = MISSING\n    max_attempts: int | None = MISSING\n\n    requirements: ChallengeRequirementsDict | None = MISSING\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.UpdateStandardChallengePayload","title":"UpdateStandardChallengePayload","text":"<p>             Bases: <code>UpdateBaseChallengePayload</code></p> <p>Represents a standard challenge update payload in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> required <code>value</code> <code>int</code> <p>The value of the challenge</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> <code>value</code> <code>int</code> <p>The value of the challenge</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class UpdateStandardChallengePayload(UpdateBaseChallengePayload):\n    \"\"\"\n    Represents a standard challenge update payload in CTFd.\n\n    Parameters\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    value : int\n        The value of the challenge\n\n    Attributes\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    value : int\n        The value of the challenge\n    \"\"\"\n\n    value: int = MISSING\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.UpdateDynamicChallengePayload","title":"UpdateDynamicChallengePayload","text":"<p>             Bases: <code>UpdateBaseChallengePayload</code></p> <p>Represents a dynamic challenge update payload in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the challenge</p> required <code>description</code> <code>str</code> <p>The description of the challenge</p> required <code>category</code> <code>str</code> <p>The category of the challenge</p> required <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> required <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> required <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> required <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> required <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> required <code>initial</code> <code>int</code> <p>The initial value of the challenge</p> required <code>decay</code> <code>int</code> <p>The decay value of the challenge</p> required <code>minimum</code> <code>int</code> <p>The minimum value of the challenge</p> required <code>function</code> <code>DecayFunction</code> <p>The decay function of the challenge</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the challenge</p> <code>description</code> <code>str</code> <p>The description of the challenge</p> <code>category</code> <code>str</code> <p>The category of the challenge</p> <code>state</code> <code>ChallengeState</code> <p>The state of the challenge</p> <code>connection_info</code> <code>str | None</code> <p>The connection information of the challenge</p> <code>next_id</code> <code>int | None</code> <p>The ID of the next challenge</p> <code>max_attempts</code> <code>int | None</code> <p>The maximum number of attempts for the challenge</p> <code>requirements</code> <code>ChallengeRequirementsDict | None</code> <p>The requirements of the challenge</p> <code>initial</code> <code>int</code> <p>The initial value of the challenge</p> <code>decay</code> <code>int</code> <p>The decay value of the challenge</p> <code>minimum</code> <code>int</code> <p>The minimum value of the challenge</p> <code>function</code> <code>DecayFunction</code> <p>The decay function of the challenge</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class UpdateDynamicChallengePayload(UpdateBaseChallengePayload):\n    \"\"\"\n    Represents a dynamic challenge update payload in CTFd.\n\n    Parameters\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    initial : int\n        The initial value of the challenge\n    decay : int\n        The decay value of the challenge\n    minimum : int\n        The minimum value of the challenge\n    function : DecayFunction\n        The decay function of the challenge\n\n    Attributes\n    ----------\n    name : str\n        The name of the challenge\n    description : str\n        The description of the challenge\n    category : str\n        The category of the challenge\n    state : ChallengeState\n        The state of the challenge\n    connection_info : str | None\n        The connection information of the challenge\n    next_id : int | None\n        The ID of the next challenge\n    max_attempts : int | None\n        The maximum number of attempts for the challenge\n    requirements : ChallengeRequirementsDict | None\n        The requirements of the challenge\n    initial : int\n        The initial value of the challenge\n    decay : int\n        The decay value of the challenge\n    minimum : int\n        The minimum value of the challenge\n    function : DecayFunction\n        The decay function of the challenge\n    \"\"\"\n\n    initial: int = MISSING\n    decay: int = MISSING\n    minimum: int = MISSING\n    function: DecayFunction = MISSING\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.ChallengeAttemptResult","title":"ChallengeAttemptResult","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a challenge attempt result in CTFd.</p> <p>This is returned by the <code>POST /challenges/attempts</code> endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>Literal['correct', 'incorrect', 'authentication_required', 'paused', 'ratelimited', 'already_solved']</code> <p>The status of the attempt</p> required <code>message</code> <code>str</code> <p>The message of the attempt</p> required <p>Attributes:</p> Name Type Description <code>status</code> <code>Literal['correct', 'incorrect', 'authentication_required', 'paused', 'ratelimited', 'already_solved']</code> <p>The status of the attempt</p> <code>message</code> <code>str</code> <p>The message of the attempt</p> Properties <p>is_correct : bool     Whether the attempt is correct</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class ChallengeAttemptResult(ResponseModel):\n    \"\"\"\n    Represents a challenge attempt result in CTFd.\n\n    This is returned by the `POST /challenges/attempts` endpoint.\n\n    Parameters\n    ----------\n    status : Literal[\"correct\", \"incorrect\", \"authentication_required\", \"paused\", \"ratelimited\", \"already_solved\"]\n        The status of the attempt\n    message : str\n        The message of the attempt\n\n    Attributes\n    ----------\n    status : Literal[\"correct\", \"incorrect\", \"authentication_required\", \"paused\", \"ratelimited\", \"already_solved\"]\n        The status of the attempt\n    message : str\n        The message of the attempt\n\n    Properties\n    ----------\n    is_correct : bool\n        Whether the attempt is correct\n    \"\"\"\n\n    status: Literal[\n        \"correct\",\n        \"incorrect\",\n        \"authentication_required\",\n        \"paused\",\n        \"ratelimited\",\n        \"already_solved\",\n    ]\n    message: str\n\n    @property\n    def is_correct(self) -&gt; bool:\n        return self.status == \"correct\"\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.ChallengeTypeInfo","title":"ChallengeTypeInfo","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents the information of a challenge type in CTFd.</p> <p>This is returned by the <code>GET /challenges/types</code> endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>ChallengeType</code> <p>The ID of the challenge type</p> required <code>name</code> <code>ChallengeType</code> <p>The name of the challenge type</p> required <code>templates</code> <code>ChallengeTypeTemplatesDict</code> <p>The templates of the challenge type</p> required <code>scripts</code> <code>ChallengeTypeScriptsDict</code> <p>The scripts of the challenge type</p> required <code>create</code> <code>str</code> <p>The HTML template for the form to create a challenge of the type</p> required Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class ChallengeTypeInfo(ResponseModel):\n    \"\"\"\n    Represents the information of a challenge type in CTFd.\n\n    This is returned by the `GET /challenges/types` endpoint.\n\n    Parameters\n    ----------\n    id : ChallengeType\n        The ID of the challenge type\n    name : ChallengeType\n        The name of the challenge type\n    templates : ChallengeTypeTemplatesDict\n        The templates of the challenge type\n    scripts : ChallengeTypeScriptsDict\n        The scripts of the challenge type\n    create : str\n        The HTML template for the form to create a challenge of the type\n    \"\"\"\n\n    id: ChallengeType\n    name: ChallengeType\n    templates: ChallengeTypeTemplatesDict\n    scripts: ChallengeTypeScriptsDict\n    create: str\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.ChallengeFileLocation","title":"ChallengeFileLocation","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a location of a challenge file in CTFd.</p> <p>This is returned by the <code>GET /challenges/&lt;int:challenge_id&gt;/files</code> endpoint.</p> <p>Not to be confused with the <code>ChallengeFile</code> model.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the file location</p> required <code>type</code> <code>Literal[CHALLENGE]</code> <p>The type of the file location</p> required <code>location</code> <code>str</code> <p>The URL path to the file</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the file location, read-only</p> <code>type</code> <code>Literal[CHALLENGE]</code> <p>The type of the file location</p> <code>location</code> <code>str</code> <p>The URL path to the file</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class ChallengeFileLocation(ResponseModel):\n    \"\"\"\n    Represents a location of a challenge file in CTFd.\n\n    This is returned by the `GET /challenges/&lt;int:challenge_id&gt;/files` endpoint.\n\n    Not to be confused with the `ChallengeFile` model.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the file location\n    type : Literal[FileType.CHALLENGE]\n        The type of the file location\n    location : str\n        The URL path to the file\n\n    Attributes\n    ----------\n    id : int\n        The ID of the file location, read-only\n    type : Literal[FileType.CHALLENGE]\n        The type of the file location\n    location : str\n        The URL path to the file\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    type: Literal[FileType.CHALLENGE]\n    location: str\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.ChallengeRequirements","title":"ChallengeRequirements","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents the requirements of a challenge in CTFd.</p> <p>This is returned by the <code>GET /challenges/&lt;int:challenge_id&gt;/requirements</code> endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>prerequisites</code> <code>list[int]</code> <p>The IDs of the prerequisites of the challenge</p> required <code>anonymize</code> <code>bool</code> <p>Whether the challenge is anonymized</p> required <p>Attributes:</p> Name Type Description <code>prerequisites</code> <code>list[int]</code> <p>The IDs of the prerequisites of the challenge</p> <code>anonymize</code> <code>bool</code> <p>Whether the challenge is anonymized</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class ChallengeRequirements(ResponseModel):\n    \"\"\"\n    Represents the requirements of a challenge in CTFd.\n\n    This is returned by the `GET /challenges/&lt;int:challenge_id&gt;/requirements` endpoint.\n\n    Parameters\n    ----------\n    prerequisites : list[int]\n        The IDs of the prerequisites of the challenge\n    anonymize : bool\n        Whether the challenge is anonymized\n\n    Attributes\n    ----------\n    prerequisites : list[int]\n        The IDs of the prerequisites of the challenge\n    anonymize : bool\n        Whether the challenge is anonymized\n    \"\"\"\n\n    prerequisites: list[int]\n    anonymize: bool\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.ChallengeSolve","title":"ChallengeSolve","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a challenge solve in CTFd.</p> <p>This is returned by the <code>GET /challenges/&lt;int:challenge_id&gt;/solves</code> endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>The ID of the account that solved the challenge</p> required <code>name</code> <code>str</code> <p>The name of the account that solved the challenge</p> required <code>date</code> <code>datetime</code> <p>The date the challenge was solved</p> required <code>account_url</code> <code>str</code> <p>The URL path to the account that solved the challenge</p> required <p>Attributes:</p> Name Type Description <code>account_id</code> <code>int</code> <p>The ID of the account that solved the challenge</p> <code>name</code> <code>str</code> <p>The name of the account that solved the challenge</p> <code>date</code> <code>datetime</code> <p>The date the challenge was solved</p> <code>account_url</code> <code>str</code> <p>The URL path to the account that solved the challenge</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class ChallengeSolve(ResponseModel):\n    \"\"\"\n    Represents a challenge solve in CTFd.\n\n    This is returned by the `GET /challenges/&lt;int:challenge_id&gt;/solves` endpoint.\n\n    Parameters\n    ----------\n    account_id : int\n        The ID of the account that solved the challenge\n    name : str\n        The name of the account that solved the challenge\n    date : datetime\n        The date the challenge was solved\n    account_url : str\n        The URL path to the account that solved the challenge\n\n    Attributes\n    ----------\n    account_id : int\n        The ID of the account that solved the challenge\n    name : str\n        The name of the account that solved the challenge\n    date : datetime\n        The date the challenge was solved\n    account_url : str\n        The URL path to the account that solved the challenge\n    \"\"\"\n\n    account_id: int\n    name: str\n    date: datetime\n    account_url: str\n</code></pre>"},{"location":"ctfdpy/models/challenges/#ctfdpy.models.challenges.ChallengeTopic","title":"ChallengeTopic","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a challenge topic in CTFd.</p> <p>This is returned by the <code>GET /challenges/&lt;int:challenge_id&gt;/topics</code> endpoint.</p> <p>This model is similar to <code>ChallengeTopicReference</code> but includes the topic value.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge topic</p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge</p> required <code>topic_id</code> <code>int</code> <p>The ID of the topic</p> required <code>value</code> <code>str</code> <p>The value of the topic</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge topic, read-only</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge</p> <code>topic_id</code> <code>int</code> <p>The ID of the topic</p> <code>value</code> <code>str</code> <p>The value of the topic</p> Source code in <code>ctfdpy\\models\\challenges.py</code> <pre><code>class ChallengeTopic(ResponseModel):\n    \"\"\"\n    Represents a challenge topic in CTFd.\n\n    This is returned by the `GET /challenges/&lt;int:challenge_id&gt;/topics` endpoint.\n\n    This model is similar to `ChallengeTopicReference` but includes the topic value.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge topic\n    challenge_id : int\n        The ID of the challenge\n    topic_id : int\n        The ID of the topic\n    value : str\n        The value of the topic\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge topic, read-only\n    challenge_id : int\n        The ID of the challenge\n    topic_id : int\n        The ID of the topic\n    value : str\n        The value of the topic\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    challenge_id: int = Field(\n        validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n    topic_id: int = Field(validation_alias=AliasChoices(\"topic_id\", \"topic\"))\n    value: str\n</code></pre>"},{"location":"ctfdpy/models/files/","title":"Files","text":""},{"location":"ctfdpy/models/files/#ctfdpy.models.files.BaseFile","title":"BaseFile","text":"<p>             Bases: <code>ResponseModel</code></p> <p>A base file model. Not meant to be instantiated directly.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the file</p> required <code>type</code> <code>FileType</code> <p>The type of the file</p> required <code>location</code> <code>str</code> <p>The location of the file</p> required <code>sha1sum</code> <code>str</code> <p>The SHA-1 checksum of the file</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the file</p> <code>type</code> <code>FileType</code> <p>The type of the file</p> <code>location</code> <code>str</code> <p>The location of the file</p> <code>sha1sum</code> <code>str</code> <p>The SHA-1 checksum of the file</p> Source code in <code>ctfdpy\\models\\files.py</code> <pre><code>class BaseFile(ResponseModel):\n    \"\"\"\n    A base file model. Not meant to be instantiated directly.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the file\n    type : FileType\n        The type of the file\n    location : str\n        The location of the file\n    sha1sum : str\n        The SHA-1 checksum of the file\n\n    Attributes\n    ----------\n    id : int\n        The ID of the file\n    type : FileType\n        The type of the file\n    location : str\n        The location of the file\n    sha1sum : str\n        The SHA-1 checksum of the file\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    type: FileType\n    location: str\n    sha1sum: str\n</code></pre>"},{"location":"ctfdpy/models/files/#ctfdpy.models.files.StandardFile","title":"StandardFile","text":"<p>             Bases: <code>BaseFile</code></p> <p>Represents a standard file in CTFd.</p> <p>This model cannot be edited since there is no endpoint to update files in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the file</p> required <code>type</code> <code>Literal[STANDARD]</code> <p>The type of the file. This should always be <code>\"standard\"</code></p> required <code>location</code> <code>str</code> <p>The location of the file</p> required <code>sha1sum</code> <code>str</code> <p>The SHA-1 checksum of the file</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the file</p> <code>type</code> <code>Literal[STANDARD]</code> <p>The type of the file. This should always be <code>\"standard\"</code></p> <code>location</code> <code>str</code> <p>The location of the file</p> <code>sha1sum</code> <code>str</code> <p>The SHA-1 checksum of the file</p> Source code in <code>ctfdpy\\models\\files.py</code> <pre><code>class StandardFile(BaseFile):\n    \"\"\"\n    Represents a standard file in CTFd.\n\n    This model cannot be edited since there is no endpoint to update files in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the file\n    type : Literal[FileType.STANDARD]\n        The type of the file. This should always be `\"standard\"`\n    location : str\n        The location of the file\n    sha1sum : str\n        The SHA-1 checksum of the file\n\n    Attributes\n    ----------\n    id : int\n        The ID of the file\n    type : Literal[FileType.STANDARD]\n        The type of the file. This should always be `\"standard\"`\n    location : str\n        The location of the file\n    sha1sum : str\n        The SHA-1 checksum of the file\n    \"\"\"\n\n    type: Literal[FileType.STANDARD]\n</code></pre>"},{"location":"ctfdpy/models/files/#ctfdpy.models.files.ChallengeFile","title":"ChallengeFile","text":"<p>             Bases: <code>BaseFile</code></p> <p>Represents a challenge file in CTFd.</p> <p>This model cannot be edited since there is no endpoint to update files in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the file</p> required <code>type</code> <code>Literal[CHALLENGE]</code> <p>The type of the file. This should always be <code>\"challenge\"</code></p> required <code>location</code> <code>str</code> <p>The location of the file</p> required <code>sha1sum</code> <code>str</code> <p>The SHA-1 checksum of the file</p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the file</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the file</p> <code>type</code> <code>Literal[CHALLENGE]</code> <p>The type of the file. This should always be <code>\"challenge\"</code></p> <code>location</code> <code>str</code> <p>The location of the file</p> <code>sha1sum</code> <code>str</code> <p>The SHA-1 checksum of the file</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the file</p> Source code in <code>ctfdpy\\models\\files.py</code> <pre><code>class ChallengeFile(BaseFile):\n    \"\"\"\n    Represents a challenge file in CTFd.\n\n    This model cannot be edited since there is no endpoint to update files in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the file\n    type : Literal[FileType.CHALLENGE]\n        The type of the file. This should always be `\"challenge\"`\n    location : str\n        The location of the file\n    sha1sum : str\n        The SHA-1 checksum of the file\n    challenge_id : int\n        The ID of the challenge associated with the file\n    challenge : int\n        Alias for `challenge_id`\n\n    Attributes\n    ----------\n    id : int\n        The ID of the file\n    type : Literal[FileType.CHALLENGE]\n        The type of the file. This should always be `\"challenge\"`\n    location : str\n        The location of the file\n    sha1sum : str\n        The SHA-1 checksum of the file\n    challenge_id : int\n        The ID of the challenge associated with the file\n    \"\"\"\n\n    type: Literal[FileType.CHALLENGE]\n    challenge_id: int = Field(\n        validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n</code></pre>"},{"location":"ctfdpy/models/files/#ctfdpy.models.files.PageFile","title":"PageFile","text":"<p>             Bases: <code>BaseFile</code></p> <p>Represents a page file in CTFd.</p> <p>This model cannot be edited since there is no endpoint to update files in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the file</p> required <code>type</code> <code>Literal[PAGE]</code> <p>The type of the file. This should always be <code>\"page\"</code></p> required <code>location</code> <code>str</code> <p>The location of the file</p> required <code>sha1sum</code> <code>str</code> <p>The SHA-1 checksum of the file</p> required <code>page_id</code> <code>int</code> <p>The ID of the page associated with the file</p> required <code>page</code> <code>int</code> <p>Alias for <code>page_id</code></p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the file</p> <code>type</code> <code>Literal[PAGE]</code> <p>The type of the file. This should always be <code>\"page\"</code></p> <code>location</code> <code>str</code> <p>The location of the file</p> <code>sha1sum</code> <code>str</code> <p>The SHA-1 checksum of the file</p> <code>page_id</code> <code>int</code> <p>The ID of the page associated with the file</p> Source code in <code>ctfdpy\\models\\files.py</code> <pre><code>class PageFile(BaseFile):\n    \"\"\"\n    Represents a page file in CTFd.\n\n    This model cannot be edited since there is no endpoint to update files in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the file\n    type : Literal[FileType.PAGE]\n        The type of the file. This should always be `\"page\"`\n    location : str\n        The location of the file\n    sha1sum : str\n        The SHA-1 checksum of the file\n    page_id : int\n        The ID of the page associated with the file\n    page : int\n        Alias for `page_id`\n\n    Attributes\n    ----------\n    id : int\n        The ID of the file\n    type : Literal[FileType.PAGE]\n        The type of the file. This should always be `\"page\"`\n    location : str\n        The location of the file\n    sha1sum : str\n        The SHA-1 checksum of the file\n    page_id : int\n        The ID of the page associated with the file\n    \"\"\"\n\n    type: Literal[FileType.PAGE]\n    page_id: int = Field(validation_alias=AliasChoices(\"page_id\", \"page\"))\n</code></pre>"},{"location":"ctfdpy/models/files/#ctfdpy.models.files.CreateFilePayload","title":"CreateFilePayload","text":"<p>             Bases: <code>CreatePayloadModel</code></p> <p>Payload to create files in CTFd</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>list[MultipartFileTypes]</code> <p>The files to create</p> required <code>type</code> <code>FileType</code> <p>The type of the files</p> required <code>challenge_id</code> <code>int | None</code> <p>The ID of the challenge associated with the files. Required if <code>type</code> is <code>\"challenge\"</code></p> required <code>challenge</code> <code>int | None</code> <p>Alias for <code>challenge_id</code></p> required <code>page_id</code> <code>int | None</code> <p>The ID of the page associated with the files. Required if <code>type</code> is <code>\"page\"</code></p> required <code>page</code> <code>int | None</code> <p>Alias for <code>page_id</code></p> required <code>location</code> <code>str | None</code> <p>The location to upload the files to. Cannot be specified if multiple files are provided</p> required <p>Attributes:</p> Name Type Description <code>files</code> <code>list[MultipartFileTypes]</code> <p>The files to create</p> <code>type</code> <code>FileType</code> <p>The type of the files</p> <code>challenge_id</code> <code>int | None</code> <p>The ID of the challenge associated with the files. Required if <code>type</code> is <code>\"challenge\"</code></p> <code>page_id</code> <code>int | None</code> <p>The ID of the page associated with the files. Required if <code>type</code> is <code>\"page\"</code></p> <code>location</code> <code>str | None</code> <p>The location to upload the files to. Cannot be specified if multiple files are provided</p> Source code in <code>ctfdpy\\models\\files.py</code> <pre><code>class CreateFilePayload(CreatePayloadModel, arbitrary_types_allowed=True):\n    \"\"\"\n    Payload to create files in CTFd\n\n    Parameters\n    ----------\n    files : list[MultipartFileTypes]\n        The files to create\n    type : FileType\n        The type of the files\n    challenge_id : int | None\n        The ID of the challenge associated with the files. Required if `type` is `\"challenge\"`\n    challenge : int | None\n        Alias for `challenge_id`\n    page_id : int | None\n        The ID of the page associated with the files. Required if `type` is `\"page\"`\n    page : int | None\n        Alias for `page_id`\n    location : str | None\n        The location to upload the files to. Cannot be specified if multiple files are provided\n\n    Attributes\n    ----------\n    files : list[MultipartFileTypes]\n        The files to create\n    type : FileType\n        The type of the files\n    challenge_id : int | None\n        The ID of the challenge associated with the files. Required if `type` is `\"challenge\"`\n    page_id : int | None\n        The ID of the page associated with the files. Required if `type` is `\"page\"`\n    location : str | None\n        The location to upload the files to. Cannot be specified if multiple files are provided\n    \"\"\"\n\n    files: list[MultipartFileTypes]  # this might be slow...\n    type: FileType = FileType.STANDARD\n    challenge_id: int | None = Field(\n        None, validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n    page_id: int | None = Field(None, validate_alias=AliasChoices(\"page_id\", \"page\"))\n    location: str | None = Field(None)\n\n    @model_serializer()\n    def _model_ser(self) -&gt; CreateFilePayloadDict:\n        data = {\"type\": self.type}\n        if self.challenge_id is not None:\n            data[\"challenge_id\"] = self.challenge_id\n        if self.page_id is not None:\n            data[\"page_id\"] = self.page_id\n        if self.location is not None:\n            data[\"location\"] = self.location\n\n        return {\"files\": [(\"file\", file) for file in self.files], \"data\": data}\n\n    if TYPE_CHECKING:\n        # Ensure type checkers see the correct return type\n        def model_dump(\n            self,\n            *,\n            mode: Literal[\"json\", \"python\"] | str = \"python\",\n            include: Any = None,\n            exclude: Any = None,\n            by_alias: bool = False,\n            exclude_unset: bool = False,\n            exclude_defaults: bool = False,\n            exclude_none: bool = False,\n            round_trip: bool = False,\n            warnings: bool = True,\n        ) -&gt; CreateFilePayloadDict: ...\n\n    @model_validator(mode=\"after\")\n    def check_file_type(self) -&gt; CreateFilePayload:\n        match self.type:\n            case FileType.STANDARD:\n                if self.challenge_id is not None or self.page_id is not None:\n                    raise ValueError(\n                        \"Challenge ID and page ID must be None for standard files\"\n                    )\n            case FileType.CHALLENGE:\n                if self.challenge_id is None:\n                    raise ValueError(\n                        \"Challenge ID must be provided for challenge files\"\n                    )\n                if self.page_id is not None:\n                    raise ValueError(\"Page ID must be None for challenge files\")\n            case FileType.PAGE:\n                if self.page_id is None:\n                    raise ValueError(\"Page ID must be provided for page files\")\n                if self.challenge_id is not None:\n                    raise ValueError(\"Challenge ID must be None for page files\")\n        return self\n\n    @model_validator(mode=\"after\")\n    def check_file_count(self) -&gt; CreateFilePayload:\n        if len(self.files) == 0:\n            raise ValueError(\"At least one file must be provided\")\n        elif len(self.files) &gt; 1 and self.location is not None:\n            raise ValueError(\n                \"Location cannot be specified when multiple files are provided\"\n            )\n        return self\n</code></pre>"},{"location":"ctfdpy/models/flags/","title":"Flags","text":""},{"location":"ctfdpy/models/flags/#ctfdpy.models.flags.Flag","title":"Flag","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a flag in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the flag</p> required <code>type</code> <code>FlagType</code> <p>The type of the flag</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge the flag is associated with</p> required <code>content</code> <code>str</code> <p>The content of the flag</p> required <code>data</code> <code>str</code> <p>Additional data for the flag, currently only supports <code>\"case_insensitive\"</code></p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the flag, read-only</p> <code>type</code> <code>FlagType</code> <p>The type of the flag</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge the flag is associated with</p> <code>content</code> <code>str</code> <p>The content of the flag</p> <code>data</code> <code>str</code> <p>Additional data for the flag, currently only supports <code>\"case_insensitive\"</code></p> Properties <p>is_case_insensitive : bool     Whether the flag is case-insensitive or not</p> Source code in <code>ctfdpy\\models\\flags.py</code> <pre><code>class Flag(ResponseModel):\n    \"\"\"\n    Represents a flag in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the flag\n    type : FlagType\n        The type of the flag\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge the flag is associated with\n    content : str\n        The content of the flag\n    data : str\n        Additional data for the flag, currently only supports `\"case_insensitive\"`\n\n    Attributes\n    ----------\n    id : int\n        The ID of the flag, read-only\n    type : FlagType\n        The type of the flag\n    challenge_id : int\n        The ID of the challenge the flag is associated with\n    content : str\n        The content of the flag\n    data : str\n        Additional data for the flag, currently only supports `\"case_insensitive\"`\n\n    Properties\n    ----------\n    is_case_insensitive : bool\n        Whether the flag is case-insensitive or not\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    type: FlagType\n    challenge_id: int = Field(\n        validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n    content: str\n    data: Literal[\"case_insensitive\", \"\"]\n    templates: FlagTypeTemplatesDict | None = Field(None, exclude=True)\n\n    @property\n    def is_case_insensitive(self) -&gt; bool:\n        return self.data == \"case_insensitive\"\n\n    def to_update_payload(self) -&gt; UpdateFlagPayload:\n        \"\"\"\n        Converts the flag to a payload for updating flags.\n\n        Returns\n        -------\n        UpdateFlagPayload\n            The payload for updating flags\n        \"\"\"\n        return UpdateFlagPayload.model_validate(self, from_attributes=True)\n</code></pre>"},{"location":"ctfdpy/models/flags/#ctfdpy.models.flags.Flag.to_update_payload","title":"to_update_payload","text":"<pre><code>to_update_payload() -&gt; UpdateFlagPayload\n</code></pre> <p>Converts the flag to a payload for updating flags.</p> <p>Returns:</p> Type Description <code>UpdateFlagPayload</code> <p>The payload for updating flags</p> Source code in <code>ctfdpy\\models\\flags.py</code> <pre><code>def to_update_payload(self) -&gt; UpdateFlagPayload:\n    \"\"\"\n    Converts the flag to a payload for updating flags.\n\n    Returns\n    -------\n    UpdateFlagPayload\n        The payload for updating flags\n    \"\"\"\n    return UpdateFlagPayload.model_validate(self, from_attributes=True)\n</code></pre>"},{"location":"ctfdpy/models/flags/#ctfdpy.models.flags.FlagTypeInfo","title":"FlagTypeInfo","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Information about the flag type.</p> <p>This is used internally by CTFd to create the UI modals for creating and updating flags.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the flag type</p> required <code>templates</code> <code>FlagTypeTemplatesDict</code> <p>The templates for the flag type</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the flag type</p> <code>templates</code> <code>FlagTypeTemplatesDict</code> <p>The templates for the flag type</p> Source code in <code>ctfdpy\\models\\flags.py</code> <pre><code>class FlagTypeInfo(ResponseModel):\n    \"\"\"\n    Information about the flag type.\n\n    This is used internally by CTFd to create the UI modals for creating\n    and updating flags.\n\n    Parameters\n    ----------\n    name : str\n        The name of the flag type\n    templates : FlagTypeTemplatesDict\n        The templates for the flag type\n\n    Attributes\n    ----------\n    name : str\n        The name of the flag type\n    templates : FlagTypeTemplatesDict\n        The templates for the flag type\n    \"\"\"\n\n    name: str\n    templates: FlagTypeTemplatesDict\n</code></pre>"},{"location":"ctfdpy/models/flags/#ctfdpy.models.flags.CreateFlagPayload","title":"CreateFlagPayload","text":"<p>             Bases: <code>CreatePayloadModel</code></p> <p>Payload to create a flag in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>FlagType</code> <p>The type of the flag</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge the flag is associated with</p> required <code>content</code> <code>str</code> <p>The content of the flag</p> required <code>data</code> <code>Literal['case_insensitive', '']</code> <p>Additional data for the flag, currently only supports <code>\"case_insensitive\"</code></p> required Source code in <code>ctfdpy\\models\\flags.py</code> <pre><code>class CreateFlagPayload(CreatePayloadModel):\n    \"\"\"\n    Payload to create a flag in CTFd.\n\n    Parameters\n    ----------\n    type : FlagType\n        The type of the flag\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge the flag is associated with\n    content : str\n        The content of the flag\n    data : Literal[\"case_insensitive\", \"\"]\n        Additional data for the flag, currently only supports `\"case_insensitive\"`\n    \"\"\"\n\n    type: FlagType\n    challenge_id: int = Field(\n        validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n    content: str\n    data: Literal[\"case_insensitive\", \"\"]\n</code></pre>"},{"location":"ctfdpy/models/flags/#ctfdpy.models.flags.UpdateFlagPayload","title":"UpdateFlagPayload","text":"<p>             Bases: <code>UpdatePayloadModel</code></p> <p>Payload to update a flag in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>FlagType</code> <p>The type of the flag</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge the flag is associated with</p> required <code>content</code> <code>str</code> <p>The content of the flag</p> required <code>data</code> <code>Literal['case_insensitive', '']</code> <p>Additional data for the flag, currently only supports <code>\"case_insensitive\"</code></p> required <p>Attributes:</p> Name Type Description <code>type</code> <code>FlagType</code> <p>The type of the flag</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge the flag is associated with</p> <code>content</code> <code>str</code> <p>The content of the flag</p> <code>data</code> <code>Literal['case_insensitive', '']</code> <p>Additional data for the flag, currently only supports <code>\"case_insensitive\"</code></p> Source code in <code>ctfdpy\\models\\flags.py</code> <pre><code>class UpdateFlagPayload(UpdatePayloadModel):\n    \"\"\"\n    Payload to update a flag in CTFd.\n\n    Parameters\n    ----------\n    type : FlagType\n        The type of the flag\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge the flag is associated with\n    content : str\n        The content of the flag\n    data : Literal[\"case_insensitive\", \"\"]\n        Additional data for the flag, currently only supports `\"case_insensitive\"`\n\n    Attributes\n    ----------\n    type : FlagType\n        The type of the flag\n    challenge_id : int\n        The ID of the challenge the flag is associated with\n    content : str\n        The content of the flag\n    data : Literal[\"case_insensitive\", \"\"]\n        Additional data for the flag, currently only supports `\"case_insensitive\"`\n    \"\"\"\n\n    type: FlagType = MISSING\n    challenge_id: int = Field(\n        MISSING, validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n    content: str = MISSING\n    data: Literal[\"case_insensitive\", \"\"] = MISSING\n</code></pre>"},{"location":"ctfdpy/models/hints/","title":"Hints","text":""},{"location":"ctfdpy/models/hints/#ctfdpy.models.hints.BaseHint","title":"BaseHint","text":"<p>             Bases: <code>ResponseModel</code></p> <p>A base hint model. Not meant to be instantiated directly.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the hint</p> required <code>type</code> <code>HintType</code> <p>The type of the hint</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> required <code>cost</code> <code>int</code> <p>The cost of the hint</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the hint, read-only</p> <code>type</code> <code>HintType</code> <p>The type of the hint</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> <code>cost</code> <code>int</code> <p>The cost of the hint</p> Source code in <code>ctfdpy\\models\\hints.py</code> <pre><code>class BaseHint(ResponseModel):\n    \"\"\"\n    A base hint model. Not meant to be instantiated directly.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the hint\n    type : HintType\n        The type of the hint\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    cost : int\n        The cost of the hint\n\n    Attributes\n    ----------\n    id : int\n        The ID of the hint, read-only\n    type : HintType\n        The type of the hint\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    cost : int\n        The cost of the hint\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    type: HintType\n    challenge_id: int = Field(\n        validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n    cost: int\n\n    def to_update_payload(self) -&gt; UpdateHintPayload:\n        \"\"\"\n        Converts the hint to a payload for updating hints.\n\n        Returns\n        -------\n        HintUpdatePayload\n            The payload for updating hints\n        \"\"\"\n        return UpdateHintPayload.model_validate(self, from_attributes=True)\n</code></pre>"},{"location":"ctfdpy/models/hints/#ctfdpy.models.hints.BaseHint.to_update_payload","title":"to_update_payload","text":"<pre><code>to_update_payload() -&gt; UpdateHintPayload\n</code></pre> <p>Converts the hint to a payload for updating hints.</p> <p>Returns:</p> Type Description <code>HintUpdatePayload</code> <p>The payload for updating hints</p> Source code in <code>ctfdpy\\models\\hints.py</code> <pre><code>def to_update_payload(self) -&gt; UpdateHintPayload:\n    \"\"\"\n    Converts the hint to a payload for updating hints.\n\n    Returns\n    -------\n    HintUpdatePayload\n        The payload for updating hints\n    \"\"\"\n    return UpdateHintPayload.model_validate(self, from_attributes=True)\n</code></pre>"},{"location":"ctfdpy/models/hints/#ctfdpy.models.hints.Hint","title":"Hint","text":"<p>             Bases: <code>BaseHint</code></p> <p>Represents a hint in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the hint</p> required <code>type</code> <code>HintType</code> <p>The type of the hint</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> required <code>content</code> <code>str</code> <p>The content of the hint</p> required <code>html</code> <code>str</code> <p>The HTML content of the hint</p> required <code>cost</code> <code>int</code> <p>The cost of the hint</p> required <code>requirements</code> <code>HintRequirementsDict | None</code> <p>The requirements of the hint</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the hint, read-only</p> <code>type</code> <code>HintType</code> <p>The type of the hint</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> <code>content</code> <code>str</code> <p>The content of the hint</p> <code>html</code> <code>str</code> <p>The HTML content of the hint, read-only</p> <code>cost</code> <code>int</code> <p>The cost of the hint</p> <code>requirements</code> <code>HintRequirementsDict | None</code> <p>The requirements of the hint</p> Source code in <code>ctfdpy\\models\\hints.py</code> <pre><code>class Hint(BaseHint):\n    \"\"\"\n    Represents a hint in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the hint\n    type : HintType\n        The type of the hint\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    content : str\n        The content of the hint\n    html : str\n        The HTML content of the hint\n    cost : int\n        The cost of the hint\n    requirements : HintRequirementsDict | None\n        The requirements of the hint\n\n    Attributes\n    ----------\n    id : int\n        The ID of the hint, read-only\n    type : HintType\n        The type of the hint\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    content : str\n        The content of the hint\n    html : str\n        The HTML content of the hint, read-only\n    cost : int\n        The cost of the hint\n    requirements : HintRequirementsDict | None\n        The requirements of the hint\n    \"\"\"\n\n    content: str\n    html: str = Field(frozen=True, exclude=True)\n    requirements: HintRequirementsDict | None = None\n</code></pre>"},{"location":"ctfdpy/models/hints/#ctfdpy.models.hints.LockedHint","title":"LockedHint","text":"<p>             Bases: <code>BaseHint</code></p> <p>Represents a locked hint in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the hint</p> required <code>type</code> <code>HintType</code> <p>The type of the hint</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> required <code>cost</code> <code>int</code> <p>The cost of the hint</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the hint, read-only</p> <code>type</code> <code>HintType</code> <p>The type of the hint</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> <code>cost</code> <code>int</code> <p>The cost of the hint</p> Source code in <code>ctfdpy\\models\\hints.py</code> <pre><code>class LockedHint(BaseHint):\n    \"\"\"\n    Represents a locked hint in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the hint\n    type : HintType\n        The type of the hint\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    cost : int\n        The cost of the hint\n\n    Attributes\n    ----------\n    id : int\n        The ID of the hint, read-only\n    type : HintType\n        The type of the hint\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    cost : int\n        The cost of the hint\n    \"\"\"\n</code></pre>"},{"location":"ctfdpy/models/hints/#ctfdpy.models.hints.UnlockedHint","title":"UnlockedHint","text":"<p>             Bases: <code>BaseHint</code></p> <p>Represents an unlocked hint in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the hint</p> required <code>type</code> <code>HintType</code> <p>The type of the hint</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> required <code>content</code> <code>str</code> <p>The content of the hint</p> required <code>html</code> <code>str</code> <p>The HTML content of the hint</p> required <code>cost</code> <code>int</code> <p>The cost of the hint</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the hint, read-only</p> <code>type</code> <code>HintType</code> <p>The type of the hint</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> <code>content</code> <code>str</code> <p>The content of the hint</p> <code>html</code> <code>str</code> <p>The HTML content of the hint, read-only</p> <code>cost</code> <code>int</code> <p>The cost of the hint</p> Source code in <code>ctfdpy\\models\\hints.py</code> <pre><code>class UnlockedHint(BaseHint):\n    \"\"\"\n    Represents an unlocked hint in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the hint\n    type : HintType\n        The type of the hint\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    content : str\n        The content of the hint\n    html : str\n        The HTML content of the hint\n    cost : int\n        The cost of the hint\n\n    Attributes\n    ----------\n    id : int\n        The ID of the hint, read-only\n    type : HintType\n        The type of the hint\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    content : str\n        The content of the hint\n    html : str\n        The HTML content of the hint, read-only\n    cost : int\n        The cost of the hint\n    \"\"\"\n\n    content: str\n    html: str = Field(frozen=True, exclude=True)\n</code></pre>"},{"location":"ctfdpy/models/hints/#ctfdpy.models.hints.CreateHintPayload","title":"CreateHintPayload","text":"<p>             Bases: <code>CreatePayloadModel</code></p> <p>Represents a hint create payload in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>HintType</code> <p>The type of the hint</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> required <code>cost</code> <code>int</code> <p>The cost of the hint</p> required <code>content</code> <code>str</code> <p>The content of the hint</p> required <code>requirements</code> <code>HintRequirementsDict | None</code> <p>The requirements of the hint</p> required Source code in <code>ctfdpy\\models\\hints.py</code> <pre><code>class CreateHintPayload(CreatePayloadModel):\n    \"\"\"\n    Represents a hint create payload in CTFd.\n\n    Parameters\n    ----------\n    type : HintType\n        The type of the hint\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    cost : int\n        The cost of the hint\n    content : str\n        The content of the hint\n    requirements : HintRequirementsDict | None\n        The requirements of the hint\n    \"\"\"\n\n    type: HintType\n    challenge_id: int = (\n        Field(validation_alias=AliasChoices(\"challenge_id\", \"challenge\")),\n    )\n    cost: int\n    content: str\n    requirements: HintRequirementsDict | None\n</code></pre>"},{"location":"ctfdpy/models/hints/#ctfdpy.models.hints.UpdateHintPayload","title":"UpdateHintPayload","text":"<p>             Bases: <code>UpdatePayloadModel</code></p> <p>Represents a hint update payload in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>HintType</code> <p>The type of the hint</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> required <code>cost</code> <code>int</code> <p>The cost of the hint</p> required <code>content</code> <code>str</code> <p>The content of the hint</p> required <code>requirements</code> <code>HintRequirementsDict | None</code> <p>The requirements of the hint. Specify <code>None</code> to remove the requirements</p> required <p>Attributes:</p> Name Type Description <code>type</code> <code>HintType</code> <p>The type of the hint</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the hint</p> <code>cost</code> <code>int</code> <p>The cost of the hint</p> <code>content</code> <code>str</code> <p>The content of the hint</p> <code>requirements</code> <code>HintRequirementsDict | None</code> <p>The requirements of the hint</p> Source code in <code>ctfdpy\\models\\hints.py</code> <pre><code>class UpdateHintPayload(UpdatePayloadModel):\n    \"\"\"\n    Represents a hint update payload in CTFd.\n\n    Parameters\n    ----------\n    type : HintType\n        The type of the hint\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    cost : int\n        The cost of the hint\n    content : str\n        The content of the hint\n    requirements : HintRequirementsDict | None\n        The requirements of the hint. Specify `None` to remove the requirements\n\n    Attributes\n    ----------\n    type : HintType\n        The type of the hint\n    challenge_id : int\n        The ID of the challenge associated with the hint\n    cost : int\n        The cost of the hint\n    content : str\n        The content of the hint\n    requirements : HintRequirementsDict | None\n        The requirements of the hint\n    \"\"\"\n\n    type: HintType = MISSING\n    challenge_id: int = Field(\n        MISSING, validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n    cost: int = MISSING\n    content: str = MISSING\n    requirements: HintRequirementsDict | None = MISSING\n</code></pre>"},{"location":"ctfdpy/models/model/","title":"Models","text":""},{"location":"ctfdpy/models/model/#ctfdpy.models.model.Model","title":"Model","text":"<p>             Bases: <code>BaseModel</code></p> <p>The base model for all models</p> <p>This class should not be instantiated directly</p> Source code in <code>ctfdpy\\models\\model.py</code> <pre><code>class Model(BaseModel):\n    \"\"\"\n    The base model for all models\n\n    This class should not be instantiated directly\n    \"\"\"\n\n    model_config = ConfigDict(\n        extra=\"allow\", use_enum_values=True, validate_assignment=True\n    )\n</code></pre>"},{"location":"ctfdpy/models/model/#ctfdpy.models.model.ResponseModel","title":"ResponseModel","text":"<p>             Bases: <code>Model</code></p> <p>The base model for all response models</p> <p>This class should not be instantiated directly</p> Source code in <code>ctfdpy\\models\\model.py</code> <pre><code>class ResponseModel(Model, frozen=True):\n    \"\"\"\n    The base model for all response models\n\n    This class should not be instantiated directly\n    \"\"\"\n</code></pre>"},{"location":"ctfdpy/models/model/#ctfdpy.models.model.CreatePayloadModel","title":"CreatePayloadModel","text":"<p>             Bases: <code>Model</code></p> <p>The base model for all create payload models</p> <p>This class should not be instantiated directly</p> Source code in <code>ctfdpy\\models\\model.py</code> <pre><code>class CreatePayloadModel(Model, extra=\"forbid\"):\n    \"\"\"\n    The base model for all create payload models\n\n    This class should not be instantiated directly\n    \"\"\"\n\n    def dump_json(self, **kwargs) -&gt; dict[str, Any]:\n        \"\"\"\n        Dumps the model in JSON format\n\n        Parameters\n        ----------\n        kwargs : dict[str, Any]\n            Additional keyword arguments to pass to the model dump\n\n        Returns\n        -------\n        dict[str, Any]\n            The payload\n        \"\"\"\n        return self.model_dump(mode=\"json\", exclude_unset=True, **kwargs)\n</code></pre>"},{"location":"ctfdpy/models/model/#ctfdpy.models.model.CreatePayloadModel.dump_json","title":"dump_json","text":"<pre><code>dump_json(**kwargs) -&gt; dict[str, Any]\n</code></pre> <p>Dumps the model in JSON format</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict[str, Any]</code> <p>Additional keyword arguments to pass to the model dump</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The payload</p> Source code in <code>ctfdpy\\models\\model.py</code> <pre><code>def dump_json(self, **kwargs) -&gt; dict[str, Any]:\n    \"\"\"\n    Dumps the model in JSON format\n\n    Parameters\n    ----------\n    kwargs : dict[str, Any]\n        Additional keyword arguments to pass to the model dump\n\n    Returns\n    -------\n    dict[str, Any]\n        The payload\n    \"\"\"\n    return self.model_dump(mode=\"json\", exclude_unset=True, **kwargs)\n</code></pre>"},{"location":"ctfdpy/models/model/#ctfdpy.models.model.UpdatePayloadModel","title":"UpdatePayloadModel","text":"<p>             Bases: <code>Model</code></p> <p>The base model for all update payload models</p> <p>This class should not be instantiated directly</p> Source code in <code>ctfdpy\\models\\model.py</code> <pre><code>class UpdatePayloadModel(Model, extra=\"forbid\"):\n    \"\"\"\n    The base model for all update payload models\n\n    This class should not be instantiated directly\n    \"\"\"\n\n    def dump_json(self, **kwargs) -&gt; dict[str, Any]:\n        \"\"\"\n        Dumps the model in JSON format\n\n        Parameters\n        ----------\n        kwargs : dict[str, Any]\n            Additional keyword arguments to pass to the model dump\n\n        Returns\n        -------\n        dict[str, Any]\n            The payload\n        \"\"\"\n        return self.model_dump(mode=\"json\", exclude_unset=True, **kwargs)\n</code></pre>"},{"location":"ctfdpy/models/model/#ctfdpy.models.model.UpdatePayloadModel.dump_json","title":"dump_json","text":"<pre><code>dump_json(**kwargs) -&gt; dict[str, Any]\n</code></pre> <p>Dumps the model in JSON format</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict[str, Any]</code> <p>Additional keyword arguments to pass to the model dump</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The payload</p> Source code in <code>ctfdpy\\models\\model.py</code> <pre><code>def dump_json(self, **kwargs) -&gt; dict[str, Any]:\n    \"\"\"\n    Dumps the model in JSON format\n\n    Parameters\n    ----------\n    kwargs : dict[str, Any]\n        Additional keyword arguments to pass to the model dump\n\n    Returns\n    -------\n    dict[str, Any]\n        The payload\n    \"\"\"\n    return self.model_dump(mode=\"json\", exclude_unset=True, **kwargs)\n</code></pre>"},{"location":"ctfdpy/models/tags/","title":"Tags","text":""},{"location":"ctfdpy/models/tags/#ctfdpy.models.tags.Tag","title":"Tag","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a tag in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the tag</p> required <code>value</code> <code>str</code> <p>The value of the tag</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge the tag is associated with</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the tag, read-only</p> <code>value</code> <code>str</code> <p>The value of the tag</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge the tag is associated with</p> Source code in <code>ctfdpy\\models\\tags.py</code> <pre><code>class Tag(ResponseModel):\n    \"\"\"\n    Represents a tag in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the tag\n    value : str\n        The value of the tag\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge the tag is associated with\n\n    Attributes\n    ----------\n    id : int\n        The ID of the tag, read-only\n    value : str\n        The value of the tag\n    challenge_id : int\n        The ID of the challenge the tag is associated with\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    value: str\n    challenge_id: int = Field(\n        validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n</code></pre>"},{"location":"ctfdpy/models/topics/","title":"Topics","text":""},{"location":"ctfdpy/models/topics/#ctfdpy.models.topics.Topic","title":"Topic","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a topic in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the topic</p> required <code>value</code> <code>str</code> <p>The value of the topic</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the topic, read-only</p> <code>value</code> <code>str</code> <p>The value of the topic</p> Source code in <code>ctfdpy\\models\\topics.py</code> <pre><code>class Topic(ResponseModel):\n    \"\"\"\n    Represents a topic in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the topic\n    value : str\n        The value of the topic\n\n    Attributes\n    ----------\n    id : int\n        The ID of the topic, read-only\n    value : str\n        The value of the topic\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    value: str\n</code></pre>"},{"location":"ctfdpy/models/topics/#ctfdpy.models.topics.ChallengeTopicReference","title":"ChallengeTopicReference","text":"<p>             Bases: <code>ResponseModel</code></p> <p>Represents a reference to a topic for a challenge in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the challenge-topic reference</p> required <code>challenge</code> <code>int</code> <p>Alias for <code>challenge_id</code></p> required <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the topic</p> required <code>topic</code> <code>int</code> <p>Alias for <code>topic_id</code></p> required <code>topic_id</code> <code>int</code> <p>The ID of the topic associated with the challenge</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the challenge-topic reference, read-only</p> <code>challenge_id</code> <code>int</code> <p>The ID of the challenge associated with the topic</p> <code>topic_id</code> <code>int</code> <p>The ID of the topic associated with the challenge</p> Source code in <code>ctfdpy\\models\\topics.py</code> <pre><code>class ChallengeTopicReference(ResponseModel):\n    \"\"\"\n    Represents a reference to a topic for a challenge in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the challenge-topic reference\n    challenge : int\n        Alias for `challenge_id`\n    challenge_id : int\n        The ID of the challenge associated with the topic\n    topic : int\n        Alias for `topic_id`\n    topic_id : int\n        The ID of the topic associated with the challenge\n\n    Attributes\n    ----------\n    id : int\n        The ID of the challenge-topic reference, read-only\n    challenge_id : int\n        The ID of the challenge associated with the topic\n    topic_id : int\n        The ID of the topic associated with the challenge\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    challenge_id: int = Field(\n        validation_alias=AliasChoices(\"challenge_id\", \"challenge\")\n    )\n    topic_id: int = Field(validation_alias=AliasChoices(\"topic_id\", \"topic\"))\n</code></pre>"},{"location":"ctfdpy/models/users/","title":"Users","text":""},{"location":"ctfdpy/models/users/#ctfdpy.models.users.BaseUser","title":"BaseUser","text":"<p>             Bases: <code>ResponseModel</code></p> <p>A base user model. Not meant to be instantiated directly.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the user</p> required <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user</p> required <code>name</code> <code>str</code> <p>The name of the user</p> required <code>website</code> <code>str | None</code> <p>The website of the user</p> required <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> required <code>country</code> <code>str | None</code> <p>The country of the user</p> required <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> required <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> required <code>fields</code> <code>list</code> <p>The fields of the user</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the user</p> <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user</p> <code>name</code> <code>str</code> <p>The name of the user</p> <code>website</code> <code>str | None</code> <p>The website of the user</p> <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> <code>country</code> <code>str | None</code> <p>The country of the user</p> <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> <code>fields</code> <code>list</code> <p>The fields of the user</p> Source code in <code>ctfdpy\\models\\users.py</code> <pre><code>class BaseUser(ResponseModel):\n    \"\"\"\n    A base user model. Not meant to be instantiated directly.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the user\n    oauth_id : int | None\n        The OAuth ID of the user\n    name : str\n        The name of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n\n    Attributes\n    ----------\n    id : int\n        The ID of the user\n    oauth_id : int | None\n        The OAuth ID of the user\n    name : str\n        The name of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n    \"\"\"\n\n    id: int = Field(frozen=True, exclude=True)\n    oauth_id: int | None = Field(None, frozen=True, exclude=True)\n\n    name: str\n\n    website: str | None\n    affiliation: str | None\n    country: str | None\n\n    bracket_id: int | None\n    team_id: int | None\n\n    fields: list  # not fully implemented by us yet\n\n    def to_update_paylaod(self) -&gt; UpdateUserPayload:\n        \"\"\"\n        Converts the user to a payload for updating users.\n\n        Returns\n        -------\n        UpdateUserPayload\n            The payload for updating users\n        \"\"\"\n        return UpdateUserPayload.model_validate(self, from_attributes=True)\n</code></pre>"},{"location":"ctfdpy/models/users/#ctfdpy.models.users.BaseUser.to_update_paylaod","title":"to_update_paylaod","text":"<pre><code>to_update_paylaod() -&gt; UpdateUserPayload\n</code></pre> <p>Converts the user to a payload for updating users.</p> <p>Returns:</p> Type Description <code>UpdateUserPayload</code> <p>The payload for updating users</p> Source code in <code>ctfdpy\\models\\users.py</code> <pre><code>def to_update_paylaod(self) -&gt; UpdateUserPayload:\n    \"\"\"\n    Converts the user to a payload for updating users.\n\n    Returns\n    -------\n    UpdateUserPayload\n        The payload for updating users\n    \"\"\"\n    return UpdateUserPayload.model_validate(self, from_attributes=True)\n</code></pre>"},{"location":"ctfdpy/models/users/#ctfdpy.models.users.UserListing","title":"UserListing","text":"<p>             Bases: <code>BaseUser</code></p> <p>Represents a user listing in CTFd.</p> <p>Returned by the <code>GET /users</code> endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the user</p> required <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user</p> required <code>name</code> <code>str</code> <p>The name of the user</p> required <code>website</code> <code>str | None</code> <p>The website of the user</p> required <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> required <code>country</code> <code>str | None</code> <p>The country of the user</p> required <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> required <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> required <code>fields</code> <code>list</code> <p>The fields of the user</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the user, read-only</p> <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user, read-only</p> <code>name</code> <code>str</code> <p>The name of the user</p> <code>website</code> <code>str | None</code> <p>The website of the user</p> <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> <code>country</code> <code>str | None</code> <p>The country of the user</p> <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> <code>fields</code> <code>list</code> <p>The fields of the user</p> Source code in <code>ctfdpy\\models\\users.py</code> <pre><code>class UserListing(BaseUser):\n    \"\"\"\n    Represents a user listing in CTFd.\n\n    Returned by the `GET /users` endpoint.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the user\n    oauth_id : int | None\n        The OAuth ID of the user\n    name : str\n        The name of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n\n    Attributes\n    ----------\n    id : int\n        The ID of the user, read-only\n    oauth_id : int | None\n        The OAuth ID of the user, read-only\n    name : str\n        The name of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n    \"\"\"\n</code></pre>"},{"location":"ctfdpy/models/users/#ctfdpy.models.users.UserPublicView","title":"UserPublicView","text":"<p>             Bases: <code>BaseUser</code></p> <p>Represents a public view of a user in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the user</p> required <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user</p> required <code>name</code> <code>str</code> <p>The name of the user</p> required <code>website</code> <code>str | None</code> <p>The website of the user</p> required <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> required <code>country</code> <code>str | None</code> <p>The country of the user</p> required <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> required <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> required <code>fields</code> <code>list</code> <p>The fields of the user</p> required <code>place</code> <code>int | None</code> <p>The placing of the user. Not returned by all endpoints</p> required <code>score</code> <code>int | None</code> <p>The score of the user. Not returned by all endpoints</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the user, read-only</p> <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user, read-only</p> <code>name</code> <code>str</code> <p>The name of the user</p> <code>website</code> <code>str | None</code> <p>The website of the user</p> <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> <code>country</code> <code>str | None</code> <p>The country of the user</p> <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> <code>fields</code> <code>list</code> <p>The fields of the user</p> <code>place</code> <code>int | None</code> <p>The placing of the user. Not returned by all endpoints</p> <code>score</code> <code>int | None</code> <p>The score of the user. Not returned by all endpoints</p> Source code in <code>ctfdpy\\models\\users.py</code> <pre><code>class UserPublicView(BaseUser):\n    \"\"\"\n    Represents a public view of a user in CTFd.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the user\n    oauth_id : int | None\n        The OAuth ID of the user\n    name : str\n        The name of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n    place : int | None\n        The placing of the user. Not returned by all endpoints\n    score : int | None\n        The score of the user. Not returned by all endpoints\n\n    Attributes\n    ----------\n    id : int\n        The ID of the user, read-only\n    oauth_id : int | None\n        The OAuth ID of the user, read-only\n    name : str\n        The name of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n    place : int | None\n        The placing of the user. Not returned by all endpoints\n    score : int | None\n        The score of the user. Not returned by all endpoints\n    \"\"\"\n\n    place: int | None = None\n    score: int | None = None\n</code></pre>"},{"location":"ctfdpy/models/users/#ctfdpy.models.users.UserPrivateView","title":"UserPrivateView","text":"<p>             Bases: <code>BaseUser</code></p> <p>Represents a private view of a user in CTFd.</p> <p>This is returned when viewing the user's own profile.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the user</p> required <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user</p> required <code>name</code> <code>str</code> <p>The name of the user</p> required <code>email</code> <code>str</code> <p>The email of the user</p> required <code>language</code> <code>str | None</code> <p>The language setting of the user</p> required <code>website</code> <code>str | None</code> <p>The website of the user</p> required <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> required <code>country</code> <code>str | None</code> <p>The country of the user</p> required <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> required <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> required <code>fields</code> <code>list</code> <p>The fields of the user</p> required <code>place</code> <code>int</code> <p>The placing of the user. Not returned by all endpoints</p> required <code>score</code> <code>int</code> <p>The score of the user. Not returned by all endpoints</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the user, read-only</p> <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user, read-only</p> <code>name</code> <code>str</code> <p>The name of the user</p> <code>email</code> <code>str</code> <p>The email of the user</p> <code>language</code> <code>str | None</code> <p>The language setting of the user</p> <code>website</code> <code>str | None</code> <p>The website of the user</p> <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> <code>country</code> <code>str | None</code> <p>The country of the user</p> <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> <code>fields</code> <code>list</code> <p>The fields of the user</p> <code>place</code> <code>int</code> <p>The placing of the user. Not returned by all endpoints</p> <code>score</code> <code>int</code> <p>The score of the user. Not returned by all endpoints</p> Source code in <code>ctfdpy\\models\\users.py</code> <pre><code>class UserPrivateView(BaseUser):\n    \"\"\"\n    Represents a private view of a user in CTFd.\n\n    This is returned when viewing the user's own profile.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the user\n    oauth_id : int | None\n        The OAuth ID of the user\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n    place : int\n        The placing of the user. Not returned by all endpoints\n    score : int\n        The score of the user. Not returned by all endpoints\n\n    Attributes\n    ----------\n    id : int\n        The ID of the user, read-only\n    oauth_id : int | None\n        The OAuth ID of the user, read-only\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n    place : int\n        The placing of the user. Not returned by all endpoints\n    score : int\n        The score of the user. Not returned by all endpoints\n    \"\"\"\n\n    email: str\n    language: str | None\n    place: int | None = None\n    score: int | None = None\n</code></pre>"},{"location":"ctfdpy/models/users/#ctfdpy.models.users.UserAdminView","title":"UserAdminView","text":"<p>             Bases: <code>BaseUser</code></p> <p>Represents an admin view of a user in CTFd.</p> <p>This is returned when viewing a user as an admin.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the user, read-only</p> required <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user, read-only</p> required <code>name</code> <code>str</code> <p>The name of the user</p> required <code>email</code> <code>str</code> <p>The email of the user</p> required <code>language</code> <code>str | None</code> <p>The language setting of the user</p> required <code>website</code> <code>str | None</code> <p>The website of the user</p> required <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> required <code>country</code> <code>str | None</code> <p>The country of the user</p> required <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> required <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> required <code>fields</code> <code>list</code> <p>The fields of the user</p> required <code>created</code> <code>datetime</code> <p>The creation date of the user</p> required <code>secret</code> <code>str</code> <p>Not sure what this is</p> required <code>type</code> <code>UserType</code> <p>The type of the user</p> required <code>banned</code> <code>bool</code> <p>Whether the user is banned</p> required <code>hidden</code> <code>bool</code> <p>Whether the user is hidden</p> required <code>verified</code> <code>bool</code> <p>Whether the user is verified</p> required <code>place</code> <code>int</code> <p>The placing of the user. Not returned by all endpoints</p> required <code>score</code> <code>int</code> <p>The score of the user. Not returned by all endpoints</p> required <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the user, read-only</p> <code>oauth_id</code> <code>int | None</code> <p>The OAuth ID of the user, read-only</p> <code>name</code> <code>str</code> <p>The name of the user</p> <code>email</code> <code>str</code> <p>The email of the user</p> <code>language</code> <code>str | None</code> <p>The language setting of the user</p> <code>website</code> <code>str | None</code> <p>The website of the user</p> <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> <code>country</code> <code>str | None</code> <p>The country of the user</p> <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> <code>team_id</code> <code>int | None</code> <p>The ID of the team the user is in</p> <code>fields</code> <code>list</code> <p>The fields of the user</p> <code>created</code> <code>datetime</code> <p>The creation date of the user</p> <code>secret</code> <code>str</code> <p>Not sure what this is</p> <code>type</code> <code>UserType</code> <p>The type of the user</p> <code>banned</code> <code>bool</code> <p>Whether the user is banned</p> <code>hidden</code> <code>bool</code> <p>Whether the user is hidden</p> <code>verified</code> <code>bool</code> <p>Whether the user is verified</p> <code>place</code> <code>int</code> <p>The placing of the user. Not returned by all endpoints</p> <code>score</code> <code>int</code> <p>The score of the user. Not returned by all endpoints</p> Source code in <code>ctfdpy\\models\\users.py</code> <pre><code>class UserAdminView(BaseUser):\n    \"\"\"\n    Represents an admin view of a user in CTFd.\n\n    This is returned when viewing a user as an admin.\n\n    Parameters\n    ----------\n    id : int\n        The ID of the user, read-only\n    oauth_id : int | None\n        The OAuth ID of the user, read-only\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n    created : datetime\n        The creation date of the user\n    secret : str\n        Not sure what this is\n    type : UserType\n        The type of the user\n    banned : bool\n        Whether the user is banned\n    hidden : bool\n        Whether the user is hidden\n    verified : bool\n        Whether the user is verified\n    place : int\n        The placing of the user. Not returned by all endpoints\n    score : int\n        The score of the user. Not returned by all endpoints\n\n    Attributes\n    ----------\n    id : int\n        The ID of the user, read-only\n    oauth_id : int | None\n        The OAuth ID of the user, read-only\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    team_id : int | None\n        The ID of the team the user is in\n    fields : list\n        The fields of the user\n    created : datetime\n        The creation date of the user\n    secret : str\n        Not sure what this is\n    type : UserType\n        The type of the user\n    banned : bool\n        Whether the user is banned\n    hidden : bool\n        Whether the user is hidden\n    verified : bool\n        Whether the user is verified\n    place : int\n        The placing of the user. Not returned by all endpoints\n    score : int\n        The score of the user. Not returned by all endpoints\n    \"\"\"\n\n    email: str\n\n    created: datetime\n    secret: str  # not sure what this is\n\n    type: UserType\n\n    banned: bool\n    hidden: bool\n    verified: bool\n\n    place: int | None = None\n    score: int | None = None\n</code></pre>"},{"location":"ctfdpy/models/users/#ctfdpy.models.users.CreateUserPayload","title":"CreateUserPayload","text":"<p>             Bases: <code>CreatePayloadModel</code></p> <p>Represents a user create payload in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the user</p> required <code>email</code> <code>str</code> <p>The email of the user</p> required <code>password</code> <code>str</code> <p>The password of the user</p> required <code>type</code> <code>UserType</code> <p>The type of the user</p> required <code>banned</code> <code>bool</code> <p>Whether the user is banned</p> required <code>hidden</code> <code>bool</code> <p>Whether the user is hidden</p> required <code>verified</code> <code>bool</code> <p>Whether the user is verified</p> required <code>language</code> <code>str | None</code> <p>The language setting of the user</p> required <code>website</code> <code>str | None</code> <p>The website of the user</p> required <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> required <code>country</code> <code>str | None</code> <p>The country of the user</p> required <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> required <code>fields</code> <code>list</code> <p>The fields of the user</p> required <code>secret</code> <code>str | None</code> <p>Not sure what this is</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the user</p> <code>email</code> <code>str</code> <p>The email of the user</p> <code>password</code> <code>str</code> <p>The password of the user</p> <code>type</code> <code>UserType</code> <p>The type of the user</p> <code>banned</code> <code>bool</code> <p>Whether the user is banned</p> <code>hidden</code> <code>bool</code> <p>Whether the user is hidden</p> <code>verified</code> <code>bool</code> <p>Whether the user is verified</p> <code>language</code> <code>str | None</code> <p>The language setting of the user</p> <code>website</code> <code>str | None</code> <p>The website of the user</p> <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> <code>country</code> <code>str | None</code> <p>The country of the user</p> <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> <code>fields</code> <code>list</code> <p>The fields of the user</p> <code>secret</code> <code>str | None</code> <p>Not sure what this is</p> Source code in <code>ctfdpy\\models\\users.py</code> <pre><code>class CreateUserPayload(CreatePayloadModel):\n    \"\"\"\n    Represents a user create payload in CTFd.\n\n    Parameters\n    ----------\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    password : str\n        The password of the user\n    type : UserType\n        The type of the user\n    banned : bool\n        Whether the user is banned\n    hidden : bool\n        Whether the user is hidden\n    verified : bool\n        Whether the user is verified\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    fields : list\n        The fields of the user\n    secret : str | None\n        Not sure what this is\n\n    Attributes\n    ----------\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    password : str\n        The password of the user\n    type : UserType\n        The type of the user\n    banned : bool\n        Whether the user is banned\n    hidden : bool\n        Whether the user is hidden\n    verified : bool\n        Whether the user is verified\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    fields : list\n        The fields of the user\n    secret : str | None\n        Not sure what this is\n    \"\"\"\n\n    name: str = Field(min_length=1, max_length=128)\n    email: EmailStr = Field(min_length=1, max_length=128)\n    password: str\n\n    type: UserType = UserType.USER\n\n    banned: bool = False\n    hidden: bool = False\n    verified: bool = False\n\n    language: str | None = None\n    website: AnyHttpUrl | None = None\n    affiliation: str | None = None\n    country: str | None = None\n\n    bracket_id: int | None = None\n    fields: list = Field(default_factory=list)\n    secret: str | None = None\n</code></pre>"},{"location":"ctfdpy/models/users/#ctfdpy.models.users.UpdateSelfUserPayload","title":"UpdateSelfUserPayload","text":"<p>             Bases: <code>UpdatePayloadModel</code></p> <p>Represents a self user update payload in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the user</p> required <code>email</code> <code>str</code> <p>The email of the user</p> required <code>password</code> <code>str</code> <p>The password of the user</p> required <code>confirm</code> <code>str</code> <p>The old password of the user. Must be provided if <code>password</code> is provided and user is not an admin</p> required <code>old_password</code> <code>str</code> <p>Alias for <code>confirm</code></p> required <code>language</code> <code>str | None</code> <p>The language setting of the user</p> required <code>website</code> <code>str | None</code> <p>The website of the user</p> required <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> required <code>country</code> <code>str | None</code> <p>The country of the user</p> required <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> required <code>fields</code> <code>list</code> <p>The fields of the user</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the user</p> <code>email</code> <code>str</code> <p>The email of the user</p> <code>password</code> <code>str</code> <p>The password of the user</p> <code>confirm</code> <code>str</code> <p>The old password of the user. Must be provided if <code>password</code> is provided and user is not an admin</p> <code>old_password</code> <code>str</code> <p>Alias for <code>confirm</code></p> <code>language</code> <code>str | None</code> <p>The language setting of the user</p> <code>website</code> <code>str | None</code> <p>The website of the user</p> <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> <code>country</code> <code>str | None</code> <p>The country of the user</p> <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> <code>fields</code> <code>list</code> <p>The fields of the user</p> Source code in <code>ctfdpy\\models\\users.py</code> <pre><code>class UpdateSelfUserPayload(UpdatePayloadModel):\n    \"\"\"\n    Represents a self user update payload in CTFd.\n\n    Parameters\n    ----------\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    password : str\n        The password of the user\n    confirm : str\n        The old password of the user. Must be provided if `password` is provided and user is not an admin\n    old_password : str\n        Alias for `confirm`\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    fields : list\n        The fields of the user\n\n    Attributes\n    ----------\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    password : str\n        The password of the user\n    confirm : str\n        The old password of the user. Must be provided if `password` is provided and user is not an admin\n    old_password : str\n        Alias for `confirm`\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    fields : list\n        The fields of the user\n    \"\"\"\n\n    name: str = Field(MISSING, min_length=1, max_length=128)\n    email: EmailStr = Field(MISSING, min_length=1, max_length=128)\n\n    password: str = MISSING\n    confirm: str = Field(\n        MISSING, validation_alias=AliasChoices(\"confirm\", \"old_password\")\n    )\n\n    language: str | None = MISSING\n    website: AnyHttpUrl | None = MISSING\n    affiliation: str | None = MISSING\n    country: str | None = MISSING\n\n    bracket_id: int | None = MISSING\n    fields: list = MISSING\n</code></pre>"},{"location":"ctfdpy/models/users/#ctfdpy.models.users.UpdateUserPayload","title":"UpdateUserPayload","text":"<p>             Bases: <code>UpdatePayloadModel</code></p> <p>Represents a user update payload in CTFd.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the user</p> required <code>email</code> <code>str</code> <p>The email of the user</p> required <code>password</code> <code>str</code> <p>The password of the user</p> required <code>confirm</code> <code>str</code> <p>The old password of the user.</p> required <code>old_password</code> <code>str</code> <p>Alias for <code>confirm</code></p> required <code>type</code> <code>UserType</code> <p>The type of the user</p> required <code>banned</code> <code>bool</code> <p>Whether the user is banned</p> required <code>hidden</code> <code>bool</code> <p>Whether the user is hidden</p> required <code>verified</code> <code>bool</code> <p>Whether the user is verified</p> required <code>language</code> <code>str | None</code> <p>The language setting of the user</p> required <code>website</code> <code>str | None</code> <p>The website of the user</p> required <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> required <code>country</code> <code>str | None</code> <p>The country of the user</p> required <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> required <code>fields</code> <code>list</code> <p>The fields of the user</p> required <code>secret</code> <code>str | None</code> <p>Not sure what this is</p> required <code>type</code> <code>UserType</code> <p>The type of the user</p> required <code>banned</code> <code>bool</code> <p>Whether the user is banned</p> required <code>hidden</code> <code>bool</code> <p>Whether the user is hidden</p> required <code>verified</code> <code>bool</code> <p>Whether the user is verified</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the user</p> <code>email</code> <code>str</code> <p>The email of the user</p> <code>password</code> <code>str</code> <p>The password of the user</p> <code>confirm</code> <code>str</code> <p>The old password of the user.</p> <code>old_password</code> <code>str</code> <p>Alias for <code>confirm</code></p> <code>type</code> <code>UserType</code> <p>The type of the user</p> <code>banned</code> <code>bool</code> <p>Whether the user is banned</p> <code>hidden</code> <code>bool</code> <p>Whether the user is hidden</p> <code>verified</code> <code>bool</code> <p>Whether the user is verified</p> <code>language</code> <code>str | None</code> <p>The language setting of the user</p> <code>website</code> <code>str | None</code> <p>The website of the user</p> <code>affiliation</code> <code>str | None</code> <p>The affiliation of the user</p> <code>country</code> <code>str | None</code> <p>The country of the user</p> <code>bracket_id</code> <code>int | None</code> <p>The ID of the bracket the user is in</p> <code>fields</code> <code>list</code> <p>The fields of the user</p> <code>secret</code> <code>str | None</code> <p>Not sure what this is</p> Source code in <code>ctfdpy\\models\\users.py</code> <pre><code>class UpdateUserPayload(UpdatePayloadModel):\n    \"\"\"\n    Represents a user update payload in CTFd.\n\n    Parameters\n    ----------\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    password : str\n        The password of the user\n    confirm : str\n        The old password of the user.\n    old_password : str\n        Alias for `confirm`\n    type : UserType\n        The type of the user\n    banned : bool\n        Whether the user is banned\n    hidden : bool\n        Whether the user is hidden\n    verified : bool\n        Whether the user is verified\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    fields : list\n        The fields of the user\n    secret : str | None\n        Not sure what this is\n    type : UserType\n        The type of the user\n    banned : bool\n        Whether the user is banned\n    hidden : bool\n        Whether the user is hidden\n    verified : bool\n        Whether the user is verified\n\n    Attributes\n    ----------\n    name : str\n        The name of the user\n    email : str\n        The email of the user\n    password : str\n        The password of the user\n    confirm : str\n        The old password of the user.\n    old_password : str\n        Alias for `confirm`\n    type : UserType\n        The type of the user\n    banned : bool\n        Whether the user is banned\n    hidden : bool\n        Whether the user is hidden\n    verified : bool\n        Whether the user is verified\n    language : str | None\n        The language setting of the user\n    website : str | None\n        The website of the user\n    affiliation : str | None\n        The affiliation of the user\n    country : str | None\n        The country of the user\n    bracket_id : int | None\n        The ID of the bracket the user is in\n    fields : list\n        The fields of the user\n    secret : str | None\n        Not sure what this is\n    \"\"\"\n\n    name: str = Field(MISSING, min_length=1, max_length=128)\n    email: EmailStr = Field(MISSING, min_length=1, max_length=128)\n\n    password: str = MISSING\n    confirm: str = Field(\n        MISSING, validation_alias=AliasChoices(\"confirm\", \"old_password\")\n    )  # since this payload is only used in admin endpoints, technically we don't need this?\n\n    type: UserType = MISSING\n\n    banned: bool = MISSING\n    hidden: bool = MISSING\n    verified: bool = MISSING\n\n    language: str | None = MISSING\n    website: AnyHttpUrl | None = MISSING\n    affiliation: str | None = MISSING\n    country: str | None = MISSING\n\n    bracket_id: int | None = MISSING\n    fields: list = MISSING\n    secret: str | None = MISSING\n</code></pre>"},{"location":"ctfdpy/types/api/","title":"API","text":""},{"location":"ctfdpy/types/api/#ctfdpy.types.api.APIResponse","title":"APIResponse","text":"<p>             Bases: <code>TypedDict</code></p> <p>API response structure.</p> Source code in <code>ctfdpy\\types\\api.py</code> <pre><code>class APIResponse(TypedDict):\n    \"\"\"API response structure.\"\"\"\n\n    data: Any | None\n    success: bool\n    errors: list[str] | dict[str, str] | None\n    message: str | None\n    meta: _MetaDict | None\n</code></pre>"},{"location":"ctfdpy/types/challenges/","title":"Challenges","text":""},{"location":"ctfdpy/types/challenges/#ctfdpy.types.challenges.ChallengeTypeTemplatesDict","title":"ChallengeTypeTemplatesDict","text":"<p>             Bases: <code>TypedDict</code></p> <p>Represents the HTML templates for the UI to edit the challenge type</p> Source code in <code>ctfdpy\\types\\challenges.py</code> <pre><code>class ChallengeTypeTemplatesDict(TypedDict):\n    \"\"\"\n    Represents the HTML templates for the UI to edit the challenge type\n    \"\"\"\n\n    create: str\n    update: str\n    view: str\n</code></pre>"},{"location":"ctfdpy/types/challenges/#ctfdpy.types.challenges.ChallengeTypeScriptsDict","title":"ChallengeTypeScriptsDict","text":"<p>             Bases: <code>TypedDict</code></p> <p>Represents the JavaScript scripts for the UI to edit the challenge type</p> Source code in <code>ctfdpy\\types\\challenges.py</code> <pre><code>class ChallengeTypeScriptsDict(TypedDict):\n    \"\"\"\n    Represents the JavaScript scripts for the UI to edit the challenge type\n    \"\"\"\n\n    create: str\n    update: str\n    view: str\n</code></pre>"},{"location":"ctfdpy/types/challenges/#ctfdpy.types.challenges.ChallengeRequirementsDict","title":"ChallengeRequirementsDict","text":"<p>             Bases: <code>TypedDict</code></p> <p>Represents the requirements of a challenge</p> Source code in <code>ctfdpy\\types\\challenges.py</code> <pre><code>class ChallengeRequirementsDict(TypedDict):\n    \"\"\"\n    Represents the requirements of a challenge\n    \"\"\"\n\n    prerequisites: list[int]\n    anonymize: bool\n</code></pre>"},{"location":"ctfdpy/types/files/","title":"Files","text":""},{"location":"ctfdpy/types/flags/","title":"Flags","text":""},{"location":"ctfdpy/types/flags/#ctfdpy.types.flags.FlagTypeTemplatesDict","title":"FlagTypeTemplatesDict","text":"<p>             Bases: <code>TypedDict</code></p> <p>Represents the HTML templates for the UI to edit the flag type</p> Source code in <code>ctfdpy\\types\\flags.py</code> <pre><code>class FlagTypeTemplatesDict(TypedDict):\n    \"\"\"\n    Represents the HTML templates for the UI to edit the flag type\n    \"\"\"\n\n    create: str\n    update: str\n</code></pre>"},{"location":"ctfdpy/types/hints/","title":"Hints","text":""},{"location":"ctfdpy/types/hints/#ctfdpy.types.hints.HintRequirementsDict","title":"HintRequirementsDict","text":"<p>             Bases: <code>TypedDict</code></p> <p>Represents the requirements of a hint in CTFd.</p> Source code in <code>ctfdpy\\types\\hints.py</code> <pre><code>class HintRequirementsDict(TypedDict):\n    \"\"\"\n    Represents the requirements of a hint in CTFd.\n    \"\"\"\n\n    prerequisites: list[int]\n</code></pre>"},{"location":"endpoints/challenges/","title":"Challenges Endpoints","text":"<p>CTFd Version: <code>3.7.1</code></p> <p>Last Updated: 8/6/2024</p>"},{"location":"endpoints/challenges/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /challenges</code></li> <li><code>POST /challenges</code></li> <li><code>POST /challenges/attempt</code></li> <li><code>GET /challenges/types</code></li> <li><code>GET /challenges/{challenge_id}</code></li> <li><code>PATCH /challenges/{challenge_id}</code></li> <li><code>DELETE /challenges/{challenge_id}</code></li> <li><code>GET /challenges/{challenge_id}/files</code></li> <li><code>GET /challenges/{challenge_id}/flags</code></li> <li><code>GET /challenges/{challenge_id}/hints</code></li> <li><code>GET /challenges/{challenge_id}/requirements</code></li> <li><code>GET /challenges/{challenge_id}/solves</code></li> <li><code>GET /challenges/{challenge_id}/tags</code></li> <li><code>GET /challenges/{challenge_id}/topics</code></li> </ul>"},{"location":"endpoints/challenges/#get-challenges","title":"<code>GET /challenges</code>","text":"<p>Info</p> <p>This endpoint only returns challenges that are visible to the user by default. To get all challenges, set the <code>view</code> query parameter to <code>\"admin\"</code>.</p> <p>Warning</p> <p>The data returned by this endpoint only contains a part of each challenge's details. To get the full details of a challenge, use the <code>GET /challenges/{challenge_id}</code> endpoint.</p> <p>Endpoint to get challenges in bulk. Can be filtered by <code>name</code>, <code>max_attempts</code>, <code>value</code>, <code>category</code>, <code>type</code> and <code>state</code>.</p>"},{"location":"endpoints/challenges/#query-parameters","title":"Query Parameters","text":"Name Type Description <code>name</code> <code>string</code> The name of the challenge to get challenges for <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge to get challenges for <code>value</code> <code>int</code> The value of the challenge to get challenges for <code>category</code> <code>string</code> The category of the challenge to get challenges for <code>type</code> <code>string</code> The type of the challenge to get challenges for <code>state</code> <code>string</code> The state of the challenge to get challenges for. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>q</code> <code>string</code> A search query to match against the given <code>field</code>. If this is specified, <code>field</code> must also be specified <code>field</code> <code>string</code> The field to search against, can be either <code>name</code>, <code>description</code>, <code>category</code>, <code>type</code> or <code>state</code>. If this is specified, <code>q</code> must also be specified <code>view</code> <code>string</code> The view of the challenges to output. If set to <code>\"admin\"</code>, it will show all challenges including <code>hidden</code> and <code>locked</code> challenges."},{"location":"endpoints/challenges/#response","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The challenges were successfully retrieved</p> <ul> <li><code>list[</code><code>ChallengePreview</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"type\": \"string\",\n            \"name\": \"string\",\n            \"value\": 1,\n            \"solves\": 1,\n            \"solved_by_me\": true,\n            \"category\": \"string\",\n            \"tags\": [\n                \"string\"\n            ],\n            \"template\": \"string\",\n            \"script\": \"string\"\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>solves</code> <code>int</code> The number of solves for the challenge <code>solved_by_me</code> <code>bool</code> Whether or not the current user has solved the challenge <code>category</code> <code>string</code> The category of the challenge <code>tags</code> <code>list[str]</code> A list of tags associated with the challenge <code>template</code> <code>string</code> The template of the challenge. Used internally by the frontend <code>script</code> <code>string</code> The script of the challenge. Used internally by the frontend"},{"location":"endpoints/challenges/#post-challenges","title":"<code>POST /challenges</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to create a new challenge. Accepts either form data or JSON data.</p>"},{"location":"endpoints/challenges/#json-multipart-form-parameters","title":"JSON / Multipart Form Parameters","text":"Standard ChallengesDynamic Challenges Name Type Description <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>Literal[\"standard\"]</code> The type of the challenge. Has to be <code>\"standard\"</code> for standard challenges Name Type Description <code>name</code> <code>string</code> The name of the challenge <code>initial</code> <code>int</code> The initial value of the challenge <code>decay</code> <code>int</code> The decay rate of the challenge <code>minimum</code> <code>int</code> The minimum value of the challenge <code>function</code> <code>string</code> The function used to calculate the value of the challenge. Possible values are <code>\"logarithmic\"</code> and <code>\"linear\"</code> <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>Literal[\"dynamic\"]</code> The type of the challenge. Has to be <code>\"dynamic\"</code> for dynamic challenges"},{"location":"endpoints/challenges/#response_1","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The hint was created successfully</p> Standard ChallengesDynamic Challenges <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"string\",\n        \"value\": 1,\n        \"description\": \"string\",\n        \"connection_info\": \"string\",\n        \"next_id\": 1,\n        \"category\": \"string\",\n        \"state\": \"string\",\n        \"max_attempts\": 1,\n        \"type\": \"standard\",\n        \"type_data\": {\n            \"id\": \"standard\",\n            \"name\": \"standard\",\n            \"templates\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            },\n            \"scripts\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            }\n        }\n    }\n}\n</code></pre> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"string\",\n        \"value\": 1,\n        \"initial\": 1,\n        \"decay\": 1,\n        \"minimum\": 1,\n        \"function\": \"string\",\n        \"description\": \"string\",\n        \"connection_info\": \"string\",\n        \"next_id\": 1,\n        \"category\": \"string\",\n        \"state\": \"string\",\n        \"max_attempts\": 1,\n        \"type\": \"dynamic\",\n        \"type_data\": {\n            \"id\": \"dynamic\",\n            \"name\": \"dynamic\",\n            \"templates\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            },\n            \"scripts\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            }\n        }\n    }\n}\n</code></pre> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_1","title":"Return Values","text":"Standard ChallengesDynamic Challenges Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>initial</code> <code>int</code> The initial value of the challenge <code>decay</code> <code>int</code> The decay rate of the challenge <code>minimum</code> <code>int</code> The minimum value of the challenge <code>function</code> <code>string</code> The function used to calculate the value of the challenge. Possible values are <code>\"logarithmic\"</code> and <code>\"linear\"</code> <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend"},{"location":"endpoints/challenges/#post-challengesattempt","title":"<code>POST /challenges/attempt</code>","text":"<p>Endpoint to send a challenge attempt.</p>"},{"location":"endpoints/challenges/#json-multipart-form-parameters_1","title":"JSON / Multipart Form Parameters","text":"Name Type Description <code>challenge_id</code> <code>int</code> The ID of the challenge to attempt <code>submission</code> <code>string</code> The submission for the challenge"},{"location":"endpoints/challenges/#response_2","title":"Response","text":"<p>Refer to <code>ChallengeAttemptResult</code> for possible responses</p> <p>Warning</p> <p>Even when the response code is <code>200 OK</code>, the <code>success</code> field might be <code>False</code> if the attempt was not successful. Additionally, the <code>success</code> field does not mean that the attempt was correct. The only way to tell that the attempt is correct is when the <code>status</code> field is <code>\"correct\"</code>.</p> <ul> <li><code>200 OK</code> - The attempt was successful<ul> <li> <p><code>ChallengeAttemptResult</code> <pre><code>{\n    \"success\": true, // (1)!\n    \"data\": {\n        \"status\": \"string\",\n        \"message\": \"string\"\n    }\n}\n</code></pre></p> <ol> <li>This may not always be <code>True</code>.</li> </ol> </li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_2","title":"Return Values","text":"Name Type Description <code>status</code> <code>string</code> The status of the attempt <code>message</code> <code>string</code> The message from the attempt <p>Refer to <code>ChallengeAttemptResult</code> for possible responses.</p>"},{"location":"endpoints/challenges/#get-challengestypes","title":"<code>GET /challenges/types</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to get the available challenge types.</p>"},{"location":"endpoints/challenges/#response_3","title":"Response","text":"<ul> <li><code>200 OK</code> - The challenge types were successfully retrieved<ul> <li><code>list[</code><code>ChallengeType</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": \"string\",\n            \"name\": \"string\",\n            \"templates\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            },\n            \"scripts\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            },\n            \"create\": \"string\"\n        }\n    ]\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_3","title":"Return Values","text":"Name Type Description <code>id</code> <code>string</code> The ID of the challenge type <code>name</code> <code>string</code> The name of the challenge type <code>templates</code> <code>dict[str, str]</code> A dictionary of templates for creating, updating, and viewing challenges of this type <code>scripts</code> <code>dict[str, str]</code> A dictionary of scripts for creating, updating, and viewing challenges of this type <code>create</code> <code>string</code> The tempate for creating challenges of this type"},{"location":"endpoints/challenges/#get-challengeschallenge_id","title":"<code>GET /challenges/{challenge_id}</code>","text":"<p>Endpoint to get a challenge by ID.</p>"},{"location":"endpoints/challenges/#response_4","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The challenge was successfully retrieved</p> Standard ChallengeDynamic Challenge <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"string\",\n        \"value\": 1,\n        \"description\": \"string\",\n        \"connection_info\": \"string\",\n        \"next_id\": 1,\n        \"category\": \"string\",\n        \"state\": \"string\",\n        \"max_attempts\": 1,\n        \"type\": \"standard\",\n        \"type_data\": {\n            \"id\": \"standard\",\n            \"name\": \"standard\",\n            \"templates\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            },\n            \"scripts\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            }\n        },\n        \"solves\": 1,\n        \"solved_by_me\": true,\n        \"attempts\": 1,\n        \"files\": [\n            \"string\"\n        ],\n        \"tags\": [\n            \"string\"\n        ],\n        \"hints\": [{ }],\n        \"view\": \"string\"\n    }\n}\n</code></pre> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"string\",\n        \"value\": 1,\n        \"initial\": 1,\n        \"decay\": 1,\n        \"minimum\": 1,\n        \"function\": \"string\",\n        \"description\": \"string\",\n        \"connection_info\": \"string\",\n        \"next_id\": 1,\n        \"category\": \"string\",\n        \"state\": \"string\",\n        \"max_attempts\": 1,\n        \"type\": \"dynamic\",\n        \"type_data\": {\n            \"id\": \"dynamic\",\n            \"name\": \"dynamic\",\n            \"templates\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            },\n            \"scripts\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            }\n        },\n        \"solves\": 1,\n        \"solved_by_me\": true,\n        \"attempts\": 1,\n        \"files\": [\n            \"string\"\n        ],\n        \"tags\": [\n            \"string\"\n        ],\n        \"hints\": [{ }],\n        \"view\": \"string\"\n    }\n}\n</code></pre> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>500 Internal Server Error</code> - The underlying challenge type is not installed</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_4","title":"Return Values","text":"Standard ChallengeDynamic Challenge Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend <code>solves</code> <code>int</code> The number of solves for the challenge <code>solved_by_me</code> <code>bool</code> Whether or not the current user has solved the challenge <code>attempts</code> <code>int</code> The number of attempts for the challenge <code>files</code> <code>list[str]</code> A list of files associated with the challenge <code>tags</code> <code>list[str]</code> A list of tags associated with the challenge <code>hints</code> <code>list[</code> <code>LockedChallengeHint</code><code>|</code><code>UnlockedChallengeHint</code><code>]</code> A list of hints associated with the challenge <p>As of CTFd <code>3.7.0</code>, the <code>function</code> field is not returned by the API.</p> Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>initial</code> <code>int</code> The initial value of the challenge <code>decay</code> <code>int</code> The decay rate of the challenge <code>minimum</code> <code>int</code> The minimum value of the challenge <code>function</code> <code>string</code> The function used to calculate the value of the challenge. Possible values are <code>\"logarithmic\"</code> and <code>\"linear\"</code> <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend <code>solves</code> <code>int</code> The number of solves for the challenge <code>solved_by_me</code> <code>bool</code> Whether or not the current user has solved the challenge <code>attempts</code> <code>int</code> The number of attempts for the challenge <code>files</code> <code>list[str]</code> A list of files associated with the challenge <code>tags</code> <code>list[str]</code> A list of tags associated with the challenge <code>hints</code> <code>list[</code> <code>LockedChallengeHint</code><code>|</code><code>UnlockedChallengeHint</code><code>]</code> A list of hints associated with the challenge"},{"location":"endpoints/challenges/#patch-challengeschallenge_id","title":"<code>PATCH /challenges/{challenge_id}</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to update a challenge by ID.</p>"},{"location":"endpoints/challenges/#json-parameters","title":"JSON Parameters","text":"<p>Warning</p> <p>The <code>\"locked\"</code> challenge state is not documented. Setting challenges to <code>\"locked\"</code> is not recommended.</p> Standard ChallengesDynamic Challenges Name Type Description <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge Name Type Description <code>name</code> <code>string</code> The name of the challenge <code>initial</code> <code>int</code> The initial value of the challenge <code>decay</code> <code>int</code> The decay rate of the challenge <code>minimum</code> <code>int</code> The minimum value of the challenge <code>function</code> <code>string</code> The function used to calculate the value of the challenge. Possible values are <code>\"logarithmic\"</code> and <code>\"linear\"</code> <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge"},{"location":"endpoints/challenges/#response_5","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The challenge was successfully retrieved</p> Standard ChallengesDynamic Challenges <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"string\",\n        \"value\": 1,\n        \"description\": \"string\",\n        \"connection_info\": \"string\",\n        \"next_id\": 1,\n        \"category\": \"string\",\n        \"state\": \"string\",\n        \"max_attempts\": 1,\n        \"type\": \"standard\",\n        \"type_data\": {\n            \"id\": \"standard\",\n            \"name\": \"standard\",\n            \"templates\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            },\n            \"scripts\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            }\n        }\n    }\n}\n</code></pre> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"string\",\n        \"value\": 1,\n        \"initial\": 1,\n        \"decay\": 1,\n        \"minimum\": 1,\n        \"function\": \"string\",\n        \"description\": \"string\",\n        \"connection_info\": \"string\",\n        \"next_id\": 1,\n        \"category\": \"string\",\n        \"state\": \"string\",\n        \"max_attempts\": 1,\n        \"type\": \"dynamic\",\n        \"type_data\": {\n            \"id\": \"dynamic\",\n            \"name\": \"dynamic\",\n            \"templates\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            },\n            \"scripts\": {\n                \"create\": \"string\",\n                \"update\": \"string\",\n                \"view\": \"string\"\n            }\n        }\n    }\n}\n</code></pre> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_5","title":"Return Values","text":"Standard ChallengesDynamic Challenges Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>initial</code> <code>int</code> The initial value of the challenge <code>decay</code> <code>int</code> The decay rate of the challenge <code>minimum</code> <code>int</code> The minimum value of the challenge <code>function</code> <code>string</code> The function used to calculate the value of the challenge. Possible values are <code>\"logarithmic\"</code> and <code>\"linear\"</code> <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend"},{"location":"endpoints/challenges/#delete-challengeschallenge_id","title":"<code>DELETE /challenges/{challenge_id}</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to delete a challenge by ID.</p>"},{"location":"endpoints/challenges/#response_6","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The challenge was successfully deleted</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": true\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_6","title":"Return Values","text":"<p>None</p>"},{"location":"endpoints/challenges/#get-challengeschallenge_idfiles","title":"<code>GET /challenges/{challenge_id}/files</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to get the files associated with a challenge by ID.</p>"},{"location":"endpoints/challenges/#response_7","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The files were successfully retrieved</p> <ul> <li><code>list[</code><code>ChallengeFileResponse</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"type\": \"challenge\",\n            \"location\": \"string\"\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_7","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the file <code>type</code> <code>string</code> The type of the file, can only be <code>\"challenge\"</code> <code>location</code> <code>string</code> The location of the file"},{"location":"endpoints/challenges/#get-challengeschallenge_idflags","title":"<code>GET /challenges/{challenge_id}/flags</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to get the flags associated with a challenge by ID.</p>"},{"location":"endpoints/challenges/#response_8","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The flags were successfully retrieved</p> <ul> <li><code>list[</code><code>Flag</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"challenge_id\": 1,\n            \"type\": \"string\",\n            \"content\": \"string\",\n            \"data\": \"string\"\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_8","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the flag <code>challenge_id</code> <code>int</code> The ID of the challenge the flag is for <code>type</code> <code>string</code> The type of the flag, can be either <code>\"static\"</code> or <code>\"regex\"</code> <code>content</code> <code>string</code> The content of the flag <code>data</code> <code>string</code> The data of the flag, seems to only be used for the flag's case-insensitivity, can be either <code>\"case_insensitive\"</code> or <code>\"\"</code>"},{"location":"endpoints/challenges/#get-challengeschallenge_idhints","title":"<code>GET /challenges/{challenge_id}/hints</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to get the hints associated with a challenge by ID.</p>"},{"location":"endpoints/challenges/#response_9","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The hints were successfully retrieved</p> <ul> <li><code>list[</code><code>Hint</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"type\": \"string\",\n            \"challenge\": 1,\n            \"challenge_id\": 1,\n            \"content\": \"string\",\n            \"html\": \"string\",\n            \"cost\": 1,\n            \"requirements\": {\n                \"prerequisites\": [\n                    1\n                ]\n            }\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_9","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>content</code> <code>string</code> The content of the hint <code>html</code> <code>string</code> The HTML content of the hint <code>cost</code> <code>int</code> The cost of the hint <code>requirements</code> <code>dict</code> The hint's requirements. This dictionary has a single item, <code>prerequisites</code>, which is a list of hint IDs required to unlock before this one. (Optional)"},{"location":"endpoints/challenges/#get-challengeschallenge_idrequirements","title":"<code>GET /challenges/{challenge_id}/requirements</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to get the requirements associated with a challenge by ID.</p>"},{"location":"endpoints/challenges/#response_10","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The requirements were successfully retrieved</p> <ul> <li><code>ChallengeRequirements</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"prerequisites\": [\n            1\n        ],\n        \"anonymize\": false\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_10","title":"Return Values","text":"Name Type Description <code>prerequisites</code> <code>list[int]</code> A list of prerequisite challenge IDs <code>anonymize</code> <code>bool</code> Whether or not to anonymize the challenge"},{"location":"endpoints/challenges/#get-challengeschallenge_idsolves","title":"<code>GET /challenges/{challenge_id}/solves</code>","text":"<p>Endpoint to get the solves associated with a challenge by ID.</p>"},{"location":"endpoints/challenges/#query-parameters_1","title":"Query Parameters","text":"<p>| Name | Type | Description | | <code>preview</code> | bool | If the CTF is currently frozen, the user is an admin, and this is set to <code>True</code>, the response will only contain the solves prior to the freeze time. |</p>"},{"location":"endpoints/challenges/#response_11","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The solves were successfully retrieved</p> <ul> <li><code>list[</code><code>ChallengeSolvesResponse</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"account_id\": 1,\n            \"name\": \"string\",\n            \"date\": \"string\",\n            \"account_url\": \"string\"\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_11","title":"Return Values","text":"Name Type Description <code>account_id</code> <code>int</code> The ID of the account that solved the challenge <code>name</code> <code>string</code> The name of the account that solved the challenge <code>date</code> <code>string</code> The date the challenge was solved <code>account_url</code> <code>string</code> The URL of the account that solved the challenge"},{"location":"endpoints/challenges/#get-challengeschallenge_idtags","title":"<code>GET /challenges/{challenge_id}/tags</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to get the tags associated with a challenge by ID.</p>"},{"location":"endpoints/challenges/#response_12","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The tags were successfully retrieved</p> <ul> <li><code>list[</code><code>Tag</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"challenge_id\": 1,\n            \"value\": \"string\"\n        }\n    ]\n}`\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_12","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the tag <code>challenge_id</code> <code>int</code> The ID of the challenge <code>value</code> <code>string</code> The value of the tag"},{"location":"endpoints/challenges/#get-challengeschallenge_idtopics","title":"<code>GET /challenges/{challenge_id}/topics</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to get the topics associated with a challenge by ID.</p>"},{"location":"endpoints/challenges/#response_13","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The topics were successfully retrieved</p> <ul> <li><code>list[</code><code>ChallengeTopicResponse</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"challenge_id\": 1,\n            \"topic_id\": 1,\n            \"value\": \"string\"\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The challenge was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/challenges/#return-values_13","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the challenge-topic association <code>challenge_id</code> <code>int</code> The ID of the challenge <code>topic_id</code> <code>int</code> The ID of the topic <code>value</code> <code>string</code> The value of the topic"},{"location":"endpoints/challenges/#models","title":"Models","text":"<ul> <li><code>Challenge</code> Model</li> <li><code>DynamicChallenge</code> Model</li> <li><code>ChallengePreview</code> Model</li> <li><code>HiddenChallenge</code> Model</li> <li><code>PartialChallenge</code> Model</li> <li><code>PartialDynamicChallenge</code> Model</li> <li><code>LockedChallengeHint</code> Model</li> <li><code>UnlockedChallengeHint</code> Model</li> <li><code>ChallengeAttemptResult</code> Model</li> <li><code>ChallengeType</code> Model</li> <li><code>ChallengeFileResponse</code> Model</li> <li><code>ChallengeRequirements</code> Model</li> <li><code>ChallengeSolvesResponse</code> Model</li> <li><code>ChallengeTopicResponse</code> Model</li> </ul>"},{"location":"endpoints/challenges/#challenge-model","title":"<code>Challenge</code> Model","text":"<p>Represents a challenge returned by the <code>GET /challenges/{challenge_id}</code> endpoint.</p> <pre><code>{\n    \"id\": 1,\n    \"name\": \"string\",\n    \"value\": 1,\n    \"description\": \"string\",\n    \"connection_info\": \"string\",\n    \"next_id\": 1,\n    \"category\": \"string\",\n    \"state\": \"string\",\n    \"max_attempts\": 1,\n    \"type\": \"standard\",\n    \"type_data\": {\n        \"id\": \"standard\",\n        \"name\": \"standard\",\n        \"templates\": {\n            \"create\": \"string\",\n            \"update\": \"string\",\n            \"view\": \"string\"\n        },\n        \"scripts\": {\n            \"create\": \"string\",\n            \"update\": \"string\",\n            \"view\": \"string\"\n        }\n    },\n    \"solves\": 1,\n    \"solved_by_me\": true,\n    \"attempts\": 1,\n    \"files\": [\n        \"string\"\n    ],\n    \"tags\": [\n        \"string\"\n    ],\n    \"hints\": [{ }],\n    \"view\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend <code>solves</code> <code>int</code> The number of solves for the challenge <code>solved_by_me</code> <code>bool</code> Whether or not the current user has solved the challenge <code>attempts</code> <code>int</code> The number of attempts the current user has made on the challenge <code>files</code> <code>list[str]</code> A list of files associated with the challenge <code>tags</code> <code>list[str]</code> A list of tags associated with the challenge <code>hints</code> <code>list[</code> <code>LockedChallengeHint</code><code>|</code><code>UnlockedChallengeHint</code><code>]</code> A list of hints associated with the challenge <code>view</code> <code>string</code> The view of the challenge. Used internally by the frontend"},{"location":"endpoints/challenges/#dynamicchallenge-model","title":"<code>DynamicChallenge</code> Model","text":"<p>Represents a dynamic challenge returned by the <code>GET /challenges/{challenge_id}</code> endpoint.</p> <pre><code>{\n    \"id\": 1,\n    \"name\": \"string\",\n    \"value\": 1, // (1)!\n    \"initial\": 1,\n    \"decay\": 1,\n    \"minimum\": 1,\n    \"function\": \"string\",\n    \"description\": \"string\",\n    \"connection_info\": \"string\",\n    \"next_id\": 1,\n    \"category\": \"string\",\n    \"state\": \"string\",\n    \"max_attempts\": 1,\n    \"type\": \"dynamic\",\n    \"type_data\": {\n        \"id\": \"dynamic\",\n        \"name\": \"dynamic\",\n        \"templates\": {\n            \"create\": \"string\",\n            \"update\": \"string\",\n            \"view\": \"string\"\n        },\n        \"scripts\": {\n            \"create\": \"string\",\n            \"update\": \"string\",\n            \"view\": \"string\"\n        }\n    },\n    \"solves\": 1,\n    \"solved_by_me\": true,\n    \"attempts\": 1,\n    \"files\": [\n        \"string\"\n    ],\n    \"tags\": [\n        \"string\"\n    ],\n    \"hints\": [{ }],\n    \"view\": \"string\"\n}\n</code></pre> <ol> <li>The <code>value</code> field is read-only and represents the current value of the challenge. This value is calculated based on the <code>initial</code>, <code>decay</code>, and <code>minimum</code> fields.</li> </ol> <p>As of CTFd versions <code>3.7.0</code> and below do not return the <code>function</code> field. This is fixed in <code>3.7.1</code></p> Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge. This is read-only for dynamic challenges <code>initial</code> <code>int</code> The initial value of the challenge <code>decay</code> <code>int</code> The decay rate of the challenge <code>minimum</code> <code>int</code> The minimum value of the challenge <code>function</code> <code>string</code> The function used to calculate the value of the challenge. Possible values are <code>\"logarithmic\"</code> and <code>\"linear\"</code> <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>Literal[\"dynamic\"]</code> The type of the challenge. Has to be <code>\"dynamic\"</code> for dynamic challenges <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend <code>solves</code> <code>int</code> The number of solves for the challenge <code>solved_by_me</code> <code>bool</code> Whether or not the current user has solved the challenge <code>attempts</code> <code>int</code> The number of attempts the current user has made on the challenge <code>files</code> <code>list[str]</code> A list of files associated with the challenge <code>tags</code> <code>list[str]</code> A list of tags associated with the challenge <code>hints</code> <code>list[</code> <code>LockedChallengeHint</code><code>|</code><code>UnlockedChallengeHint</code><code>]</code> A list of hints associated with the challenge <code>view</code> <code>string</code> The view of the challenge. Used internally by the frontend"},{"location":"endpoints/challenges/#challengepreview-model","title":"<code>ChallengePreview</code> Model","text":"<p>Represents a preview of a challenge. This model is returned by <code>GET /challenges</code>.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"string\",\n    \"name\": \"string\",\n    \"value\": 1,\n    \"solves\": 1,\n    \"solved_by_me\": true,\n    \"category\": \"string\",\n    \"tags\": [\n        \"string\"\n    ],\n    \"template\": \"string\",\n    \"script\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>solves</code> <code>int</code> The number of solves for the challenge <code>solved_by_me</code> <code>bool</code> Whether or not the current user has solved the challenge <code>category</code> <code>string</code> The category of the challenge <code>tags</code> <code>list[str]</code> A list of tags associated with the challenge <code>template</code> <code>string</code> The template of the challenge. Used internally by the frontend <code>script</code> <code>string</code> The script of the challenge. Used internally by the frontend"},{"location":"endpoints/challenges/#hiddenchallenge-model","title":"<code>HiddenChallenge</code> Model","text":"<p>Represents a challenge with details hidden from the user. This is used for challenges with requirements not yet fulfilled by the user.</p> <p>Warning</p> <p>This model is a hard-coded response and should not be confused with a <code>Challenge</code> that has <code>state</code> set to <code>\"hidden\"</code>.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"hidden\",\n    \"name\": \"???\",\n    \"value\": 0,\n    \"solves\": null,\n    \"solved_by_me\": false,\n    \"category\": \"???\",\n    \"tags\": [],\n    \"template\": \"\",\n    \"script\": \"\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>type</code> <code>string</code> The type of the challenge. Will always be <code>\"hidden\"</code> <code>name</code> <code>string</code> The name of the challenge. Will always be <code>\"???\"</code> <code>value</code> <code>int</code> The value of the challenge. Will always be <code>0</code> <code>solves</code> <code>int</code> The number of solves for the challenge. Will always be <code>None</code> <code>solved_by_me</code> <code>bool</code> Whether or not the current user has solved the challenge. Will always be <code>False</code> <code>category</code> <code>string</code> The category of the challenge. Will always be <code>\"???\"</code> <code>tags</code> <code>list[str]</code> A list of tags associated with the challenge. Will always be <code>[]</code> <code>template</code> <code>string</code> The template of the challenge. Will always be <code>\"\"</code> <code>script</code> <code>string</code> The script of the challenge. Will always be <code>\"\"</code>"},{"location":"endpoints/challenges/#partialchallenge-model","title":"<code>PartialChallenge</code> Model","text":"<p>Represents a partial challenge returned by the <code>POST /challenges</code> and <code>PATCH /challenges/{challenge_id}</code> endpoint.</p> <pre><code>{\n    \"id\": 1,\n    \"name\": \"string\",\n    \"value\": 1,\n    \"description\": \"string\",\n    \"connection_info\": \"string\",\n    \"next_id\": 1,\n    \"category\": \"string\",\n    \"state\": \"string\",\n    \"max_attempts\": 1,\n    \"type\": \"standard\",\n    \"type_data\": {\n        \"id\": \"standard\",\n        \"name\": \"standard\",\n        \"templates\": {\n            \"create\": \"string\",\n            \"update\": \"string\",\n            \"view\": \"string\"\n        },\n        \"scripts\": {\n            \"create\": \"string\",\n            \"update\": \"string\",\n            \"view\": \"string\"\n        }\n    }\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend"},{"location":"endpoints/challenges/#partialdynamicchallenge-model","title":"<code>PartialDynamicChallenge</code> Model","text":"<p>Represents a partial dynamic challenge returned by the <code>POST /challenges</code> and <code>PATCH /challenges/{challenge_id}</code> endpoint.</p> <pre><code>{\n    \"id\": 1,\n    \"name\": \"string\",\n    \"value\": 1,\n    \"initial\": 1,\n    \"decay\": 1,\n    \"minimum\": 1,\n    \"function\": \"string\",\n    \"description\": \"string\",\n    \"connection_info\": \"string\",\n    \"next_id\": 1,\n    \"category\": \"string\",\n    \"state\": \"string\",\n    \"max_attempts\": 1,\n    \"type\": \"dynamic\",\n    \"type_data\": {\n        \"id\": \"dynamic\",\n        \"name\": \"dynamic\",\n        \"templates\": {\n            \"create\": \"string\",\n            \"update\": \"string\",\n            \"view\": \"string\"\n        },\n        \"scripts\": {\n            \"create\": \"string\",\n            \"update\": \"string\",\n            \"view\": \"string\"\n        }\n    }\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the challenge <code>name</code> <code>string</code> The name of the challenge <code>value</code> <code>int</code> The value of the challenge <code>initial</code> <code>int</code> The initial value of the challenge <code>decay</code> <code>int</code> The decay rate of the challenge <code>minimum</code> <code>int</code> The minimum value of the challenge <code>function</code> <code>string</code> The function used to calculate the value of the challenge. Possible values are <code>\"logarithmic\"</code> and <code>\"linear\"</code> <code>description</code> <code>string</code> The description of the challenge <code>connection_info</code> <code>string</code> The connection information of the challenge <code>next_id</code> <code>int</code> The ID of the next challenge <code>category</code> <code>string</code> The category of the challenge <code>state</code> <code>string</code> The state of the challenge. Possible values are <code>\"visible\"</code>, <code>\"hidden\"</code>, and <code>\"locked\"</code> <code>max_attempts</code> <code>int</code> The maximum number of attempts for the challenge <code>type</code> <code>string</code> The type of the challenge. Possible values are <code>\"standard\"</code> and <code>\"dynamic\"</code> <code>type_data</code> <code>dict[str, Any]</code> The data associated with the challenge type. Used internally by the frontend"},{"location":"endpoints/challenges/#challengerequirements-model","title":"<code>ChallengeRequirements</code> Model","text":"<p>Represents the requirements before a challenge can be accessed by a user.</p> <pre><code>{\n    \"prerequisites\": [\n        1\n    ],\n    \"anonymize\": false\n}\n</code></pre> Name Type Description <code>prerequisites</code> <code>list[int]</code> A list of challenge IDs that must be solved before this challenge can be accessed <code>anonymize</code> <code>bool</code> Whether or not to anonymize the challenge instead of hiding it if the <code>prerequisites</code> are not met. If not specified, defaults to <code>False</code>"},{"location":"endpoints/challenges/#lockedchallengehint-model","title":"<code>LockedChallengeHint</code> Model","text":"<p>Represents a hint that is locked for the current user.</p> <pre><code>{\n    \"id\": 1,\n    \"cost\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>cost</code> <code>int</code> The cost of the hint"},{"location":"endpoints/challenges/#unlockedchallengehint-model","title":"<code>UnlockedChallengeHint</code> Model","text":"<p>Represents a hint that is unlocked for the current user.</p> <pre><code>{\n    \"id\": 1,\n    \"cost\": 1,\n    \"content\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>cost</code> <code>int</code> The cost of the hint <code>content</code> <code>string</code> The content of the hint"},{"location":"endpoints/challenges/#challengeattemptresult-model","title":"<code>ChallengeAttemptResult</code> Model","text":"<p>Represents the response from sending a challenge attempt.</p> <pre><code>{\n    \"status\": \"string\",\n    \"message\": \"string\" // (1)!\n}\n</code></pre> <ol> <li>The message sometimes might be <code>null</code></li> </ol> Name Type Description <code>status</code> <code>string</code> The status of the attempt <code>message</code> <code>string</code> The message from the attempt Challenge Attempt Statuses Status Description Status Code <code>correct</code> The attempt was correct <code>200</code> <code>incorrect</code> The attempt was incorrect or you have 0 tries left for this challenge <code>200 / 403</code> <code>authentication_required</code> The user must log in to send an attempt <code>403</code> <code>paused</code> The CTF is paused <code>403</code> <code>ratelimited</code> The user is submitting attempts too quickly <code>429</code> <code>already_solved</code> The challenge has already been solved by the user or the user's team <code>200</code>"},{"location":"endpoints/challenges/#challengetype-model","title":"<code>ChallengeType</code> Model","text":"<p>Represents a challenge type.</p> <pre><code>{\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"templates\": {\n        \"create\": \"string\",\n        \"update\": \"string\",\n        \"view\": \"string\"\n    },\n    \"scripts\": {\n        \"create\": \"string\",\n        \"update\": \"string\",\n        \"view\": \"string\"\n    },\n    \"create\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>string</code> The ID of the challenge type <code>name</code> <code>string</code> The name of the challenge type <code>templates</code> <code>dict[str, str]</code> A dictionary of templates for creating, updating, and viewing challenges of this type <code>scripts</code> <code>dict[str, str]</code> A dictionary of scripts for creating, updating, and viewing challenges of this type <code>create</code> <code>string</code> The tempate for creating challenges of this type"},{"location":"endpoints/challenges/#challengefileresponse-model","title":"<code>ChallengeFileResponse</code> Model","text":"<p>Represents a file associated with a challenge.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"challenge\",\n    \"location\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the file <code>type</code> <code>Literal[\"challenge\"]</code> The type of the file. Will always be <code>\"challenge\"</code> <code>location</code> <code>string</code> The location of the file"},{"location":"endpoints/challenges/#challengesolvesresponse-model","title":"<code>ChallengeSolvesResponse</code> Model","text":"<p>Represents a solve for a challenge</p> <pre><code>{\n    \"account_id\": 1,\n    \"name\": \"string\",\n    \"date\": \"string\",\n    \"account_url\": \"string\"\n}\n</code></pre> Name Type Description <code>account_id</code> <code>int</code> The ID of the account that solved the challenge <code>name</code> <code>string</code> The name of the account that solved the challenge <code>date</code> <code>string</code> The date the challenge was solved <code>account_url</code> <code>string</code> The URL of the account that solved the challenge"},{"location":"endpoints/challenges/#challengetopicresponse-model","title":"<code>ChallengeTopicResponse</code> Model","text":"<p>Represents a topic associated with a challenge.</p> <pre><code>{\n    \"id\": 1,\n    \"challenge_id\": 1,\n    \"topic_id\": 1,\n    \"value\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the challenge-topic association <code>challenge_id</code> <code>int</code> The ID of the challenge <code>topic_id</code> <code>int</code> The ID of the topic <code>value</code> <code>string</code> The value of the topic"},{"location":"endpoints/comments/","title":"Comments Endpoints","text":"<p>CTFd Version: <code>3.7.0</code></p> <p>Last Updated: 30/3/2024</p>"},{"location":"endpoints/comments/#models","title":"Models","text":"<ul> <li><code>Comment</code> Model</li> <li><code>ChallengeComment</code> Model</li> <li><code>UserComment</code> Model</li> <li><code>TeamComment</code> Model</li> <li><code>PageComment</code> Model</li> </ul>"},{"location":"endpoints/comments/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /comments</code></li> <li><code>POST /comments</code></li> <li><code>DELETE /comments/{comment_id}</code></li> </ul>"},{"location":"endpoints/comments/#comment-model","title":"<code>Comment</code> Model","text":"<p>Represents a comment in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"standard\",\n    \"content\": \"string\",\n    \"date\": \"string\",\n    \"author_id\": 1,\n    \"author\": {\n        \"name\": \"string\"\n    },\n    \"html\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the comment <code>type</code> <code>string</code> The type of the comment. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code>, <code>\"user\"</code>, <code>\"team\"</code>, <code>\"page\"</code> <code>content</code> <code>string</code> The content of the comment <code>date</code> <code>string</code> The date the comment was created in ISO 8601 format <code>author_id</code> <code>int</code> The ID of the author of the comment <code>author</code> <code>dict</code> The author of the comment <code>html</code> <code>string</code> The HTML content of the comment"},{"location":"endpoints/comments/#challengecomment-model","title":"<code>ChallengeComment</code> Model","text":"<p>Represents a comment for a challenge in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"challenge\",\n    \"content\": \"string\",\n    \"date\": \"string\",\n    \"author_id\": 1,\n    \"author\": {\n        \"name\": \"string\"\n    },\n    \"html\": \"string\",\n    \"challenge_id\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the comment <code>type</code> <code>string</code> The type of the comment. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code>, <code>\"user\"</code>, <code>\"team\"</code>, <code>\"page\"</code> <code>content</code> <code>string</code> The content of the comment <code>date</code> <code>string</code> The date the comment was created in ISO 8601 format <code>author_id</code> <code>int</code> The ID of the author of the comment <code>author</code> <code>dict</code> The author of the comment <code>html</code> <code>string</code> The HTML content of the comment <code>challenge_id</code> <code>int</code> The ID of the challenge the comment is associated with"},{"location":"endpoints/comments/#usercomment-model","title":"<code>UserComment</code> Model","text":"<p>Represents a comment for a user in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"user\",\n    \"content\": \"string\",\n    \"date\": \"string\",\n    \"author_id\": 1,\n    \"author\": {\n        \"name\": \"string\"\n    },\n    \"html\": \"string\",\n    \"user_id\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the comment <code>type</code> <code>string</code> The type of the comment. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code>, <code>\"user\"</code>, <code>\"team\"</code>, <code>\"page\"</code> <code>content</code> <code>string</code> The content of the comment <code>date</code> <code>string</code> The date the comment was created in ISO 8601 format <code>author_id</code> <code>int</code> The ID of the author of the comment <code>author</code> <code>dict</code> The author of the comment <code>html</code> <code>string</code> The HTML content of the comment <code>user_id</code> <code>int</code> The ID of the user the comment is associated with"},{"location":"endpoints/comments/#teamcomment-model","title":"<code>TeamComment</code> Model","text":"<p>Represents a comment for a team in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"team\",\n    \"content\": \"string\",\n    \"date\": \"string\",\n    \"author_id\": 1,\n    \"author\": {\n        \"name\": \"string\"\n    },\n    \"html\": \"string\",\n    \"team_id\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the comment <code>type</code> <code>string</code> The type of the comment. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code>, <code>\"user\"</code>, <code>\"team\"</code>, <code>\"page\"</code> <code>content</code> <code>string</code> The content of the comment <code>date</code> <code>string</code> The date the comment was created in ISO 8601 format <code>author_id</code> <code>int</code> The ID of the author of the comment <code>author</code> <code>dict</code> The author of the comment <code>html</code> <code>string</code> The HTML content of the comment <code>team_id</code> <code>int</code> The ID of the team the comment is associated with"},{"location":"endpoints/comments/#pagecomment-model","title":"<code>PageComment</code> Model","text":"<p>Represents a comment for a page in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"page\",\n    \"content\": \"string\",\n    \"date\": \"string\",\n    \"author_id\": 1,\n    \"author\": {\n        \"name\": \"string\"\n    },\n    \"html\": \"string\",\n    \"page_id\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the comment <code>type</code> <code>string</code> The type of the comment. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code>, <code>\"user\"</code>, <code>\"team\"</code>, <code>\"page\"</code> <code>content</code> <code>string</code> The content of the comment <code>date</code> <code>string</code> The date the comment was created in ISO 8601 format <code>author_id</code> <code>int</code> The ID of the author of the comment <code>author</code> <code>dict</code> The author of the comment <code>html</code> <code>string</code> The HTML content of the comment <code>page_id</code> <code>int</code> The ID of the page the comment is associated with"},{"location":"endpoints/comments/#get-comments","title":"<code>GET /comments</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get comments in bulk. Limited to 50 comments per request. Can be filtered by <code>challenge_id</code>, <code>user_id</code>, <code>team_id</code> and <code>page_id</code>.</p>"},{"location":"endpoints/comments/#query-parameters","title":"Query Parameters","text":"Name Type Description <code>challenge_id</code> <code>int</code> The ID of the challenge to get comments for <code>user_id</code> <code>int</code> The ID of the user to get comments for <code>team_id</code> <code>int</code> The ID of the team to get comments for <code>page_id</code> <code>int</code> The ID of the page to get comments for <code>q</code> <code>string</code> A search query to match against the given <code>field</code>. If this is specified, <code>field</code> must also be specified <code>field</code> <code>string</code> The field to search against, can be either only <code>content</code>. If this is specified, <code>q</code> must also be specified. <code>page</code> <code>int</code> The page number to retrieve. Defaults to 1"},{"location":"endpoints/comments/#response","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The comments were retrieved successfully</p> <ul> <li><code>list[</code><code>Comment</code><code>|</code><code>ChallengeComment</code><code>|</code><code>UserComment</code><code>|</code><code>TeamComment</code><code>|</code><code>PageComment</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"meta\": {\n        \"pagination\": {\n            \"page\": 1,\n            \"next\": 1,\n            \"prev\": 1,\n            \"pages\": 1,\n            \"per_page\": 50,\n            \"total\": 1\n        }\n    },\n    \"data\": [\n        {\n            \"id\": 1,\n            \"type\": \"standard\",\n            \"content\": \"string\",\n            \"date\": \"string\",\n            \"author_id\": 1,\n            \"author\": {\n                \"name\": \"string\"\n            },\n            \"html\": \"string\"\n        },\n        {\n            \"id\": 1,\n            \"type\": \"challenge\",\n            \"content\": \"string\",\n            \"date\": \"string\",\n            \"author_id\": 1,\n            \"author\": {\n                \"name\": \"string\"\n            },\n            \"html\": \"string\",\n            \"challenge_id\": 1\n        },\n        {\n            \"id\": 1,\n            \"type\": \"user\",\n            \"content\": \"string\",\n            \"date\": \"string\",\n            \"author_id\": 1,\n            \"author\": {\n                \"name\": \"string\"\n            },\n            \"html\": \"string\",\n            \"user_id\": 1\n        },\n        {\n            \"id\": 1,\n            \"type\": \"team\",\n            \"content\": \"string\",\n            \"date\": \"string\",\n            \"author_id\": 1,\n            \"author\": {\n                \"name\": \"string\"\n            },\n            \"html\": \"string\",\n            \"team_id\": 1\n        },\n        {\n            \"id\": 1,\n            \"type\": \"page\",\n            \"content\": \"string\",\n            \"date\": \"string\",\n            \"author_id\": 1,\n            \"author\": {\n                \"name\": \"string\"\n            },\n            \"html\": \"string\",\n            \"page_id\": 1\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You do not have the access to view comments</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/comments/#return-values","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the comment <code>type</code> <code>string</code> The type of the comment. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code>, <code>\"user\"</code>, <code>\"team\"</code>, <code>\"page\"</code> <code>content</code> <code>string</code> The content of the comment <code>date</code> <code>string</code> The date the comment was created in ISO 8601 format <code>author_id</code> <code>int</code> The ID of the author of the comment <code>author</code> <code>dict</code> The author of the comment <code>html</code> <code>string</code> The HTML content of the comment <code>challenge_id</code> <code>int</code> The ID of the challenge the comment is associated with <code>user_id</code> <code>int</code> The ID of the user the comment is associated with <code>team_id</code> <code>int</code> The ID of the team the comment is associated with <code>page_id</code> <code>int</code> The ID of the page the comment is associated with"},{"location":"endpoints/comments/#post-comments","title":"<code>POST /comments</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to create a new comment.</p>"},{"location":"endpoints/comments/#json-parameters","title":"JSON Parameters","text":"<p>Note</p> <p>It is not possible to post a comment as another user by setting <code>author_id</code> to a different value. The <code>author_id</code> field is ignored and the comment is always created as the currently authenticated user.</p> Name Type Description <code>content</code> <code>string</code> The content of the comment <code>type</code> (Optional) <code>string</code> The type of the comment. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code>, <code>\"user\"</code>, <code>\"team\"</code>, <code>\"page\"</code> <code>author_id</code> (Optional) <code>int</code> The ID of the author of the comment <code>date</code> (Optional) <code>string</code> The date the comment was created in ISO 8601 format <code>challenge_id</code> (Optional) <code>int</code> The ID of the challenge to associate the comment with <code>user_id</code> (Optional) <code>int</code> The ID of the user to associate the comment with <code>team_id</code> (Optional) <code>int</code> The ID of the team to associate the comment with <code>page_id</code> (Optional) <code>int</code> The ID of the page to associate the comment with"},{"location":"endpoints/comments/#response_1","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The comment was created successfully</p> <ul> <li><code>Comment</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"standard\",\n        \"content\": \"string\",\n        \"date\": \"string\",\n        \"author_id\": 1,\n        \"author\": {\n            \"name\": \"string\"\n        },\n        \"html\": \"string\"\n    }\n}\n</code></pre></li> <li><code>ChallengeComment</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"challenge\",\n        \"content\": \"string\",\n        \"date\": \"string\",\n        \"author_id\": 1,\n        \"author\": {\n            \"name\": \"string\"\n        },\n        \"html\": \"string\",\n        \"challenge_id\": 1\n    }\n}\n</code></pre></li> <li><code>UserComment</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"user\",\n        \"content\": \"string\",\n        \"date\": \"string\",\n        \"author_id\": 1,\n        \"author\": {\n            \"name\": \"string\"\n        },\n        \"html\": \"string\",\n        \"user_id\": 1\n    }\n}\n</code></pre></li> <li><code>TeamComment</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"team\",\n        \"content\": \"string\",\n        \"date\": \"string\",\n        \"author_id\": 1,\n        \"author\": {\n            \"name\": \"string\"\n        },\n        \"html\": \"string\",\n        \"team_id\": 1\n    }\n}\n</code></pre></li> <li><code>PageComment</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"page\",\n        \"content\": \"string\",\n        \"date\": \"string\",\n        \"author_id\": 1,\n        \"author\": {\n            \"name\": \"string\"\n        },\n        \"html\": \"string\",\n        \"page_id\": 1\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/comments/#return-values_1","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the comment <code>type</code> <code>string</code> The type of the comment. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code>, <code>\"user\"</code>, <code>\"team\"</code>, <code>\"page\"</code> <code>content</code> <code>string</code> The content of the comment <code>date</code> <code>string</code> The date the comment was created in ISO 8601 format <code>author_id</code> <code>int</code> The ID of the author of the comment <code>author</code> <code>dict</code> The author of the comment <code>html</code> <code>string</code> The HTML content of the comment <code>challenge_id</code> <code>int</code> The ID of the challenge the comment is associated with <code>user_id</code> <code>int</code> The ID of the user the comment is associated with <code>team_id</code> <code>int</code> The ID of the team the comment is associated with <code>page_id</code> <code>int</code> The ID of the page the comment is associated with"},{"location":"endpoints/comments/#delete-commentscomment_id","title":"<code>DELETE /comments/{comment_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to delete a <code>Comment</code>.</p>"},{"location":"endpoints/comments/#response_2","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The comment was deleted successfully</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": true\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The comment with the specified <code>comment_id</code> does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/files/","title":"Files Endpoints","text":"<p>CTFd Version: <code>3.7.0</code></p> <p>Last Updated: 30/3/2024</p>"},{"location":"endpoints/files/#models","title":"Models","text":"<ul> <li><code>File</code> Model</li> </ul>"},{"location":"endpoints/files/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /files</code></li> <li><code>POST /files</code></li> <li><code>GET /files/{file_id}</code></li> <li><code>DELETE /files/{file_id}</code></li> </ul>"},{"location":"endpoints/files/#file-model","title":"<code>File</code> Model","text":"<p>Represents a file in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"string\",\n    \"location\": \"string\",\n    \"sha1sum\": \"string\",\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the file <code>type</code> <code>string</code> The type of the file. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code> and <code>\"page\"</code> <code>location</code> <code>string</code> The location of the file <code>sha1sum</code> <code>string</code> The SHA1 checksum of the file"},{"location":"endpoints/files/#challengefile-model","title":"<code>ChallengeFile</code> Model","text":"<p>Represents a file associated with a challenge in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"challenge\",\n    \"location\": \"string\",\n    \"sha1sum\": \"string\",\n    \"challenge_id\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the file <code>type</code> <code>string</code> The type of the file. Has to be set to <code>\"challenge\"</code> <code>location</code> <code>string</code> The location of the file <code>sha1sum</code> <code>string</code> The SHA1 checksum of the file <code>challenge_id</code> <code>int</code> The ID of the challenge that the file is associated with"},{"location":"endpoints/files/#pagefile-model","title":"<code>PageFile</code> Model","text":"<p>Represents a file associated with a page in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"page\",\n    \"location\": \"string\",\n    \"sha1sum\": \"string\",\n    \"page_id\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the file <code>type</code> <code>string</code> The type of the file. Has to be set to <code>\"page\"</code> <code>location</code> <code>string</code> The location of the file <code>sha1sum</code> <code>string</code> The SHA1 checksum of the file <code>page_id</code> <code>int</code> The ID of the page that the file is associated with"},{"location":"endpoints/files/#get-files","title":"<code>GET /files</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get all files in bulk. Can be filtered by <code>type</code> and <code>location</code>.</p>"},{"location":"endpoints/files/#query-parameters","title":"Query Parameters","text":"Name Type Description <code>type</code> <code>string</code> The type of the file to filter by. Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code> and <code>\"page\"</code> <code>location</code> <code>string</code> The location of the file to filter by <code>q</code> <code>string</code> A search query to match against the given <code>field</code>. If this is specified, <code>field</code> must also be specified <code>field</code> <code>string</code> The field to search against, can be either <code>type</code> or <code>location</code>. If this is specified, <code>q</code> must also be specified."},{"location":"endpoints/files/#response","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The files were retrieved successfully</p> <ul> <li><code>list[</code><code>File</code><code>|</code><code>ChallengeFile</code><code>|</code><code>PageFile</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"type\": \"string\",\n            \"location\": \"string\",\n            \"sha1sum\": \"string\",\n        },\n        {\n            \"id\": 1,\n            \"type\": \"challenge\",\n            \"location\": \"string\",\n            \"sha1sum\": \"string\",\n            \"challenge_id\": 1\n        },\n        {\n            \"id\": 1,\n            \"type\": \"page\",\n            \"location\": \"string\",\n            \"sha1sum\": \"string\",\n            \"page_id\": 1\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/files/#post-files","title":"<code>POST /files</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to create a new file.</p>"},{"location":"endpoints/files/#multipart-form-parameters","title":"Multipart Form Parameters","text":"Fun Fact <p>This is the only endpoint that accepts multipart form data when using an API key for authentication. In fact, there is logic in the source code written specifically for this endpoint. CTFd/utils/initialization/__init__.py<pre><code>    @app.before_request\n    def tokens():\n        token = request.headers.get(\"Authorization\")\n        if token and (\n            request.mimetype == \"application/json\"\n            # Specially allow multipart/form-data for file uploads\n            or (\n                request.endpoint == \"api.files_files_list\"\n                and request.method == \"POST\"\n                and request.mimetype == \"multipart/form-data\"\n            )\n        ):\n            ...\n</code></pre></p> <p>Warning</p> <p>If the <code>location</code> field is set to a path where a file already exists, the existing file will be overwritten. </p> Field Name Description <code>file</code> The file(s) to upload. This can be specified multiple times to upload multiple files. <code>challenge_id</code> (Optional) The ID of the challenge to associate the file(s) with. This is required if the file is a challenge file. If both <code>challenge_id</code> and <code>challenge</code> is specified, <code>challenge_id</code> will be used. <code>challenge</code> (Optional) The ID of the challenge to associate the file(s) with. This is required if the file is a challenge file. If both <code>challenge_id</code> and <code>challenge</code> is specified, <code>challenge_id</code> will be used. <code>page_id</code> (Optional) The ID of the page(s) to associate the file with. This is required if the file is a page file. If both <code>page_id</code> and <code>page</code> is specified, <code>page_id</code> will be used. <code>page</code> (Optional) The ID of the page to associate the file(s) with. This is required if the file is a page file. If both <code>page_id</code> and <code>page</code> is specified, <code>page_id</code> will be used. <code>type</code> (Optional) The type of the file(s). Possible values are <code>\"standard\"</code>, <code>\"challenge\"</code> and <code>\"page\"</code>. Defaults to <code>\"standard\"</code> <code>location</code> The location of the file. If multiple files are specified, this field cannot be set."},{"location":"endpoints/files/#response_1","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The file was created successfully</p> <ul> <li><code>list[</code><code>File</code><code>|</code><code>ChallengeFile</code><code>|</code><code>PageFile</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"type\": \"string\",\n            \"location\": \"string\",\n            \"sha1sum\": \"string\",\n        },\n        {\n            \"id\": 1,\n            \"type\": \"challenge\",\n            \"location\": \"string\",\n            \"sha1sum\": \"string\",\n            \"challenge_id\": 1\n        },\n        {\n            \"id\": 1,\n            \"type\": \"page\",\n            \"location\": \"string\",\n            \"sha1sum\": \"string\",\n            \"page_id\": 1\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/files/#get-filesfile_id","title":"<code>GET /files/{file_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get a specific file.</p>"},{"location":"endpoints/files/#response_2","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The file was retrieved successfully</p> <ul> <li><code>File</code> | <code>ChallengeFile</code> | <code>PageFile</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"string\",\n        \"location\": \"string\",\n        \"sha1sum\": \"string\",\n    }\n}\n</code></pre> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"challenge\",\n        \"location\": \"string\",\n        \"sha1sum\": \"string\",\n        \"challenge_id\": 1\n    }\n}\n</code></pre> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"page\",\n        \"location\": \"string\",\n        \"sha1sum\": \"string\",\n        \"page_id\": 1\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The file does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/files/#delete-filesfile_id","title":"<code>DELETE /files/{file_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to delete a specific file.</p>"},{"location":"endpoints/files/#response_3","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The file was deleted successfully</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": true\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The file does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/flags/","title":"Flags Endpoints","text":"<p>CTFd Version: <code>3.7.1</code></p> <p>Last Updated: 6/6/2024</p>"},{"location":"endpoints/flags/#models","title":"Models","text":"<ul> <li><code>Flag</code> Model</li> <li><code>FlagType</code> Model</li> </ul>"},{"location":"endpoints/flags/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /flags</code></li> <li><code>POST /flags</code></li> <li><code>GET /flags/types</code></li> <li><code>GET /flags/types/{type_name}</code></li> <li><code>GET /flags/{flag_id}</code></li> <li><code>PATCH /flags/{flag_id}</code></li> <li><code>DELETE /flags/{flag_id}</code></li> </ul>"},{"location":"endpoints/flags/#flag-model","title":"<code>Flag</code> Model","text":"<p>Represents a flag in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"challenge_id\": 1,\n    \"type\": \"string\",\n    \"content\": \"string\",\n    \"data\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the flag <code>challenge_id</code> <code>int</code> The ID of the challenge the flag is for <code>type</code> <code>string</code> The type of the flag, can be either <code>\"static\"</code> or <code>\"regex\"</code> <code>content</code> <code>string</code> The content of the flag <code>data</code> <code>string</code> The data of the flag, seems to only be used for the flag's case-insensitivity, can be either <code>\"case_insensitive\"</code> or <code>\"\"</code>"},{"location":"endpoints/flags/#flagtype-model","title":"<code>FlagType</code> Model","text":"<pre><code>{\n    \"name\": \"string\",\n    \"templates\": {\n        \"create\": \"string\",\n        \"update\": \"string\"\n    }\n}\n</code></pre> Name Type Description <code>name</code> <code>string</code> The name of the flag type <code>templates</code> <code>dict</code> The templates for creating and updating flags of this type"},{"location":"endpoints/flags/#get-flags","title":"<code>GET /flags</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get all flags in bulk. Can be filtered by <code>challenge_id</code>, flag <code>type</code>, flag <code>content</code>, and flag <code>data</code>.</p>"},{"location":"endpoints/flags/#query-parameters","title":"Query Parameters","text":"Name Type Description <code>challenge_id</code> <code>int</code> The ID of the challenge to get flags for <code>type</code> <code>string</code> The type of flag to get <code>content</code> <code>string</code> The content of the flag to match <code>data</code> <code>string</code> The data of the flag to match, seems to only be used for the flag's case-insensitivity, possible values are <code>case_insensitive</code> or a blank string <code>q</code> <code>string</code> A search query to match against the given <code>field</code>. If this is specified, <code>field</code> must also be specified <code>field</code> <code>string</code> The field to search against, can be either <code>type</code>, <code>content</code> or <code>data</code>. If this is specified, <code>q</code> must also be specified."},{"location":"endpoints/flags/#response","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The flags were successfully retrieved</p> <ul> <li><code>list[</code><code>Flag</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"challenge_id\": 1,\n            \"type\": \"string\",\n            \"content\": \"string\",\n            \"data\": \"string\"\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/flags/#return-values","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the flag <code>challenge_id</code> <code>int</code> The ID of the challenge the flag is for <code>type</code> <code>string</code> The type of the flag, can be either <code>\"static\"</code> or <code>\"regex\"</code> <code>content</code> <code>string</code> The content of the flag <code>data</code> <code>string</code> The data of the flag, seems to only be used for the flag's case-insensitivity, can be either <code>\"case_insensitive\"</code> or <code>\"\"</code>"},{"location":"endpoints/flags/#post-flags","title":"<code>POST /flags</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to create a new flag.</p>"},{"location":"endpoints/flags/#json-parameters","title":"JSON Parameters","text":"Name Type Description <code>challenge_id</code> <code>int</code> The ID of the challenge the flag is for <code>type</code> <code>string</code> The type of the flag, can be either <code>\"static\"</code> or <code>\"regex\"</code> <code>content</code> <code>string</code> The content of the flag <code>data</code> <code>string</code> The data of the flag, seems to only be used for the flag's case-insensitivity, can be either <code>\"case_insensitive\"</code> or <code>\"\"</code>"},{"location":"endpoints/flags/#response_1","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The flag was successfully created</p> <ul> <li><code>Flag</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"challenge_id\": 1,\n        \"type\": \"string\",\n        \"content\": \"string\",\n        \"data\": \"string\"\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/flags/#return-values_1","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the flag <code>challenge_id</code> <code>int</code> The ID of the challenge the flag is for <code>type</code> <code>string</code> The type of the flag, can be either <code>\"static\"</code> or <code>\"regex\"</code> <code>content</code> <code>string</code> The content of the flag <code>data</code> <code>string</code> The data of the flag, seems to only be used for the flag's case-insensitivity, can be either <code>\"case_insensitive\"</code> or <code>\"\"</code>"},{"location":"endpoints/flags/#get-flagstypes","title":"<code>GET /flags/types</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get all flag types.</p>"},{"location":"endpoints/flags/#response_2","title":"Response","text":"<ul> <li><code>200 OK</code> - The flag types were successfully retrieved<ul> <li><code>dict[str,</code><code>FlagType</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"string\": {\n            \"name\": \"string\",\n            \"templates\": {\n                \"create\": \"string\",\n                \"update\": \"string\"\n            }\n        }\n    }\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/flags/#return-values_2","title":"Return Values","text":"Name Type Description <code>name</code> <code>string</code> The name of the flag type <code>templates</code> <code>dict</code> The templates for creating and updating flags of this type"},{"location":"endpoints/flags/#get-flagstypestype_name","title":"<code>GET /flags/types/{type_name}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get a specific flag type.</p>"},{"location":"endpoints/flags/#response_3","title":"Response","text":"<ul> <li><code>200 OK</code> - The flag type was successfully retrieved<ul> <li><code>FlagType</code>`     <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"name\": \"string\",\n        \"templates\": {\n            \"create\": \"string\",\n            \"update\": \"string\"\n        }\n    }\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/flags/#return-values_3","title":"Return Values","text":"Name Type Description <code>name</code> <code>string</code> The name of the flag type <code>templates</code> <code>dict</code> The templates for creating and updating flags of this type"},{"location":"endpoints/flags/#get-flagsflag_id","title":"<code>GET /flags/{flag_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get a specific flag.</p>"},{"location":"endpoints/flags/#response_4","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The flag was successfully retrieved</p> <ul> <li><code>Flag</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"challenge_id\": 1,\n        \"type\": \"string\",\n        \"content\": \"string\",\n        \"data\": \"string\",\n        \"templates\": {\n            \"create\": \"string\",\n            \"update\": \"string\"\n        }\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The flag with the given ID does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/flags/#return-values_4","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the flag <code>challenge_id</code> <code>int</code> The ID of the challenge the flag is for <code>type</code> <code>string</code> The type of the flag, can be either <code>\"static\"</code> or <code>\"regex\"</code> <code>content</code> <code>string</code> The content of the flag <code>data</code> <code>string</code> The data of the flag, seems to only be used for the flag's case-insensitivity, can be either <code>\"case_insensitive\"</code> or <code>\"\"</code> <code>templates</code> <code>dict</code> The templates for creating and updating flags of this type"},{"location":"endpoints/flags/#patch-flagsflag_id","title":"<code>PATCH /flags/{flag_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to update a specific flag.</p>"},{"location":"endpoints/flags/#json-parameters_1","title":"JSON Parameters","text":"Name Type Description <code>challenge_id</code> <code>int</code> The ID of the challenge the flag is for <code>type</code> <code>string</code> The type of the flag, can be either <code>\"static\"</code> or <code>\"regex\"</code> <code>content</code> <code>string</code> The content of the flag <code>data</code> <code>string</code> The data of the flag, seems to only be used for the flag's case-insensitivity, can be either <code>\"case_insensitive\"</code> or <code>\"\"</code>"},{"location":"endpoints/flags/#response_5","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The flag was successfully updated</p> <ul> <li><code>Flag</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"challenge_id\": 1,\n        \"type\": \"string\",\n        \"content\": \"string\",\n        \"data\": \"string\"\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The flag with the given ID does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/flags/#return-values_5","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the flag <code>challenge_id</code> <code>int</code> The ID of the challenge the flag is for <code>type</code> <code>string</code> The type of the flag, can be either <code>\"static\"</code> or <code>\"regex\"</code> <code>content</code> <code>string</code> The content of the flag <code>data</code> <code>string</code> The data of the flag, seems to only be used for the flag's case-insensitivity, can be either <code>\"case_insensitive\"</code> or <code>\"\"</code>"},{"location":"endpoints/flags/#delete-flagsflag_id","title":"<code>DELETE /flags/{flag_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to delete a specific flag.</p>"},{"location":"endpoints/flags/#response_6","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The flag was successfully deleted</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": true\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The flag with the given ID does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/hints/","title":"Hints Endpoints","text":"<p>CTFd Version: <code>3.7.0</code></p> <p>Last Updated: 30/3/2024</p>"},{"location":"endpoints/hints/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /hints</code></li> <li><code>POST /hints</code></li> <li><code>GET /hints/{hint_id}</code></li> <li><code>PATCH /hints/{hint_id}</code></li> <li><code>DELETE /hints/{hint_id}</code></li> </ul>"},{"location":"endpoints/hints/#get-hints","title":"<code>GET /hints</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to get hints in bulk. Can be filtered by <code>type</code>, <code>challenge_id</code>, <code>content</code> and <code>cost</code></p>"},{"location":"endpoints/hints/#query-parameters","title":"Query Parameters","text":"Name Type Description <code>type</code> <code>string</code> The type of hint to get, seems to always be <code>\"standard\"</code> <code>challenge_id</code> <code>int</code> The ID of the challenge to get hints for <code>content</code> <code>string</code> The content of the hint to match <code>cost</code> <code>int</code> The cost of the hint to match <code>q</code> <code>string</code> A search query to match against the given <code>field</code>. If this is specified, <code>field</code> must also be specified <code>field</code> <code>string</code> The field to search against, can be either <code>type</code> or <code>content</code>. If this is specified, <code>q</code> must also be specified."},{"location":"endpoints/hints/#response","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The hints were successfully retrieved</p> <ul> <li><code>list[</code><code>LockedHint</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"type\": \"string\",\n            \"challenge\": 1,\n            \"challenge_id\": 1,\n            \"cost\": 1\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/hints/#return-values","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>cost</code> <code>int</code> The cost of the hint"},{"location":"endpoints/hints/#post-hints","title":"<code>POST /hints</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to create a new hint.</p>"},{"location":"endpoints/hints/#json-parameters","title":"JSON Parameters","text":"Name Type Description <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>content</code> <code>string</code> The content of the hint <code>cost</code> <code>int</code> The cost of the hint <code>requirements</code> (Optional) <code>dict</code> The hint's requirements. This dictionary has a single item, <code>prerequisites</code>, which is a list of hint IDs required to unlock before this one."},{"location":"endpoints/hints/#response_1","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The hint was successfully created</p> <ul> <li><code>Hint</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"string\",\n        \"challenge\": 1,\n        \"challenge_id\": 1,\n        \"content\": \"string\",\n        \"html\": \"string\",\n        \"cost\": 1,\n        \"requirements\": {\n            \"prerequisites\": [\n                1\n            ]\n        }\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/hints/#return-values_1","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>content</code> <code>string</code> The content of the hint <code>html</code> <code>string</code> The HTML content of the hint <code>cost</code> <code>int</code> The cost of the hint <code>requirements</code> <code>dict</code> The hint's requirements. This dictionary has a single item, <code>prerequisites</code>, which is a list of hint IDs required to unlock before this one. (Optional)"},{"location":"endpoints/hints/#get-hintshint_id","title":"<code>GET /hints/{hint_id}</code>","text":"<p>Endpoint to get a hint by its ID.</p>"},{"location":"endpoints/hints/#response_2","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The hint was successfully retrieved</p> HintLocked HintUnlocked Hint <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"string\",\n        \"challenge\": 1,\n        \"challenge_id\": 1,\n        \"content\": \"string\",\n        \"html\": \"string\",\n        \"cost\": 1,\n        \"requirements\": {\n            \"prerequisites\": [\n                1\n            ]\n        }\n    }\n}\n</code></pre> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"string\",\n        \"challenge\": 1,\n        \"challenge_id\": 1,\n        \"cost\": 1\n    }\n}\n</code></pre> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"string\",\n        \"challenge\": 1,\n        \"challenge_id\": 1,\n        \"content\": \"string\",\n        \"html\": \"string\",\n        \"cost\": 1\n    }\n}\n</code></pre> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to view that hint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        {}\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The hint was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/hints/#return-values_2","title":"Return Values","text":"HintLocked HintUnlocked Hint Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>content</code> <code>string</code> The content of the hint <code>html</code> <code>string</code> The HTML content of the hint <code>cost</code> <code>int</code> The cost of the hint <code>requirements</code> <code>dict</code> The hint's requirements. This dictionary has a single item, <code>prerequisites</code>, which is a list of hint IDs required to unlock before this one. (Optional) Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>cost</code> <code>int</code> The cost of the hint Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>content</code> <code>string</code> The content of the hint <code>html</code> <code>string</code> The HTML content of the hint <code>cost</code> <code>int</code> The cost of the hint"},{"location":"endpoints/hints/#patch-hintshint_id","title":"<code>PATCH /hints/{hint_id}</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to update a hint by its ID.</p>"},{"location":"endpoints/hints/#json-parameters_1","title":"JSON Parameters","text":"<p>Danger</p> <p>The effect of changing the values for <code>type</code> and <code>challenge_id</code> is unknown. Changing these values is not recommended.</p> Name Type Description <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>content</code> <code>string</code> The content of the hint <code>cost</code> <code>int</code> The cost of the hint <code>requirements</code> (Optional) <code>dict</code> The hint's requirements. This dictionary has a single item, <code>prerequisites</code>, which is a list of hint IDs required to unlock before this one."},{"location":"endpoints/hints/#response_3","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The hint was successfully updated</p> <ul> <li><code>Hint</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"type\": \"string\",\n        \"challenge\": 1,\n        \"challenge_id\": 1,\n        \"content\": \"string\",\n        \"html\": \"string\",\n        \"cost\": 1,\n        \"requirements\": {\n            \"prerequisites\": [\n                1\n            ]\n        }\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The hint was not found</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/hints/#return-values_3","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>content</code> <code>string</code> The content of the hint <code>html</code> <code>string</code> The HTML content of the hint <code>cost</code> <code>int</code> The cost of the hint <code>requirements</code> <code>dict</code> The hint's requirements. This dictionary has a single item, <code>prerequisites</code>, which is a list of hint IDs required to unlock before this one. (Optional)"},{"location":"endpoints/hints/#delete-hintshint_id","title":"<code>DELETE /hints/{hint_id}</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to delete a hint by its ID.</p>"},{"location":"endpoints/hints/#response_4","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The hint was successfully deleted</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": true\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The hint with the given ID does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/hints/#models","title":"Models","text":"<ul> <li><code>Hint</code> Model</li> <li><code>LockedHint</code> Model</li> <li><code>UnlockedHint</code> Model</li> </ul>"},{"location":"endpoints/hints/#hint-model","title":"<code>Hint</code> Model","text":"<p>Represents a hint.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"string\",\n    \"challenge\": 1,\n    \"challenge_id\": 1,\n    \"content\": \"string\",\n    \"html\": \"string\",\n    \"cost\": 1,\n    \"requirements\": {\n        \"prerequisites\": [\n            1\n        ]\n    }\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>content</code> <code>string</code> The content of the hint <code>html</code> <code>string</code> The HTML content of the hint <code>cost</code> <code>int</code> The cost of the hint <code>requirements</code> <code>dict</code> The hint's requirements. This dictionary has a single item, <code>prerequisites</code>, which is a list of hint IDs required to unlock before this one. (Optional)"},{"location":"endpoints/hints/#lockedhint-model","title":"<code>LockedHint</code> Model","text":"<p>Represents a hint locked for the current user.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"string\",\n    \"challenge\": 1,\n    \"challenge_id\": 1,\n    \"cost\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>cost</code> <code>int</code> The cost of the hint"},{"location":"endpoints/hints/#unlockedhint-model","title":"<code>UnlockedHint</code> Model","text":"<p>Represents a hint unlocked for the current user.</p> <pre><code>{\n    \"id\": 1,\n    \"type\": \"string\",\n    \"challenge\": 1,\n    \"challenge_id\": 1,\n    \"content\": \"string\",\n    \"html\": \"string\",\n    \"cost\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the hint <code>type</code> <code>string</code> The type of the hint, seems to always be <code>\"standard\"</code> <code>challenge</code> <code>int</code> The ID of the challenge the hint is for (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The ID of the challenge the hint is for <code>content</code> <code>string</code> The content of the hint <code>html</code> <code>string</code> The HTML content of the hint <code>cost</code> <code>int</code> The cost of the hint"},{"location":"endpoints/tags/","title":"Tags Endpoints","text":"<p>CTFd Version: <code>3.7.0</code></p> <p>Last Updated: 30/3/2024</p>"},{"location":"endpoints/tags/#models","title":"Models","text":"<ul> <li><code>TagUserView</code> Model</li> <li><code>Tag</code> Model</li> </ul>"},{"location":"endpoints/tags/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /tags</code></li> <li><code>POST /tags</code></li> <li><code>GET /tags/{tag_id}</code></li> <li><code>PATCH /tags/{tag_id}</code></li> <li><code>DELETE /tags/{tag_id}</code></li> </ul>"},{"location":"endpoints/tags/#taguserview-model","title":"<code>TagUserView</code> Model","text":"<p>Represents a tag when viewed by a regular user.</p> <pre><code>{\n    \"value\": \"string\"\n}\n</code></pre> Name Type Description <code>value</code> <code>string</code> The value of the tag"},{"location":"endpoints/tags/#tag-model","title":"<code>Tag</code> Model","text":"<p>Represents a tag in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"challenge\": 1,\n    \"challenge_id\": 1,\n    \"value\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the tag <code>challenge</code> <code>int</code> The challenge that the tag is associated with (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The challenge that the tag is associated with <code>value</code> <code>string</code> The value of the tag"},{"location":"endpoints/tags/#get-tags","title":"<code>GET /tags</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get all tags in bulk. Can be filtered by <code>challenge_id</code> and <code>value</code>.</p>"},{"location":"endpoints/tags/#query-parameters","title":"Query Parameters","text":"Name Type Description <code>challenge_id</code> <code>int</code> The ID of the challenge to get tags for <code>value</code> <code>string</code> The value of the tag to filter by <code>q</code> <code>string</code> A search query to match against the given <code>field</code>. If this is specified, <code>field</code> must also be specified <code>field</code> <code>string</code> The field to search against, can be either <code>challenge_id</code> or <code>value</code>. If this is specified, <code>q</code> must also be specified."},{"location":"endpoints/tags/#response","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The tags were retrieved successfully</p> <ul> <li><code>list[</code><code>Tag</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"challenge\": 1,\n            \"challenge_id\": 1,\n            \"value\": \"string\"\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You do not have the access to view tags</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/tags/#return-values","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the tag <code>challenge</code> <code>int</code> The challenge that the tag is associated with (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The challenge that the tag is associated with <code>value</code> <code>string</code> The value of the tag"},{"location":"endpoints/tags/#post-tags","title":"<code>POST /tags</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to create a new tag.</p>"},{"location":"endpoints/tags/#json-parameters","title":"JSON Parameters","text":"Name Type Description <code>challenge_id</code> <code>int</code> The ID of the challenge to associate the tag with <code>value</code> <code>string</code> The value of the tag"},{"location":"endpoints/tags/#response_1","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The tag was created successfully</p> <ul> <li><code>Tag</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"challenge\": 1,\n        \"challenge_id\": 1,\n        \"value\": \"string\"\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You do not have the access to create tags</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/tags/#return-values_1","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the tag <code>challenge</code> <code>int</code> The challenge that the tag is associated with (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The challenge that the tag is associated with <code>value</code> <code>string</code> The value of the tag"},{"location":"endpoints/tags/#get-tagstag_id","title":"<code>GET /tags/{tag_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get a specific tag.</p>"},{"location":"endpoints/tags/#response_2","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The tag was retrieved successfully</p> <ul> <li><code>Tag</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"challenge\": 1,\n        \"challenge_id\": 1,\n        \"value\": \"string\"\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You do not have the access to view tags</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/tags/#return-values_2","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the tag <code>challenge</code> <code>int</code> The challenge that the tag is associated with (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The challenge that the tag is associated with <code>value</code> <code>string</code> The value of the tag"},{"location":"endpoints/tags/#patch-tagstag_id","title":"<code>PATCH /tags/{tag_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to update a specific tag.</p>"},{"location":"endpoints/tags/#json-parameters_1","title":"JSON Parameters","text":"<p>Danger</p> <p>The effect of changing the <code>challenge_id</code> field is unknown. Changing this field is not recommended.</p> Name Type Description <code>challenge_id</code> <code>int</code> The ID of the challenge to associate the tag with <code>value</code> <code>string</code> The value of the tag"},{"location":"endpoints/tags/#response_3","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The tag was updated successfully</p> <ul> <li><code>Tag</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"challenge\": 1,\n        \"challenge_id\": 1,\n        \"value\": \"string\"\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You do not have the access to update tags</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/tags/#return-values_3","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the tag <code>challenge</code> <code>int</code> The challenge that the tag is associated with (I'm not sure why this field exists) <code>challenge_id</code> <code>int</code> The challenge that the tag is associated with <code>value</code> <code>string</code> The value of the tag"},{"location":"endpoints/tags/#delete-tagstag_id","title":"<code>DELETE /tags/{tag_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to delete a specific tag.</p>"},{"location":"endpoints/tags/#response_4","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The tag was deleted successfully</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": true\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You do not have the access to delete tags</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/topics/","title":"Topics Endpoints","text":"<p>CTFd Version: <code>3.7.1</code></p> <p>Last Updated: 6/6/2024</p>"},{"location":"endpoints/topics/#models","title":"Models","text":"<ul> <li><code>Topic</code> Model</li> <li><code>ChallengeTopic</code> Model</li> </ul>"},{"location":"endpoints/topics/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /topics</code></li> <li><code>POST /topics</code></li> <li><code>DELETE /topics</code></li> <li><code>GET /topics/{topic_id}</code></li> <li><code>DELETE /topics/{topic_id}</code></li> </ul>"},{"location":"endpoints/topics/#topic-model","title":"<code>Topic</code> Model","text":"<p>Represents a topic in the CTFd database.</p> <pre><code>{\n    \"id\": 1,\n    \"value\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the topic <code>value</code> <code>string</code> The value of the topic"},{"location":"endpoints/topics/#challengetopic-model","title":"<code>ChallengeTopic</code> Model","text":"<p>Represents a topic associated with a challenge in the CTFd database. This is essentially a reference between a <code>Topic</code> and a <code>Challenge</code>.</p> <pre><code>{\n    \"id\": 1,\n    \"challenge_id\": 1,\n    \"challenge\": 1,\n    \"topic_id\": 1,\n    \"topic\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the challenge-topic association <code>challenge_id</code> <code>int</code> The ID of the challenge <code>challenge</code> <code>int</code> The ID of the challenge <code>topic_id</code> <code>int</code> The ID of the topic <code>topic</code> <code>int</code> The ID of the topic"},{"location":"endpoints/topics/#get-topics","title":"<code>GET /topics</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get topics in bulk. Can be filtered by <code>value</code>.</p>"},{"location":"endpoints/topics/#query-parameters","title":"Query Parameters","text":"Name Type Description <code>value</code> <code>string</code> The value of the topic to get topics for <code>q</code> <code>string</code> A search query to match against the given <code>field</code>. If this is specified, <code>field</code> must also be specified <code>field</code> <code>string</code> The field to search against, can only be set to <code>value</code>. If this is specified, <code>q</code> must also be specified."},{"location":"endpoints/topics/#response","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The topics were successfully retrieved</p> <ul> <li><code>list[</code><code>Topic</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"value\": \"string\"\n        }\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/topics/#return-values","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the topic <code>value</code> <code>string</code> The value of the topic"},{"location":"endpoints/topics/#post-topics","title":"<code>POST /topics</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to create a new <code>Topic</code> and/or a <code>ChallengeTopic</code>.</p>"},{"location":"endpoints/topics/#json-parameters","title":"JSON Parameters","text":"<p>Info</p> <p>If <code>type</code> is not set to <code>\"challenge\"</code>, it will return a <code>400 Bad Request</code> response. However, if there is no topic with the specified <code>value</code>, a new topic will still be created.</p> Name Type Description <code>value</code> <code>string</code> The value of the topic to create. If a topic with the same value does not exist, a new <code>Topic</code> will be created <code>topic_id</code> <code>int</code> The ID of the topic to associate with a challenge. If <code>value</code> is specified, this field is ignored <code>type</code> <code>string</code> The type of the topic to create. Can only be <code>\"challenge\"</code> <code>challenge_id</code> <code>int</code> The ID of the challenge to associate the topic with. Must be specified if <code>type</code> is set to <code>\"challenge\"</code>"},{"location":"endpoints/topics/#response_1","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The challenge topic was created successfully</p> <ul> <li><code>ChallengeTopic</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"challenge_id\": 1,\n        \"challenge\": 1,\n        \"topic_id\": 1,\n        \"topic\": 1\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li> <p><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ] // (1)!\n}\n</code></pre></p> <ol> <li>If a <code>Topic</code> is created but <code>type</code> is not set to <code>\"challenge\"</code>, the <code>errors</code> field will not exist</li> </ol> </li> </ul> </li> <li> <p><code>403 Forbidden</code> - You do not have the access to create topics</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The topic with the specified <code>topic_id</code> does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/topics/#return-values_1","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the challenge-topic association <code>challenge_id</code> <code>int</code> The ID of the challenge <code>challenge</code> <code>int</code> The ID of the challenge <code>topic_id</code> <code>int</code> The ID of the topic <code>topic</code> <code>int</code> The ID of the topic"},{"location":"endpoints/topics/#delete-topics","title":"<code>DELETE /topics</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to delete a <code>ChallengeTopic</code>.</p>"},{"location":"endpoints/topics/#query-parameters_1","title":"Query Parameters","text":"Name Type Description <code>type</code> <code>string</code> The type of the topic to delete. Can only be <code>\"challenge\"</code> <code>target_id</code> <code>int</code> The ID of the topic to delete."},{"location":"endpoints/topics/#response_2","title":"Response","text":"<ul> <li><code>200 OK</code> - The topic was deleted successfully<ul> <li><code>application/json</code> <pre><code>{\n    \"success\": true\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li> <p><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ] // (1)!\n}\n</code></pre></p> <ol> <li>If <code>type</code> is not set to <code>\"challenge\"</code>, the <code>errors</code> field will not exist</li> </ol> </li> </ul> </li> <li> <p><code>403 Forbidden</code> - You do not have the access to delete topics</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The topic with the specified <code>target_id</code> does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/topics/#get-topicstopic_id","title":"<code>GET /topics/{topic_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to get a specific topic.</p>"},{"location":"endpoints/topics/#response_3","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The topic was successfully retrieved</p> <ul> <li><code>Topic</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"value\": \"string\"\n    }\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You are not allowed to access this endpoint</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The topic with the specified <code>topic_id</code> does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/topics/#return-values_2","title":"Return Values","text":"Name Type Description <code>id</code> <code>int</code> The ID of the topic <code>value</code> <code>string</code> The value of the topic"},{"location":"endpoints/topics/#delete-topicstopic_id","title":"<code>DELETE /topics/{topic_id}</code>","text":"<p>Note</p> <p>This endpoint is only accessible to admins.</p> <p>Endpoint to delete a <code>Topic</code>.</p>"},{"location":"endpoints/topics/#response_4","title":"Response","text":"<ul> <li> <p><code>200 OK</code> - The topic was deleted successfully</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": true\n}\n</code></pre></li> </ul> </li> <li> <p><code>400 Bad Request</code> - An error occurred processing the provided or stored data</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"errors\": [\n        \"string\"\n    ]\n}\n</code></pre></li> </ul> </li> <li> <p><code>403 Forbidden</code> - You do not have the access to delete topics</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> <li> <p><code>404 Not Found</code> - The topic with the specified <code>topic_id</code> does not exist</p> <ul> <li><code>application/json</code> <pre><code>{\n    \"success\": false,\n    \"message\": \"string\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/users/","title":"Users Endpoints","text":"<p>CTFd Version: <code>3.7.1</code></p> <p>Last Updated: 4/6/2024</p>"},{"location":"endpoints/users/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /users</code></li> <li><code>POST /users</code></li> <li><code>GET /users/me</code></li> <li><code>PATCH /users/me</code></li> <li><code>GET /users/me/awards</code></li> <li><code>GET /users/me/fails</code></li> <li><code>GET /users/me/solves</code></li> <li><code>GET /users/{user_id}</code></li> <li><code>PATCH /users/{user_id}</code></li> <li><code>DELETE /users/{user_id}</code></li> <li><code>GET /users/{user_id}/awards</code></li> <li><code>POST /users/{user_id}/email</code></li> <li><code>GET /users/{user_id}/fails</code></li> <li><code>GET /users/{user_id}/solves</code></li> </ul>"},{"location":"endpoints/users/#get-users","title":"<code>GET /users</code>","text":"<p>Warning</p> <p>This endpoint only returns users that are visible to the user by default. To get all users, set the <code>view</code> query parameter to <code>\"admin\"</code>.</p> <p>Warning</p> <p>The data returned by this endpoint only contains a part of each user's details. To get the full details of a user as an admin, use the <code>GET /users/{user_id}</code> endpoint.</p> <p>Warning</p> <p>If there is more than 50 results, the response will be paginated. To get the next page of results, set the <code>page</code> query parameter to the page number.</p> <p>Endpoint to get users in bulk. Can be filtered by <code>affiliation</code>, <code>country</code> and <code>bracket</code>.</p>"},{"location":"endpoints/users/#query-parameters","title":"Query Parameters","text":"<p>Note</p> <p><code>field</code> can be set to <code>email</code> only if the user is an admin.</p> Name Type Description <code>affiliation</code> <code>string</code> The affiliation of the user to get users for <code>country</code> <code>string</code> The country of the user to get users for <code>bracket</code> <code>int</code> The bracket of the user to get users for <code>q</code> <code>string</code> A search query to match against the given <code>field</code>. If this is specified, <code>field</code> must also be specified <code>field</code> <code>string</code> The field to search against, can be either <code>name</code>, <code>website</code>, <code>country</code>, <code>bracket</code>, <code>affiliation</code> or <code>email</code>. If this is specified, <code>q</code> must also be specified <code>view</code> <code>string</code> The view of the users to output. If set to <code>\"admin\"</code>, it will show all users including <code>hidden</code> and <code>banned</code> users. <code>page</code> <code>int</code> The page number to get results for"},{"location":"endpoints/users/#response","title":"Response","text":"<ul> <li><code>list[</code><code>UserListing</code><code>]</code> <pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"oauth_id\": 1,\n            \"name\": \"string\",\n            \"website\": \"string\",\n            \"affiliation\": \"string\",\n            \"country\": \"string\",\n            \"bracket_id\": 1,\n            \"team_id\": 1,\n            \"fields\": [ ]\n        }\n    ]\n}\n</code></pre></li> </ul>"},{"location":"endpoints/users/#post-users","title":"<code>POST /users</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to create a new user.</p>"},{"location":"endpoints/users/#query-parameters_1","title":"Query Parameters","text":"Name Type Description <code>notify</code> <code>bool</code> Whether to send the user an email containing their credentials"},{"location":"endpoints/users/#json-parameters","title":"JSON Parameters","text":"Name Type Description <code>name</code> <code>string</code> The name of the user <code>email</code> <code>string</code> The email of the user <code>password</code> <code>string</code> The password of the user <code>type</code> <code>string</code> The type of the user. Can be either <code>\"user\"</code> or <code>\"admin\"</code> <code>website</code> <code>string</code> The website of the user <code>affiliation</code> <code>string</code> The affiliation of the user <code>country</code> <code>string</code> The country of the user <code>bracket_id</code> <code>int</code> The bracket ID of the user <code>hidden</code> <code>bool</code> Whether the user is hidden <code>banned</code> <code>bool</code> Whether the user is banned <code>verified</code> <code>bool</code> Whether the user is verified <code>language</code> <code>string</code> The language of the user <code>fields</code> <code>list</code> The fields of the user"},{"location":"endpoints/users/#response_1","title":"Response","text":"<ul> <li><code>User</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"oauth_id\": 1,\n        \"name\": \"string\",\n        \"password\": \"string\",\n        \"email\": \"string\",\n        \"type\": \"string\",\n        \"secret\": \"string\",\n        \"website\": \"string\",\n        \"affiliation\": \"string\",\n        \"country\": \"string\",\n        \"bracket_id\": 1,\n        \"hidden\": true,\n        \"banned\": true,\n        \"verified\": true,\n        \"language\": \"string\",\n        \"team_id\": 1,\n        \"fields\": [ ],\n        \"created\": \"string\"\n    }\n}\n</code></pre></li> </ul>"},{"location":"endpoints/users/#get-usersme","title":"<code>GET /users/me</code>","text":"<p>Endpoint to get the current user's details.</p>"},{"location":"endpoints/users/#response_2","title":"Response","text":"<ul> <li><code>UserPrivateView</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"oauth_id\": 1,\n        \"name\": \"string\",\n        \"email\": \"string\",\n        \"website\": \"string\",\n        \"affiliation\": \"string\",\n        \"country\": \"string\",\n        \"bracket_id\": 1,\n        \"language\": \"string\",\n        \"team_id\": 1,\n        \"fields\": [ ],\n        \"place\": 1,\n        \"score\": 1\n    }\n}\n</code></pre></li> </ul>"},{"location":"endpoints/users/#patch-usersme","title":"<code>PATCH /users/me</code>","text":"<p>Endpoint to update the current user's details.</p>"},{"location":"endpoints/users/#json-parameters_1","title":"JSON Parameters","text":"<p>Warning</p> <p>If you want to update the <code>email</code> or <code>password</code> and you are not an admin, the <code>confirm</code> field containing your current password must be provided.</p> Name Type Description <code>name</code> <code>string</code> The name of the user <code>email</code> <code>string</code> The email of the user <code>password</code> <code>string</code> The password of the user <code>website</code> <code>string</code> The website of the user <code>affiliation</code> <code>string</code> The affiliation of the user <code>country</code> <code>string</code> The country of the user <code>bracket_id</code> <code>int</code> The bracket ID of the user <code>language</code> <code>string</code> The language of the user <code>fields</code> <code>list</code> The fields of the user <code>confirm</code> <code>string</code> The current password of the user. If you want to update the <code>email</code> or <code>password</code> and you are not an admin, this field must be provided."},{"location":"endpoints/users/#response_3","title":"Response","text":"<ul> <li><code>UserPrivateView</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"oauth_id\": 1,\n        \"name\": \"string\",\n        \"email\": \"string\",\n        \"website\": \"string\",\n        \"affiliation\": \"string\",\n        \"country\": \"string\",\n        \"bracket_id\": 1,\n        \"language\": \"string\",\n        \"team_id\": 1,\n        \"fields\": [ ],\n        \"place\": 1,\n        \"score\": 1\n    }\n}\n</code></pre></li> </ul>"},{"location":"endpoints/users/#get-usersmeawards","title":"<code>GET /users/me/awards</code>","text":"<p>Endpoint to get the awards of the current user.</p>"},{"location":"endpoints/users/#todo","title":"TODO","text":""},{"location":"endpoints/users/#get-usersmefails","title":"<code>GET /users/me/fails</code>","text":"<p>Endpoint to get the fails of the current user.</p>"},{"location":"endpoints/users/#todo_1","title":"TODO","text":""},{"location":"endpoints/users/#get-usersmesolves","title":"<code>GET /users/me/solves</code>","text":"<p>Endpoint to get the solves of the current user.</p>"},{"location":"endpoints/users/#todo_2","title":"TODO","text":""},{"location":"endpoints/users/#get-usersuser_id","title":"<code>GET /users/{user_id}</code>","text":"<p>Note</p> <p>If you are not an admin, this endpoint will only return the public view of the user.</p> <p>Endpoint to get a user's details.</p>"},{"location":"endpoints/users/#response_4","title":"Response","text":"Admin ViewPublic View <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"oauth_id\": 1,\n        \"name\": \"string\",\n        \"email\": \"string\",\n        \"type\": \"string\",\n        \"secret\": \"string\",\n        \"website\": \"string\",\n        \"affiliation\": \"string\",\n        \"country\": \"string\",\n        \"bracket_id\": 1,\n        \"hidden\": true,\n        \"banned\": true,\n        \"verified\": true,\n        \"language\": \"string\",\n        \"team_id\": 1,\n        \"fields\": [ ],\n        \"created\": \"string\",\n        \"place\": 1,\n        \"score\": 1\n    }\n}\n</code></pre> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"oauth_id\": 1,\n        \"name\": \"string\",\n        \"website\": \"string\",\n        \"affiliation\": \"string\",\n        \"country\": \"string\",\n        \"bracket_id\": 1,\n        \"team_id\": 1,\n        \"fields\": [ ],\n        \"place\": 1,\n        \"score\": 1\n    }\n}\n</code></pre>"},{"location":"endpoints/users/#patch-usersuser_id","title":"<code>PATCH /users/{user_id}</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to update a user's details.</p>"},{"location":"endpoints/users/#json-parameters_2","title":"JSON Parameters","text":"Name Type Description <code>name</code> <code>string</code> The name of the user <code>email</code> <code>string</code> The email of the user <code>type</code> <code>string</code> The type of the user. Can be either <code>\"user\"</code> or <code>\"admin\"</code> <code>secret</code> <code>string</code> The secret of the user <code>website</code> <code>string</code> The website of the user <code>affiliation</code> <code>string</code> The affiliation of the user <code>country</code> <code>string</code> The country of the user <code>bracket_id</code> <code>int</code> The bracket ID of the user <code>hidden</code> <code>bool</code> Whether the user is hidden <code>banned</code> <code>bool</code> Whether the user is banned <code>verified</code> <code>bool</code> Whether the user is verified <code>language</code> <code>string</code> The language of the user <code>fields</code> <code>list</code> The fields of the user"},{"location":"endpoints/users/#response_5","title":"Response","text":"<ul> <li><code>UserAdminView</code> <pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"oauth_id\": 1,\n        \"name\": \"string\",\n        \"email\": \"string\",\n        \"type\": \"string\",\n        \"secret\": \"string\",\n        \"website\": \"string\",\n        \"affiliation\": \"string\",\n        \"country\": \"string\",\n        \"bracket_id\": 1,\n        \"hidden\": true,\n        \"banned\": true,\n        \"verified\": true,\n        \"language\": \"string\",\n        \"team_id\": 1,\n        \"fields\": [ ],\n        \"created\": \"string\",\n        \"place\": 1,\n        \"score\": 1\n    }\n}\n</code></pre></li> </ul>"},{"location":"endpoints/users/#delete-usersuser_id","title":"<code>DELETE /users/{user_id}</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to delete a user.</p>"},{"location":"endpoints/users/#response_6","title":"Response","text":"<pre><code>{\n    \"success\": true\n}\n</code></pre>"},{"location":"endpoints/users/#get-usersuser_idawards","title":"<code>GET /users/{user_id}/awards</code>","text":"<p>Endpoint to get the awards of a user.</p>"},{"location":"endpoints/users/#todo_3","title":"TODO","text":""},{"location":"endpoints/users/#post-usersuser_idemail","title":"<code>POST /users/{user_id}/email</code>","text":"<p>This endpoint is only accessible to admins.</p> <p>Endpoint to send an email to a user.</p>"},{"location":"endpoints/users/#json-parameters_3","title":"JSON Parameters","text":"Name Type Description <code>text</code> <code>string</code> The text of the email to send"},{"location":"endpoints/users/#response_7","title":"Response","text":"<pre><code>{\n    \"success\": true\n}\n</code></pre>"},{"location":"endpoints/users/#get-usersuser_idfails","title":"<code>GET /users/{user_id}/fails</code>","text":"<p>Endpoint to get the fails of a user.</p>"},{"location":"endpoints/users/#todo_4","title":"TODO","text":""},{"location":"endpoints/users/#get-usersuser_idsolves","title":"<code>GET /users/{user_id}/solves</code>","text":"<p>Endpoint to get the solves of a user.</p>"},{"location":"endpoints/users/#todo_5","title":"TODO","text":""},{"location":"endpoints/users/#models","title":"Models","text":"<ul> <li><code>User</code> Model</li> <li><code>UserAdminView</code> Model</li> <li><code>UserPublicView</code> Model</li> <li><code>UserPrivateView</code> Model</li> </ul>"},{"location":"endpoints/users/#user-model","title":"<code>User</code> Model","text":"<p>Represents a user in the CTFd database</p> <pre><code>{\n    \"id\": 1,\n    \"oauth_id\": 1,\n    \"name\": \"string\",\n    \"password\": \"string\",\n    \"email\": \"string\",\n    \"type\": \"string\",\n    \"secret\": \"string\",\n    \"website\": \"string\",\n    \"affiliation\": \"string\",\n    \"country\": \"string\",\n    \"bracket_id\": 1,\n    \"hidden\": true,\n    \"banned\": true,\n    \"verified\": true,\n    \"language\": \"string\",\n    \"team_id\": 1,\n    \"fields\": [ ],\n    \"created\": \"string\"\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the user <code>oauth_id</code> <code>int</code> The OAuth ID of the user <code>name</code> <code>string</code> The name of the user <code>password</code> <code>string</code> The password of the user <code>email</code> <code>string</code> The email of the user <code>type</code> <code>string</code> The type of the user. Can be either <code>\"user\"</code> or <code>\"admin\"</code> <code>secret</code> <code>string</code> The secret of the user <code>website</code> <code>string</code> The website of the user <code>affiliation</code> <code>string</code> The affiliation of the user <code>country</code> <code>string</code> The country of the user <code>bracket_id</code> <code>int</code> The bracket ID of the user <code>hidden</code> <code>bool</code> Whether the user is hidden <code>banned</code> <code>bool</code> Whether the user is banned <code>verified</code> <code>bool</code> Whether the user is verified <code>language</code> <code>string</code> The language of the user <code>team_id</code> <code>int</code> The team ID of the user <code>fields</code> <code>list</code> The fields of the user <code>created</code> <code>string</code> The creation date of the user"},{"location":"endpoints/users/#userlisting-model","title":"<code>UserListing</code> Model","text":"<p>Represents a public view of a user in the CTFd database</p> <pre><code>{\n    \"id\": 1,\n    \"oauth_id\": 1,\n    \"name\": \"string\",\n    \"website\": \"string\",\n    \"affiliation\": \"string\",\n    \"country\": \"string\",\n    \"bracket_id\": 1,\n    \"team_id\": 1,\n    \"fields\": [ ]\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the user <code>oauth_id</code> <code>int</code> The OAuth ID of the user <code>name</code> <code>string</code> The name of the user <code>website</code> <code>string</code> The website of the user <code>affiliation</code> <code>string</code> The affiliation of the user <code>country</code> <code>string</code> The country of the user <code>bracket_id</code> <code>int</code> The bracket ID of the user <code>team_id</code> <code>int</code> The team ID of the user <code>fields</code> <code>list</code> The fields of the user"},{"location":"endpoints/users/#useradminview-model","title":"<code>UserAdminView</code> Model","text":"<p>Represents a user in the CTFd database</p> <pre><code>{\n    \"id\": 1,\n    \"oauth_id\": 1,\n    \"name\": \"string\",\n    \"email\": \"string\",\n    \"type\": \"string\",\n    \"secret\": \"string\",\n    \"website\": \"string\",\n    \"affiliation\": \"string\",\n    \"country\": \"string\",\n    \"bracket_id\": 1,\n    \"hidden\": true,\n    \"banned\": true,\n    \"verified\": true,\n    \"language\": \"string\",\n    \"team_id\": 1,\n    \"fields\": [ ],\n    \"created\": \"string\",\n    \"place\": 1,\n    \"score\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the user <code>oauth_id</code> <code>int</code> The OAuth ID of the user <code>name</code> <code>string</code> The name of the user <code>email</code> <code>string</code> The email of the user <code>type</code> <code>string</code> The type of the user. Can be either <code>\"user\"</code> or <code>\"admin\"</code> <code>secret</code> <code>string</code> The secret of the user <code>website</code> <code>string</code> The website of the user <code>affiliation</code> <code>string</code> The affiliation of the user <code>country</code> <code>string</code> The country of the user <code>bracket_id</code> <code>int</code> The bracket ID of the user <code>hidden</code> <code>bool</code> Whether the user is hidden <code>banned</code> <code>bool</code> Whether the user is banned <code>verified</code> <code>bool</code> Whether the user is verified <code>language</code> <code>string</code> The language of the user <code>team_id</code> <code>int</code> The team ID of the user <code>fields</code> <code>list</code> The fields of the user <code>created</code> <code>string</code> The creation date of the user <code>place</code> <code>int</code> The place of the user <code>score</code> <code>int</code> The score of the user"},{"location":"endpoints/users/#userpublicview-model","title":"<code>UserPublicView</code> Model","text":"<p>Represents a public view of a user in the CTFd database</p> <pre><code>{\n    \"id\": 1,\n    \"oauth_id\": 1,\n    \"name\": \"string\",\n    \"website\": \"string\",\n    \"affiliation\": \"string\",\n    \"country\": \"string\",\n    \"bracket_id\": 1,\n    \"team_id\": 1,\n    \"fields\": [ ],\n    \"place\": 1,\n    \"score\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the user <code>oauth_id</code> <code>int</code> The OAuth ID of the user <code>name</code> <code>string</code> The name of the user <code>website</code> <code>string</code> The website of the user <code>affiliation</code> <code>string</code> The affiliation of the user <code>country</code> <code>string</code> The country of the user <code>bracket_id</code> <code>int</code> The bracket ID of the user <code>team_id</code> <code>int</code> The team ID of the user <code>fields</code> <code>list</code> The fields of the user <code>place</code> <code>int</code> The place of the user <code>score</code> <code>int</code> The score of the user"},{"location":"endpoints/users/#userprivateview-model","title":"<code>UserPrivateView</code> Model","text":"<p>Represents a private view of a user in the CTFd database</p> <pre><code>{\n    \"id\": 1,\n    \"oauth_id\": 1,\n    \"name\": \"string\",\n    \"email\": \"string\",\n    \"website\": \"string\",\n    \"affiliation\": \"string\",\n    \"country\": \"string\",\n    \"bracket_id\": 1,\n    \"language\": \"string\",\n    \"team_id\": 1,\n    \"fields\": [ ],\n    \"place\": 1,\n    \"score\": 1\n}\n</code></pre> Name Type Description <code>id</code> <code>int</code> The ID of the user <code>oauth_id</code> <code>int</code> The OAuth ID of the user <code>name</code> <code>string</code> The name of the user <code>email</code> <code>string</code> The email of the user <code>website</code> <code>string</code> The website of the user <code>affiliation</code> <code>string</code> The affiliation of the user <code>country</code> <code>string</code> The country of the user <code>bracket_id</code> <code>int</code> The bracket ID of the user <code>language</code> <code>string</code> The language of the user <code>team_id</code> <code>int</code> The team ID of the user <code>fields</code> <code>list</code> The fields of the user <code>place</code> <code>int</code> The place of the user <code>score</code> <code>int</code> The score of the user"}]}